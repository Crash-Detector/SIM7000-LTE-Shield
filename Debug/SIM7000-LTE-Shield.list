
SIM7000-LTE-Shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005638  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  080057f8  080057f8  000157f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b08  08005b08  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b08  08005b08  00015b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b10  08005b10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b10  08005b10  00015b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b14  08005b14  00015b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000055c  20000070  08005b88  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  08005b88  000205cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e1e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002176  00000000  00000000  00031ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00034038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  00034b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa30  00000000  00000000  00035570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e02e  00000000  00000000  0005ffa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100ca3  00000000  00000000  0006dfce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016ec71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d8  00000000  00000000  0016ecc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080057e0 	.word	0x080057e0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	080057e0 	.word	0x080057e0

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b96e 	b.w	80005c4 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468c      	mov	ip, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8083 	bne.w	8000416 <__udivmoddi4+0x116>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d947      	bls.n	80003a6 <__udivmoddi4+0xa6>
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	b142      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031c:	f1c2 0020 	rsb	r0, r2, #32
 8000320:	fa24 f000 	lsr.w	r0, r4, r0
 8000324:	4091      	lsls	r1, r2
 8000326:	4097      	lsls	r7, r2
 8000328:	ea40 0c01 	orr.w	ip, r0, r1
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbbc f6f8 	udiv	r6, ip, r8
 8000338:	fa1f fe87 	uxth.w	lr, r7
 800033c:	fb08 c116 	mls	r1, r8, r6, ip
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb06 f10e 	mul.w	r1, r6, lr
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000352:	f080 8119 	bcs.w	8000588 <__udivmoddi4+0x288>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8116 	bls.w	8000588 <__udivmoddi4+0x288>
 800035c:	3e02      	subs	r6, #2
 800035e:	443b      	add	r3, r7
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45a6      	cmp	lr, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	193c      	adds	r4, r7, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037e:	f080 8105 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f240 8102 	bls.w	800058c <__udivmoddi4+0x28c>
 8000388:	3802      	subs	r0, #2
 800038a:	443c      	add	r4, r7
 800038c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	2600      	movs	r6, #0
 8000396:	b11d      	cbz	r5, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c5 4300 	strd	r4, r3, [r5]
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	b902      	cbnz	r2, 80003aa <__udivmoddi4+0xaa>
 80003a8:	deff      	udf	#255	; 0xff
 80003aa:	fab2 f282 	clz	r2, r2
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	d150      	bne.n	8000454 <__udivmoddi4+0x154>
 80003b2:	1bcb      	subs	r3, r1, r7
 80003b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	2601      	movs	r6, #1
 80003be:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c2:	0c21      	lsrs	r1, r4, #16
 80003c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb08 f30c 	mul.w	r3, r8, ip
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0xe4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0xe2>
 80003dc:	428b      	cmp	r3, r1
 80003de:	f200 80e9 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1ac9      	subs	r1, r1, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x10c>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x10a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80d9 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e7bf      	b.n	8000396 <__udivmoddi4+0x96>
 8000416:	428b      	cmp	r3, r1
 8000418:	d909      	bls.n	800042e <__udivmoddi4+0x12e>
 800041a:	2d00      	cmp	r5, #0
 800041c:	f000 80b1 	beq.w	8000582 <__udivmoddi4+0x282>
 8000420:	2600      	movs	r6, #0
 8000422:	e9c5 0100 	strd	r0, r1, [r5]
 8000426:	4630      	mov	r0, r6
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	fab3 f683 	clz	r6, r3
 8000432:	2e00      	cmp	r6, #0
 8000434:	d14a      	bne.n	80004cc <__udivmoddi4+0x1cc>
 8000436:	428b      	cmp	r3, r1
 8000438:	d302      	bcc.n	8000440 <__udivmoddi4+0x140>
 800043a:	4282      	cmp	r2, r0
 800043c:	f200 80b8 	bhi.w	80005b0 <__udivmoddi4+0x2b0>
 8000440:	1a84      	subs	r4, r0, r2
 8000442:	eb61 0103 	sbc.w	r1, r1, r3
 8000446:	2001      	movs	r0, #1
 8000448:	468c      	mov	ip, r1
 800044a:	2d00      	cmp	r5, #0
 800044c:	d0a8      	beq.n	80003a0 <__udivmoddi4+0xa0>
 800044e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f603 	lsr.w	r6, r0, r3
 800045c:	4097      	lsls	r7, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000466:	40d9      	lsrs	r1, r3
 8000468:	4330      	orrs	r0, r6
 800046a:	0c03      	lsrs	r3, r0, #16
 800046c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000470:	fa1f f887 	uxth.w	r8, r7
 8000474:	fb0e 1116 	mls	r1, lr, r6, r1
 8000478:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047c:	fb06 f108 	mul.w	r1, r6, r8
 8000480:	4299      	cmp	r1, r3
 8000482:	fa04 f402 	lsl.w	r4, r4, r2
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x19c>
 8000488:	18fb      	adds	r3, r7, r3
 800048a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800048e:	f080 808d 	bcs.w	80005ac <__udivmoddi4+0x2ac>
 8000492:	4299      	cmp	r1, r3
 8000494:	f240 808a 	bls.w	80005ac <__udivmoddi4+0x2ac>
 8000498:	3e02      	subs	r6, #2
 800049a:	443b      	add	r3, r7
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b281      	uxth	r1, r0
 80004a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb00 f308 	mul.w	r3, r0, r8
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x1c4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ba:	d273      	bcs.n	80005a4 <__udivmoddi4+0x2a4>
 80004bc:	428b      	cmp	r3, r1
 80004be:	d971      	bls.n	80005a4 <__udivmoddi4+0x2a4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4439      	add	r1, r7
 80004c4:	1acb      	subs	r3, r1, r3
 80004c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ca:	e778      	b.n	80003be <__udivmoddi4+0xbe>
 80004cc:	f1c6 0c20 	rsb	ip, r6, #32
 80004d0:	fa03 f406 	lsl.w	r4, r3, r6
 80004d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004d8:	431c      	orrs	r4, r3
 80004da:	fa20 f70c 	lsr.w	r7, r0, ip
 80004de:	fa01 f306 	lsl.w	r3, r1, r6
 80004e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ea:	431f      	orrs	r7, r3
 80004ec:	0c3b      	lsrs	r3, r7, #16
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fa1f f884 	uxth.w	r8, r4
 80004f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000502:	458a      	cmp	sl, r1
 8000504:	fa02 f206 	lsl.w	r2, r2, r6
 8000508:	fa00 f306 	lsl.w	r3, r0, r6
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x220>
 800050e:	1861      	adds	r1, r4, r1
 8000510:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000514:	d248      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 8000516:	458a      	cmp	sl, r1
 8000518:	d946      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800051a:	f1a9 0902 	sub.w	r9, r9, #2
 800051e:	4421      	add	r1, r4
 8000520:	eba1 010a 	sub.w	r1, r1, sl
 8000524:	b2bf      	uxth	r7, r7
 8000526:	fbb1 f0fe 	udiv	r0, r1, lr
 800052a:	fb0e 1110 	mls	r1, lr, r0, r1
 800052e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000532:	fb00 f808 	mul.w	r8, r0, r8
 8000536:	45b8      	cmp	r8, r7
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x24a>
 800053a:	19e7      	adds	r7, r4, r7
 800053c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000540:	d22e      	bcs.n	80005a0 <__udivmoddi4+0x2a0>
 8000542:	45b8      	cmp	r8, r7
 8000544:	d92c      	bls.n	80005a0 <__udivmoddi4+0x2a0>
 8000546:	3802      	subs	r0, #2
 8000548:	4427      	add	r7, r4
 800054a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800054e:	eba7 0708 	sub.w	r7, r7, r8
 8000552:	fba0 8902 	umull	r8, r9, r0, r2
 8000556:	454f      	cmp	r7, r9
 8000558:	46c6      	mov	lr, r8
 800055a:	4649      	mov	r1, r9
 800055c:	d31a      	bcc.n	8000594 <__udivmoddi4+0x294>
 800055e:	d017      	beq.n	8000590 <__udivmoddi4+0x290>
 8000560:	b15d      	cbz	r5, 800057a <__udivmoddi4+0x27a>
 8000562:	ebb3 020e 	subs.w	r2, r3, lr
 8000566:	eb67 0701 	sbc.w	r7, r7, r1
 800056a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800056e:	40f2      	lsrs	r2, r6
 8000570:	ea4c 0202 	orr.w	r2, ip, r2
 8000574:	40f7      	lsrs	r7, r6
 8000576:	e9c5 2700 	strd	r2, r7, [r5]
 800057a:	2600      	movs	r6, #0
 800057c:	4631      	mov	r1, r6
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e70b      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0x60>
 800058c:	4618      	mov	r0, r3
 800058e:	e6fd      	b.n	800038c <__udivmoddi4+0x8c>
 8000590:	4543      	cmp	r3, r8
 8000592:	d2e5      	bcs.n	8000560 <__udivmoddi4+0x260>
 8000594:	ebb8 0e02 	subs.w	lr, r8, r2
 8000598:	eb69 0104 	sbc.w	r1, r9, r4
 800059c:	3801      	subs	r0, #1
 800059e:	e7df      	b.n	8000560 <__udivmoddi4+0x260>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e7d2      	b.n	800054a <__udivmoddi4+0x24a>
 80005a4:	4660      	mov	r0, ip
 80005a6:	e78d      	b.n	80004c4 <__udivmoddi4+0x1c4>
 80005a8:	4681      	mov	r9, r0
 80005aa:	e7b9      	b.n	8000520 <__udivmoddi4+0x220>
 80005ac:	4666      	mov	r6, ip
 80005ae:	e775      	b.n	800049c <__udivmoddi4+0x19c>
 80005b0:	4630      	mov	r0, r6
 80005b2:	e74a      	b.n	800044a <__udivmoddi4+0x14a>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	4439      	add	r1, r7
 80005ba:	e713      	b.n	80003e4 <__udivmoddi4+0xe4>
 80005bc:	3802      	subs	r0, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e724      	b.n	800040c <__udivmoddi4+0x10c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <print_char>:
const HAL_GPIO_t pwr_pin = { GPIOE, GPIO_PIN_9 };
const HAL_GPIO_t rst_pin = { GPIOF, GPIO_PIN_13 };

// Prints characters \r and \n in a way that doesn't case issues.
void print_char( const char ch )
    {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	char buff[5];
	if ( ch == '\n' )
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	2b0a      	cmp	r3, #10
 80005d6:	d106      	bne.n	80005e6 <print_char+0x1e>
		sprintf( buff, "<LR>" );
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	4910      	ldr	r1, [pc, #64]	; (8000620 <print_char+0x58>)
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 ffd6 	bl	8004590 <siprintf>
 80005e4:	e010      	b.n	8000608 <print_char+0x40>
	else if ( ch == '\r' )
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b0d      	cmp	r3, #13
 80005ea:	d106      	bne.n	80005fa <print_char+0x32>
		sprintf( buff, "<CR>" );
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	490c      	ldr	r1, [pc, #48]	; (8000624 <print_char+0x5c>)
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 ffcc 	bl	8004590 <siprintf>
 80005f8:	e006      	b.n	8000608 <print_char+0x40>
	else
		sprintf( buff, "%c", ch );
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	4909      	ldr	r1, [pc, #36]	; (8000628 <print_char+0x60>)
 8000602:	4618      	mov	r0, r3
 8000604:	f003 ffc4 	bl	8004590 <siprintf>
	printf( "%s 0x%x D:%d\n\r", buff, ch, ch );
 8000608:	79fa      	ldrb	r2, [r7, #7]
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f107 0108 	add.w	r1, r7, #8
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <print_char+0x64>)
 8000612:	f003 ff2f 	bl	8004474 <iprintf>
    } // end print_char
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	080057fc 	.word	0x080057fc
 8000624:	08005804 	.word	0x08005804
 8000628:	0800580c 	.word	0x0800580c
 800062c:	08005810 	.word	0x08005810

08000630 <GPIO_Write>:

void GPIO_Write( HAL_GPIO_t const * const gpio_ptr, const GPIO_PinState pin_state )
    {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin( gpio_ptr->GPIOx, gpio_ptr->GPIO_Pin, pin_state );
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	889b      	ldrh	r3, [r3, #4]
 8000644:	78fa      	ldrb	r2, [r7, #3]
 8000646:	4619      	mov	r1, r3
 8000648:	f001 fa8e 	bl	8001b68 <HAL_GPIO_WritePin>
    } // GPIO_Write( )
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <begin>:
 * 
 * Responses:
 *  <CR><LF><response><CR><LF>
*/
bool begin( Cellular_module_t * const cell_ptr )
    {
 8000654:	b580      	push	{r7, lr}
 8000656:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 800065a:	af02      	add	r7, sp, #8
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	6018      	str	r0, [r3, #0]
    
    if ( cell_ptr->uart_ptr )
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	f000 809c 	beq.w	80007a4 <begin+0x150>
        {
        printf( "Attempting to open comm with ATs\n\r" );
 800066c:	4850      	ldr	r0, [pc, #320]	; (80007b0 <begin+0x15c>)
 800066e:	f003 ff01 	bl	8004474 <iprintf>

        int16_t timeout = 14000;
 8000672:	f243 63b0 	movw	r3, #14000	; 0x36b0
 8000676:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e

        while( timeout > 0 )
 800067a:	e02e      	b.n	80006da <begin+0x86>
            {
            flushInput( cell_ptr->uart_ptr );
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f9b6 	bl	80009f4 <flushInput>
            if ( send_check_reply( cell_ptr, "AT", ok_reply_c, fona_def_timeout_ms_c ) )
 8000688:	4a4a      	ldr	r2, [pc, #296]	; (80007b4 <begin+0x160>)
 800068a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800068e:	b29b      	uxth	r3, r3
 8000690:	1d38      	adds	r0, r7, #4
 8000692:	4949      	ldr	r1, [pc, #292]	; (80007b8 <begin+0x164>)
 8000694:	6800      	ldr	r0, [r0, #0]
 8000696:	f000 f8a3 	bl	80007e0 <send_check_reply>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d121      	bne.n	80006e4 <begin+0x90>
                break;
            //printf( "Failed \n\r\n\r" );
            flushInput( cell_ptr->uart_ptr );
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f9a4 	bl	80009f4 <flushInput>

            if ( send_check_reply( cell_ptr, "AT", "AT", fona_def_timeout_ms_c ) )
 80006ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	1d38      	adds	r0, r7, #4
 80006b4:	4a40      	ldr	r2, [pc, #256]	; (80007b8 <begin+0x164>)
 80006b6:	4940      	ldr	r1, [pc, #256]	; (80007b8 <begin+0x164>)
 80006b8:	6800      	ldr	r0, [r0, #0]
 80006ba:	f000 f891 	bl	80007e0 <send_check_reply>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d111      	bne.n	80006e8 <begin+0x94>
                break;
            // printf( "Failed \n\r\n\r" );
            HAL_Delay( 500 );
 80006c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c8:	f000 ffb2 	bl	8001630 <HAL_Delay>
            timeout -= 500;
 80006cc:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80006d0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
        while( timeout > 0 )
 80006da:	f9b7 340e 	ldrsh.w	r3, [r7, #1038]	; 0x40e
 80006de:	2b00      	cmp	r3, #0
 80006e0:	dccc      	bgt.n	800067c <begin+0x28>
 80006e2:	e002      	b.n	80006ea <begin+0x96>
                break;
 80006e4:	bf00      	nop
 80006e6:	e000      	b.n	80006ea <begin+0x96>
                break;
 80006e8:	bf00      	nop
            } // end while
        
        if( timeout <= 0 )
 80006ea:	f9b7 340e 	ldrsh.w	r3, [r7, #1038]	; 0x40e
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	dc04      	bgt.n	80006fc <begin+0xa8>
            {
            printf( "Timed out!\n\r" );
 80006f2:	4832      	ldr	r0, [pc, #200]	; (80007bc <begin+0x168>)
 80006f4:	f003 febe 	bl	8004474 <iprintf>
            return false;
 80006f8:	2300      	movs	r3, #0
 80006fa:	e054      	b.n	80007a6 <begin+0x152>
            } // end if


        // Turn off Echo
        send_check_reply( cell_ptr, "ATE0", ok_reply_c, fona_def_timeout_ms_c );
 80006fc:	4a2d      	ldr	r2, [pc, #180]	; (80007b4 <begin+0x160>)
 80006fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000702:	b29b      	uxth	r3, r3
 8000704:	1d38      	adds	r0, r7, #4
 8000706:	492e      	ldr	r1, [pc, #184]	; (80007c0 <begin+0x16c>)
 8000708:	6800      	ldr	r0, [r0, #0]
 800070a:	f000 f869 	bl	80007e0 <send_check_reply>
        HAL_Delay( 100 );
 800070e:	2064      	movs	r0, #100	; 0x64
 8000710:	f000 ff8e 	bl	8001630 <HAL_Delay>

        if ( send_check_reply( cell_ptr, "ATE0", ok_reply_c, fona_def_timeout_ms_c ) )
 8000714:	4a27      	ldr	r2, [pc, #156]	; (80007b4 <begin+0x160>)
 8000716:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800071a:	b29b      	uxth	r3, r3
 800071c:	1d38      	adds	r0, r7, #4
 800071e:	4928      	ldr	r1, [pc, #160]	; (80007c0 <begin+0x16c>)
 8000720:	6800      	ldr	r0, [r0, #0]
 8000722:	f000 f85d 	bl	80007e0 <send_check_reply>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d03b      	beq.n	80007a4 <begin+0x150>
            {
            HAL_Delay( 100 );
 800072c:	2064      	movs	r0, #100	; 0x64
 800072e:	f000 ff7f 	bl	8001630 <HAL_Delay>
            flushInput( cell_ptr->uart_ptr );
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4618      	mov	r0, r3
 800073a:	f000 f95b 	bl	80009f4 <flushInput>
            
            printf( "\t---> AT+GMR\n" );
 800073e:	4821      	ldr	r0, [pc, #132]	; (80007c4 <begin+0x170>)
 8000740:	f003 ff1e 	bl	8004580 <puts>

            transmit( cell_ptr,  "AT+GMR" , timeout );
 8000744:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	491f      	ldr	r1, [pc, #124]	; (80007c8 <begin+0x174>)
 800074c:	6818      	ldr	r0, [r3, #0]
 800074e:	f000 f86d 	bl	800082c <transmit>

            printf( "\t<--- %s\n", cell_ptr->reply_buffer );
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	3304      	adds	r3, #4
 8000758:	4619      	mov	r1, r3
 800075a:	481c      	ldr	r0, [pc, #112]	; (80007cc <begin+0x178>)
 800075c:	f003 fe8a 	bl	8004474 <iprintf>
            
            // Nucleo confirms operating with right Cell Module.
            if ( strstr( cell_ptr->reply_buffer, "SIM7000A" ) != NULL )
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3304      	adds	r3, #4
 8000766:	491a      	ldr	r1, [pc, #104]	; (80007d0 <begin+0x17c>)
 8000768:	4618      	mov	r0, r3
 800076a:	f003 ff31 	bl	80045d0 <strstr>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d014      	beq.n	800079e <begin+0x14a>
                {
                char buffer[ 1024 ];
                sprintf( buffer,  "AT+CPMS=%s,%s,%s", "\"SM\"", "\"SM\"", "\"SM\"" );
 8000774:	f107 000c 	add.w	r0, r7, #12
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <begin+0x180>)
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <begin+0x180>)
 800077e:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <begin+0x180>)
 8000780:	4915      	ldr	r1, [pc, #84]	; (80007d8 <begin+0x184>)
 8000782:	f003 ff05 	bl	8004590 <siprintf>
                send_check_reply( cell_ptr, buffer, ok_reply_c, fona_def_timeout_ms_c );
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <begin+0x160>)
 8000788:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800078c:	b29b      	uxth	r3, r3
 800078e:	f107 010c 	add.w	r1, r7, #12
 8000792:	1d38      	adds	r0, r7, #4
 8000794:	6800      	ldr	r0, [r0, #0]
 8000796:	f000 f823 	bl	80007e0 <send_check_reply>
                return true;
 800079a:	2301      	movs	r3, #1
 800079c:	e003      	b.n	80007a6 <begin+0x152>
                } // end if
            else 
                printf( "Couldn't find right revision!\n");
 800079e:	480f      	ldr	r0, [pc, #60]	; (80007dc <begin+0x188>)
 80007a0:	f003 feee 	bl	8004580 <puts>
            } // end if
        } // end if
    return false;
 80007a4:	2300      	movs	r3, #0
    } // end begin( )
 80007a6:	4618      	mov	r0, r3
 80007a8:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	08005820 	.word	0x08005820
 80007b4:	080057f8 	.word	0x080057f8
 80007b8:	08005844 	.word	0x08005844
 80007bc:	08005848 	.word	0x08005848
 80007c0:	08005858 	.word	0x08005858
 80007c4:	08005860 	.word	0x08005860
 80007c8:	08005870 	.word	0x08005870
 80007cc:	08005878 	.word	0x08005878
 80007d0:	08005884 	.word	0x08005884
 80007d4:	08005890 	.word	0x08005890
 80007d8:	08005898 	.word	0x08005898
 80007dc:	080058ac 	.word	0x080058ac

080007e0 <send_check_reply>:


bool send_check_reply( Cellular_module_t * const cell_ptr, char const * const send, 
                        char const * const reply, const uint16_t timeout )
    {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
 80007ec:	807b      	strh	r3, [r7, #2]

    return transmit( cell_ptr, send, timeout ) != reply_buff_size_c &&
 80007ee:	887b      	ldrh	r3, [r7, #2]
 80007f0:	461a      	mov	r2, r3
 80007f2:	68b9      	ldr	r1, [r7, #8]
 80007f4:	68f8      	ldr	r0, [r7, #12]
 80007f6:	f000 f819 	bl	800082c <transmit>
 80007fa:	4603      	mov	r3, r0
 80007fc:	461a      	mov	r2, r3
 80007fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000802:	429a      	cmp	r2, r3
 8000804:	d00a      	beq.n	800081c <send_check_reply+0x3c>
           !strcmp( cell_ptr->reply_buffer, reply );
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3304      	adds	r3, #4
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fcf7 	bl	8000200 <strcmp>
 8000812:	4603      	mov	r3, r0
    return transmit( cell_ptr, send, timeout ) != reply_buff_size_c &&
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <send_check_reply+0x3c>
 8000818:	2301      	movs	r3, #1
 800081a:	e000      	b.n	800081e <send_check_reply+0x3e>
 800081c:	2300      	movs	r3, #0
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	b2db      	uxtb	r3, r3
    } // end send_check_reply( )
 8000824:	4618      	mov	r0, r3
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <transmit>:

uint8_t transmit( Cellular_module_t * const cell_ptr, char const * const send, uint16_t timeout )
    {
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 8000832:	af00      	add	r7, sp, #0
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	6018      	str	r0, [r3, #0]
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	6019      	str	r1, [r3, #0]
 8000840:	1dbb      	adds	r3, r7, #6
 8000842:	801a      	strh	r2, [r3, #0]
	*cell_ptr->reply_buffer = '\0';
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2200      	movs	r2, #0
 800084c:	711a      	strb	r2, [r3, #4]
    char send_buff[1024];
    uint8_t idx;
    if ( sprintf( send_buff, "%s\r", send ) < 0 ) // At in <CR><LR>
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	f107 0014 	add.w	r0, r7, #20
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4928      	ldr	r1, [pc, #160]	; (80008fc <transmit+0xd0>)
 800085a:	f003 fe99 	bl	8004590 <siprintf>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	da06      	bge.n	8000872 <transmit+0x46>
        {
        printf( "Failed to put into sprintf\n\r" );
 8000864:	4826      	ldr	r0, [pc, #152]	; (8000900 <transmit+0xd4>)
 8000866:	f003 fe05 	bl	8004474 <iprintf>
        return fona_def_timeout_ms_c;
 800086a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800086e:	b2db      	uxtb	r3, r3
 8000870:	e03e      	b.n	80008f0 <transmit+0xc4>
        } // end if
    
    flushInput( cell_ptr->uart_ptr );
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f8ba 	bl	80009f4 <flushInput>
    printf( "\t---> %s\n\r", send );
 8000880:	f107 0308 	add.w	r3, r7, #8
 8000884:	6819      	ldr	r1, [r3, #0]
 8000886:	481f      	ldr	r0, [pc, #124]	; (8000904 <transmit+0xd8>)
 8000888:	f003 fdf4 	bl	8004474 <iprintf>

    if ( HAL_UART_Transmit( cell_ptr->uart_ptr, ( uint8_t *) send_buff, strlen( send_buff ), timeout ) == HAL_OK )
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681c      	ldr	r4, [r3, #0]
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fcbb 	bl	8000214 <strlen>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	1dbb      	adds	r3, r7, #6
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	f107 0114 	add.w	r1, r7, #20
 80008aa:	4620      	mov	r0, r4
 80008ac:	f002 fe88 	bl	80035c0 <HAL_UART_Transmit>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d113      	bne.n	80008de <transmit+0xb2>
       {
       idx = readline( cell_ptr, timeout, false );
 80008b6:	1dbb      	adds	r3, r7, #6
 80008b8:	8819      	ldrh	r1, [r3, #0]
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	2200      	movs	r2, #0
 80008c0:	6818      	ldr	r0, [r3, #0]
 80008c2:	f000 f825 	bl	8000910 <readline>
 80008c6:	4603      	mov	r3, r0
 80008c8:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
       printf( "Got: %s\n\r", cell_ptr->reply_buffer );
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	3304      	adds	r3, #4
 80008d4:	4619      	mov	r1, r3
 80008d6:	480c      	ldr	r0, [pc, #48]	; (8000908 <transmit+0xdc>)
 80008d8:	f003 fdcc 	bl	8004474 <iprintf>
 80008dc:	e006      	b.n	80008ec <transmit+0xc0>
       } // end if
    else
       {
    	printf( "Failed Transmit\n\r" );
 80008de:	480b      	ldr	r0, [pc, #44]	; (800090c <transmit+0xe0>)
 80008e0:	f003 fdc8 	bl	8004474 <iprintf>
    	idx = reply_buff_size_c;
 80008e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e8:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
       } // end else

    return idx;
 80008ec:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
    } // transmit( )
 80008f0:	4618      	mov	r0, r3
 80008f2:	f207 471c 	addw	r7, r7, #1052	; 0x41c
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	bf00      	nop
 80008fc:	080058cc 	.word	0x080058cc
 8000900:	080058d0 	.word	0x080058d0
 8000904:	080058f0 	.word	0x080058f0
 8000908:	080058fc 	.word	0x080058fc
 800090c:	08005908 	.word	0x08005908

08000910 <readline>:
 * MODIFIES: Cellular_module_t::replay_buffer (where reply exists)
 *  EFFECTS: Receives characters from UARTS Rx pin (from the Nucleo board's perspective)
 *           up to the first \r\n and places it into the reply_buffer.
*/
uint8_t readline( Cellular_module_t * const cell_ptr, uint16_t timeout, bool multiline )
    {
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	; 0x30
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	807b      	strh	r3, [r7, #2]
 800091c:	4613      	mov	r3, r2
 800091e:	707b      	strb	r3, [r7, #1]
    static char receive_buff[ 1024 ];
    char * buff_ptr = receive_buff;
 8000920:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <readline+0xe0>)
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t bytes_recvd, replyidx, newlines_seen;
    bytes_recvd = replyidx = newlines_seen = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	837b      	strh	r3, [r7, #26]
 8000928:	8b7b      	ldrh	r3, [r7, #26]
 800092a:	853b      	strh	r3, [r7, #40]	; 0x28
 800092c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800092e:	857b      	strh	r3, [r7, #42]	; 0x2a
    const int iterations = multiline ? 2 : 1;
 8000930:	787b      	ldrb	r3, [r7, #1]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <readline+0x2a>
 8000936:	2302      	movs	r3, #2
 8000938:	e000      	b.n	800093c <readline+0x2c>
 800093a:	2301      	movs	r3, #1
 800093c:	617b      	str	r3, [r7, #20]

    // Multiline ensures that we check newline twice

    // Receive as much as possible
    while( HAL_UART_Receive( cell_ptr->uart_ptr, (uint8_t *)( buff_ptr++ ), 1, timeout ) == HAL_OK ) // Keep going
 800093e:	e002      	b.n	8000946 <readline+0x36>
        {
        ++bytes_recvd; // Count bytes received
 8000940:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000942:	3301      	adds	r3, #1
 8000944:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( HAL_UART_Receive( cell_ptr->uart_ptr, (uint8_t *)( buff_ptr++ ), 1, timeout ) == HAL_OK ) // Keep going
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6818      	ldr	r0, [r3, #0]
 800094a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800094c:	1c4b      	adds	r3, r1, #1
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000950:	887b      	ldrh	r3, [r7, #2]
 8000952:	2201      	movs	r2, #1
 8000954:	f002 fecb 	bl	80036ee <HAL_UART_Receive>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d0f0      	beq.n	8000940 <readline+0x30>
        } // end while
    for ( char const * ptr = receive_buff, *end_ptr = receive_buff + bytes_recvd; ptr != end_ptr; ++ptr )
 800095e:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <readline+0xe0>)
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
 8000962:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000964:	4a22      	ldr	r2, [pc, #136]	; (80009f0 <readline+0xe0>)
 8000966:	4413      	add	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	e007      	b.n	800097c <readline+0x6c>
    	print_char( *ptr );
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fe29 	bl	80005c8 <print_char>
    for ( char const * ptr = receive_buff, *end_ptr = receive_buff + bytes_recvd; ptr != end_ptr; ++ptr )
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	3301      	adds	r3, #1
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
 800097c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	429a      	cmp	r2, r3
 8000982:	d1f3      	bne.n	800096c <readline+0x5c>

    for ( int idx = 0, newlines_seen = 0; idx < bytes_recvd && newlines_seen < iterations; ++idx )
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
 800098c:	e01c      	b.n	80009c8 <readline+0xb8>
        {
    	const char c_in = receive_buff[ idx ];
 800098e:	4a18      	ldr	r2, [pc, #96]	; (80009f0 <readline+0xe0>)
 8000990:	6a3b      	ldr	r3, [r7, #32]
 8000992:	4413      	add	r3, r2
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	73fb      	strb	r3, [r7, #15]
        // Used to skip the first <CR><LR> in a response.
        if ( c_in != '\r' ) // Skip the carrage return character (This is present in responses).
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	2b0d      	cmp	r3, #13
 800099c:	d011      	beq.n	80009c2 <readline+0xb2>
            {
            if ( c_in == '\n' )  // Don't insert the <LR> into the return buffer.
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	2b0a      	cmp	r3, #10
 80009a2:	d106      	bne.n	80009b2 <readline+0xa2>
                {
                if ( replyidx ) // Used to skip first <LR> (and not count as seen)
 80009a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d00b      	beq.n	80009c2 <readline+0xb2>
                    ++newlines_seen;
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3301      	adds	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
 80009b0:	e007      	b.n	80009c2 <readline+0xb2>
                } // end if
            else
                {
                cell_ptr->reply_buffer[ replyidx++ ] = c_in;
 80009b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	853a      	strh	r2, [r7, #40]	; 0x28
 80009b8:	461a      	mov	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	7bfa      	ldrb	r2, [r7, #15]
 80009c0:	711a      	strb	r2, [r3, #4]
    for ( int idx = 0, newlines_seen = 0; idx < bytes_recvd && newlines_seen < iterations; ++idx )
 80009c2:	6a3b      	ldr	r3, [r7, #32]
 80009c4:	3301      	adds	r3, #1
 80009c6:	623b      	str	r3, [r7, #32]
 80009c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80009ca:	6a3a      	ldr	r2, [r7, #32]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	da03      	bge.n	80009d8 <readline+0xc8>
 80009d0:	69fa      	ldr	r2, [r7, #28]
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbda      	blt.n	800098e <readline+0x7e>
                } // end else
            } // end if
        } // end for

    cell_ptr->reply_buffer[ replyidx ] = '\0'; // Null-terminate
 80009d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	2200      	movs	r2, #0
 80009e0:	711a      	strb	r2, [r3, #4]
    return replyidx;
 80009e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80009e4:	b2db      	uxtb	r3, r3
    } // end readline( )
 80009e6:	4618      	mov	r0, r3
 80009e8:	3730      	adds	r7, #48	; 0x30
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000008c 	.word	0x2000008c

080009f4 <flushInput>:
//
//------------------------------------------------------------------------------------------------

// Clear everything W/O reading it in.
void flushInput( UART_HandleTypeDef * const uart_ptr )
    {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
    char c_in;
    printf( "Flushing Input\n\r" );
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <flushInput+0x38>)
 80009fe:	f003 fd39 	bl	8004474 <iprintf>
    while( HAL_UART_Receive( uart_ptr, (uint8_t *)&c_in, 1, 100 ) == HAL_OK )
 8000a02:	e003      	b.n	8000a0c <flushInput+0x18>
    	print_char( c_in );
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fdde 	bl	80005c8 <print_char>
    while( HAL_UART_Receive( uart_ptr, (uint8_t *)&c_in, 1, 100 ) == HAL_OK )
 8000a0c:	f107 010f 	add.w	r1, r7, #15
 8000a10:	2364      	movs	r3, #100	; 0x64
 8000a12:	2201      	movs	r2, #1
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f002 fe6a 	bl	80036ee <HAL_UART_Receive>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d0f1      	beq.n	8000a04 <flushInput+0x10>
    } // end flush_Input
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	0800591c 	.word	0x0800591c

08000a30 <power_on_cell>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void power_on_cell( )
    {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	printf( "Powering On Cell\n\r" );
 8000a34:	4808      	ldr	r0, [pc, #32]	; (8000a58 <power_on_cell+0x28>)
 8000a36:	f003 fd1d 	bl	8004474 <iprintf>
    GPIO_Write( &pwr_pin, GPIO_PIN_RESET );
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4807      	ldr	r0, [pc, #28]	; (8000a5c <power_on_cell+0x2c>)
 8000a3e:	f7ff fdf7 	bl	8000630 <GPIO_Write>
	HAL_Delay( 1100 ); // At least 1s
 8000a42:	f240 404c 	movw	r0, #1100	; 0x44c
 8000a46:	f000 fdf3 	bl	8001630 <HAL_Delay>
    GPIO_Write( &pwr_pin, GPIO_PIN_SET );
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4803      	ldr	r0, [pc, #12]	; (8000a5c <power_on_cell+0x2c>)
 8000a4e:	f7ff fdef 	bl	8000630 <GPIO_Write>
    } // end power_on( )
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	08005930 	.word	0x08005930
 8000a5c:	080059f0 	.word	0x080059f0

08000a60 <reset_cell>:

void reset_cell( )
   {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	printf( "Resetting Cell\n\r" );
 8000a64:	4807      	ldr	r0, [pc, #28]	; (8000a84 <reset_cell+0x24>)
 8000a66:	f003 fd05 	bl	8004474 <iprintf>
   GPIO_Write( &rst_pin, GPIO_PIN_RESET );
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4806      	ldr	r0, [pc, #24]	; (8000a88 <reset_cell+0x28>)
 8000a6e:	f7ff fddf 	bl	8000630 <GPIO_Write>
   HAL_Delay( 100 ); // At least 1s
 8000a72:	2064      	movs	r0, #100	; 0x64
 8000a74:	f000 fddc 	bl	8001630 <HAL_Delay>
   GPIO_Write( &rst_pin, GPIO_PIN_SET );
 8000a78:	2101      	movs	r1, #1
 8000a7a:	4803      	ldr	r0, [pc, #12]	; (8000a88 <reset_cell+0x28>)
 8000a7c:	f7ff fdd8 	bl	8000630 <GPIO_Write>
   } // reset_cell( )
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	08005944 	.word	0x08005944
 8000a88:	080059f8 	.word	0x080059f8

08000a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b0c2      	sub	sp, #264	; 0x108
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a92:	f000 fd58 	bl	8001546 <HAL_Init>

  /* USER CODE BEGIN Init */
  printf( "FONA basic test\n\r" );
 8000a96:	481a      	ldr	r0, [pc, #104]	; (8000b00 <main+0x74>)
 8000a98:	f003 fcec 	bl	8004474 <iprintf>
  printf( "Initializing....(May take several seconds)\n\r");
 8000a9c:	4819      	ldr	r0, [pc, #100]	; (8000b04 <main+0x78>)
 8000a9e:	f003 fce9 	bl	8004474 <iprintf>


  cell.uart_ptr = &huart3;
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <main+0x7c>)
 8000aa6:	601a      	str	r2, [r3, #0]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa8:	f000 f836 	bl	8000b18 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aac:	f000 f918 	bl	8000ce0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000ab0:	f000 f878 	bl	8000ba4 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000ab4:	f000 f8c2 	bl	8000c3c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  power_on_cell( );
 8000ab8:	f7ff ffba 	bl	8000a30 <power_on_cell>
  reset_cell( );
 8000abc:	f7ff ffd0 	bl	8000a60 <reset_cell>
  if ( !begin( &cell ) )
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fdc6 	bl	8000654 <begin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	f083 0301 	eor.w	r3, r3, #1
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d004      	beq.n	8000ade <main+0x52>
     {
	 printf( "Failed initialization\n\r" );
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <main+0x80>)
 8000ad6:	f003 fccd 	bl	8004474 <iprintf>
	 return 1;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00a      	b.n	8000af4 <main+0x68>
     }
  else
     {
	 printf( "Found SIM7000 using hardware serial\n\r " );
 8000ade:	480c      	ldr	r0, [pc, #48]	; (8000b10 <main+0x84>)
 8000ae0:	f003 fcc8 	bl	8004474 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
   printf( "Looping weehee\n\r" );
 8000ae4:	480b      	ldr	r0, [pc, #44]	; (8000b14 <main+0x88>)
 8000ae6:	f003 fcc5 	bl	8004474 <iprintf>
   HAL_Delay( 1000 );
 8000aea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aee:	f000 fd9f 	bl	8001630 <HAL_Delay>
   printf( "Looping weehee\n\r" );
 8000af2:	e7f7      	b.n	8000ae4 <main+0x58>
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	08005958 	.word	0x08005958
 8000b04:	0800596c 	.word	0x0800596c
 8000b08:	20000498 	.word	0x20000498
 8000b0c:	0800599c 	.word	0x0800599c
 8000b10:	080059b4 	.word	0x080059b4
 8000b14:	080059dc 	.word	0x080059dc

08000b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b096      	sub	sp, #88	; 0x58
 8000b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	2244      	movs	r2, #68	; 0x44
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f003 fc9c 	bl	8004464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b3e:	f001 f84b 	bl	8001bd8 <HAL_PWREx_ControlVoltageScaling>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b48:	f000 fb24 	bl	8001194 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b50:	2301      	movs	r3, #1
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b58:	2360      	movs	r3, #96	; 0x60
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4618      	mov	r0, r3
 8000b66:	f001 f8eb 	bl	8001d40 <HAL_RCC_OscConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000b70:	f000 fb10 	bl	8001194 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b74:	230f      	movs	r3, #15
 8000b76:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 fcfd 	bl	800258c <HAL_RCC_ClockConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b98:	f000 fafc 	bl	8001194 <Error_Handler>
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	3758      	adds	r7, #88	; 0x58
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ba8:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000baa:	4a23      	ldr	r2, [pc, #140]	; (8000c38 <MX_LPUART1_UART_Init+0x94>)
 8000bac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000bec:	4811      	ldr	r0, [pc, #68]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bee:	f002 fc97 	bl	8003520 <HAL_UART_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bf8:	f000 facc 	bl	8001194 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000c00:	f003 fb3b 	bl	800427a <HAL_UARTEx_SetTxFifoThreshold>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c0a:	f000 fac3 	bl	8001194 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000c12:	f003 fb70 	bl	80042f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c1c:	f000 faba 	bl	8001194 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000c22:	f003 faf1 	bl	8004208 <HAL_UARTEx_DisableFifoMode>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c2c:	f000 fab2 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000528 	.word	0x20000528
 8000c38:	40008000 	.word	0x40008000

08000c3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c40:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <MX_USART3_UART_Init+0x9c>)
 8000c42:	4a26      	ldr	r2, [pc, #152]	; (8000cdc <MX_USART3_UART_Init+0xa0>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c46:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <MX_USART3_UART_Init+0x9c>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <MX_USART3_UART_Init+0x9c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <MX_USART3_UART_Init+0x9c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <MX_USART3_UART_Init+0x9c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <MX_USART3_UART_Init+0x9c>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <MX_USART3_UART_Init+0x9c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_USART3_UART_Init+0x9c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_USART3_UART_Init+0x9c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <MX_USART3_UART_Init+0x9c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_USART3_UART_Init+0x9c>)
 8000c80:	2210      	movs	r2, #16
 8000c82:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_USART3_UART_Init+0x9c>)
 8000c86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c8c:	4812      	ldr	r0, [pc, #72]	; (8000cd8 <MX_USART3_UART_Init+0x9c>)
 8000c8e:	f002 fc47 	bl	8003520 <HAL_UART_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_USART3_UART_Init+0x60>
  {
    Error_Handler();
 8000c98:	f000 fa7c 	bl	8001194 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_7_8) != HAL_OK)
 8000c9c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <MX_USART3_UART_Init+0x9c>)
 8000ca2:	f003 faea 	bl	800427a <HAL_UARTEx_SetTxFifoThreshold>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_USART3_UART_Init+0x74>
  {
    Error_Handler();
 8000cac:	f000 fa72 	bl	8001194 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_7_8) != HAL_OK)
 8000cb0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000cb4:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <MX_USART3_UART_Init+0x9c>)
 8000cb6:	f003 fb1e 	bl	80042f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_USART3_UART_Init+0x88>
  {
    Error_Handler();
 8000cc0:	f000 fa68 	bl	8001194 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_USART3_UART_Init+0x9c>)
 8000cc6:	f003 fa64 	bl	8004192 <HAL_UARTEx_EnableFifoMode>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_USART3_UART_Init+0x98>
  {
    Error_Handler();
 8000cd0:	f000 fa60 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000498 	.word	0x20000498
 8000cdc:	40004800 	.word	0x40004800

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	; 0x38
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cf6:	4bb3      	ldr	r3, [pc, #716]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4ab2      	ldr	r2, [pc, #712]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000cfc:	f043 0310 	orr.w	r3, r3, #16
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4bb0      	ldr	r3, [pc, #704]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0310 	and.w	r3, r3, #16
 8000d0a:	623b      	str	r3, [r7, #32]
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4bad      	ldr	r3, [pc, #692]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4aac      	ldr	r2, [pc, #688]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4baa      	ldr	r3, [pc, #680]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	61fb      	str	r3, [r7, #28]
 8000d24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d26:	4ba7      	ldr	r3, [pc, #668]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	4aa6      	ldr	r2, [pc, #664]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d2c:	f043 0320 	orr.w	r3, r3, #32
 8000d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d32:	4ba4      	ldr	r3, [pc, #656]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	f003 0320 	and.w	r3, r3, #32
 8000d3a:	61bb      	str	r3, [r7, #24]
 8000d3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3e:	4ba1      	ldr	r3, [pc, #644]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4aa0      	ldr	r2, [pc, #640]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b9e      	ldr	r3, [pc, #632]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b9b      	ldr	r3, [pc, #620]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4a9a      	ldr	r2, [pc, #616]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4b98      	ldr	r3, [pc, #608]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b95      	ldr	r3, [pc, #596]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	4a94      	ldr	r2, [pc, #592]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7a:	4b92      	ldr	r3, [pc, #584]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d86:	4b8f      	ldr	r3, [pc, #572]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4a8e      	ldr	r2, [pc, #568]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4b8c      	ldr	r3, [pc, #560]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d9e:	4b89      	ldr	r3, [pc, #548]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4a88      	ldr	r2, [pc, #544]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4b86      	ldr	r3, [pc, #536]	; (8000fc4 <MX_GPIO_Init+0x2e4>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000db6:	f000 ffb3 	bl	8001d20 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc0:	4881      	ldr	r0, [pc, #516]	; (8000fc8 <MX_GPIO_Init+0x2e8>)
 8000dc2:	f000 fed1 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dcc:	487f      	ldr	r0, [pc, #508]	; (8000fcc <MX_GPIO_Init+0x2ec>)
 8000dce:	f000 fecb 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dd2:	230c      	movs	r3, #12
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000de2:	230d      	movs	r3, #13
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	4619      	mov	r1, r3
 8000dec:	4877      	ldr	r0, [pc, #476]	; (8000fcc <MX_GPIO_Init+0x2ec>)
 8000dee:	f000 fd29 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000df2:	2307      	movs	r3, #7
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df6:	2312      	movs	r3, #18
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e02:	2304      	movs	r3, #4
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	486e      	ldr	r0, [pc, #440]	; (8000fc8 <MX_GPIO_Init+0x2e8>)
 8000e0e:	f000 fd19 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000e22:	230d      	movs	r3, #13
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4866      	ldr	r0, [pc, #408]	; (8000fc8 <MX_GPIO_Init+0x2e8>)
 8000e2e:	f000 fd09 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e32:	231f      	movs	r3, #31
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e36:	230b      	movs	r3, #11
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	4862      	ldr	r0, [pc, #392]	; (8000fd0 <MX_GPIO_Init+0x2f0>)
 8000e46:	f000 fcfd 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f000 fcec 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000e6c:	230a      	movs	r3, #10
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e70:	230b      	movs	r3, #11
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e82:	f000 fcdf 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e86:	23f0      	movs	r3, #240	; 0xf0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e96:	2305      	movs	r3, #5
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea4:	f000 fcce 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4844      	ldr	r0, [pc, #272]	; (8000fd4 <MX_GPIO_Init+0x2f4>)
 8000ec4:	f000 fcbe 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ecc:	230b      	movs	r3, #11
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	483e      	ldr	r0, [pc, #248]	; (8000fd4 <MX_GPIO_Init+0x2f4>)
 8000edc:	f000 fcb2 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000ee0:	2344      	movs	r3, #68	; 0x44
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4838      	ldr	r0, [pc, #224]	; (8000fd4 <MX_GPIO_Init+0x2f4>)
 8000ef4:	f000 fca6 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ef8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0e:	4619      	mov	r1, r3
 8000f10:	482d      	ldr	r0, [pc, #180]	; (8000fc8 <MX_GPIO_Init+0x2e8>)
 8000f12:	f000 fc97 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 PE11
                           PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
 8000f16:	f44f 5376 	mov.w	r3, #15744	; 0x3d80
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	4619      	mov	r1, r3
 8000f32:	4826      	ldr	r0, [pc, #152]	; (8000fcc <MX_GPIO_Init+0x2ec>)
 8000f34:	f000 fc86 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481e      	ldr	r0, [pc, #120]	; (8000fcc <MX_GPIO_Init+0x2ec>)
 8000f52:	f000 fc77 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f56:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	4816      	ldr	r0, [pc, #88]	; (8000fcc <MX_GPIO_Init+0x2ec>)
 8000f74:	f000 fc66 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000f78:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000f8a:	230d      	movs	r3, #13
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f92:	4619      	mov	r1, r3
 8000f94:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <MX_GPIO_Init+0x2f4>)
 8000f96:	f000 fc55 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000fac:	230e      	movs	r3, #14
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <MX_GPIO_Init+0x2f4>)
 8000fb8:	f000 fc44 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fbc:	2340      	movs	r3, #64	; 0x40
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	e009      	b.n	8000fd8 <MX_GPIO_Init+0x2f8>
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48001400 	.word	0x48001400
 8000fcc:	48001000 	.word	0x48001000
 8000fd0:	48000800 	.word	0x48000800
 8000fd4:	48000400 	.word	0x48000400
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000fe2:	230d      	movs	r3, #13
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fea:	4619      	mov	r1, r3
 8000fec:	485c      	ldr	r0, [pc, #368]	; (8001160 <MX_GPIO_Init+0x480>)
 8000fee:	f000 fc29 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ff2:	2380      	movs	r3, #128	; 0x80
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001002:	2302      	movs	r3, #2
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100a:	4619      	mov	r1, r3
 800100c:	4854      	ldr	r0, [pc, #336]	; (8001160 <MX_GPIO_Init+0x480>)
 800100e:	f000 fc19 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
 8001012:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001024:	230c      	movs	r3, #12
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102c:	4619      	mov	r1, r3
 800102e:	484c      	ldr	r0, [pc, #304]	; (8001160 <MX_GPIO_Init+0x480>)
 8001030:	f000 fc08 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001034:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001046:	230a      	movs	r3, #10
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001054:	f000 fbf6 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f000 fbe8 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001074:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001086:	2308      	movs	r3, #8
 8001088:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	4619      	mov	r1, r3
 8001090:	4833      	ldr	r0, [pc, #204]	; (8001160 <MX_GPIO_Init+0x480>)
 8001092:	f000 fbd7 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001096:	2301      	movs	r3, #1
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010a6:	2309      	movs	r3, #9
 80010a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ae:	4619      	mov	r1, r3
 80010b0:	482c      	ldr	r0, [pc, #176]	; (8001164 <MX_GPIO_Init+0x484>)
 80010b2:	f000 fbc7 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010b6:	2304      	movs	r3, #4
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010c6:	230c      	movs	r3, #12
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ce:	4619      	mov	r1, r3
 80010d0:	4824      	ldr	r0, [pc, #144]	; (8001164 <MX_GPIO_Init+0x484>)
 80010d2:	f000 fbb7 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80010d6:	2378      	movs	r3, #120	; 0x78
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010e6:	2307      	movs	r3, #7
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ee:	4619      	mov	r1, r3
 80010f0:	481c      	ldr	r0, [pc, #112]	; (8001164 <MX_GPIO_Init+0x484>)
 80010f2:	f000 fba7 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80010f6:	2338      	movs	r3, #56	; 0x38
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001106:	2306      	movs	r3, #6
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110e:	4619      	mov	r1, r3
 8001110:	4815      	ldr	r0, [pc, #84]	; (8001168 <MX_GPIO_Init+0x488>)
 8001112:	f000 fb97 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001116:	f44f 7340 	mov.w	r3, #768	; 0x300
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111c:	2312      	movs	r3, #18
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001128:	2304      	movs	r3, #4
 800112a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001130:	4619      	mov	r1, r3
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_GPIO_Init+0x488>)
 8001134:	f000 fb86 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001138:	2301      	movs	r3, #1
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001148:	2302      	movs	r3, #2
 800114a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800114c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <MX_GPIO_Init+0x48c>)
 8001154:	f000 fb76 	bl	8001844 <HAL_GPIO_Init>

}
 8001158:	bf00      	nop
 800115a:	3738      	adds	r7, #56	; 0x38
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	48000800 	.word	0x48000800
 8001164:	48000c00 	.word	0x48000c00
 8001168:	48000400 	.word	0x48000400
 800116c:	48001000 	.word	0x48001000

08001170 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001178:	1d39      	adds	r1, r7, #4
 800117a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117e:	2201      	movs	r2, #1
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <__io_putchar+0x20>)
 8001182:	f002 fa1d 	bl	80035c0 <HAL_UART_Transmit>
	return ch;
 8001186:	687b      	ldr	r3, [r7, #4]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000528 	.word	0x20000528

08001194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
}
 800119a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119c:	e7fe      	b.n	800119c <Error_Handler+0x8>
	...

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_MspInit+0x44>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011aa:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <HAL_MspInit+0x44>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6613      	str	r3, [r2, #96]	; 0x60
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <HAL_MspInit+0x44>)
 80011b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_MspInit+0x44>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c2:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <HAL_MspInit+0x44>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_MspInit+0x44>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000

080011e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b0b0      	sub	sp, #192	; 0xc0
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	2294      	movs	r2, #148	; 0x94
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f003 f92b 	bl	8004464 <memset>
  if(huart->Instance==LPUART1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a43      	ldr	r2, [pc, #268]	; (8001320 <HAL_UART_MspInit+0x138>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d13e      	bne.n	8001296 <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001218:	2320      	movs	r3, #32
 800121a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800121c:	2300      	movs	r3, #0
 800121e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	4618      	mov	r0, r3
 8001226:	f001 fc63 	bl	8002af0 <HAL_RCCEx_PeriphCLKConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001230:	f7ff ffb0 	bl	8001194 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001234:	4b3b      	ldr	r3, [pc, #236]	; (8001324 <HAL_UART_MspInit+0x13c>)
 8001236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001238:	4a3a      	ldr	r2, [pc, #232]	; (8001324 <HAL_UART_MspInit+0x13c>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001240:	4b38      	ldr	r3, [pc, #224]	; (8001324 <HAL_UART_MspInit+0x13c>)
 8001242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800124c:	4b35      	ldr	r3, [pc, #212]	; (8001324 <HAL_UART_MspInit+0x13c>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	4a34      	ldr	r2, [pc, #208]	; (8001324 <HAL_UART_MspInit+0x13c>)
 8001252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001256:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001258:	4b32      	ldr	r3, [pc, #200]	; (8001324 <HAL_UART_MspInit+0x13c>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001264:	f000 fd5c 	bl	8001d20 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001268:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800126c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001282:	2308      	movs	r3, #8
 8001284:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001288:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800128c:	4619      	mov	r1, r3
 800128e:	4826      	ldr	r0, [pc, #152]	; (8001328 <HAL_UART_MspInit+0x140>)
 8001290:	f000 fad8 	bl	8001844 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001294:	e040      	b.n	8001318 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a24      	ldr	r2, [pc, #144]	; (800132c <HAL_UART_MspInit+0x144>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d13b      	bne.n	8001318 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012a0:	2304      	movs	r3, #4
 80012a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a8:	f107 0318 	add.w	r3, r7, #24
 80012ac:	4618      	mov	r0, r3
 80012ae:	f001 fc1f 	bl	8002af0 <HAL_RCCEx_PeriphCLKConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80012b8:	f7ff ff6c 	bl	8001194 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <HAL_UART_MspInit+0x13c>)
 80012be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c0:	4a18      	ldr	r2, [pc, #96]	; (8001324 <HAL_UART_MspInit+0x13c>)
 80012c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c6:	6593      	str	r3, [r2, #88]	; 0x58
 80012c8:	4b16      	ldr	r3, [pc, #88]	; (8001324 <HAL_UART_MspInit+0x13c>)
 80012ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_UART_MspInit+0x13c>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	4a12      	ldr	r2, [pc, #72]	; (8001324 <HAL_UART_MspInit+0x13c>)
 80012da:	f043 0308 	orr.w	r3, r3, #8
 80012de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_UART_MspInit+0x13c>)
 80012e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001306:	2307      	movs	r3, #7
 8001308:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001310:	4619      	mov	r1, r3
 8001312:	4807      	ldr	r0, [pc, #28]	; (8001330 <HAL_UART_MspInit+0x148>)
 8001314:	f000 fa96 	bl	8001844 <HAL_GPIO_Init>
}
 8001318:	bf00      	nop
 800131a:	37c0      	adds	r7, #192	; 0xc0
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40008000 	.word	0x40008000
 8001324:	40021000 	.word	0x40021000
 8001328:	48001800 	.word	0x48001800
 800132c:	40004800 	.word	0x40004800
 8001330:	48000c00 	.word	0x48000c00

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <NMI_Handler+0x4>

0800133a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <HardFault_Handler+0x4>

08001340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <MemManage_Handler+0x4>

08001346 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <BusFault_Handler+0x4>

0800134c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <UsageFault_Handler+0x4>

08001352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001380:	f000 f936 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}

08001388 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	e00a      	b.n	80013b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800139a:	f3af 8000 	nop.w
 800139e:	4601      	mov	r1, r0
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	60ba      	str	r2, [r7, #8]
 80013a6:	b2ca      	uxtb	r2, r1
 80013a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	dbf0      	blt.n	800139a <_read+0x12>
	}

return len;
 80013b8:	687b      	ldr	r3, [r7, #4]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	e009      	b.n	80013e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	60ba      	str	r2, [r7, #8]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fec7 	bl	8001170 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3301      	adds	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbf1      	blt.n	80013d4 <_write+0x12>
	}
	return len;
 80013f0:	687b      	ldr	r3, [r7, #4]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_close>:

int _close(int file)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	return -1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001422:	605a      	str	r2, [r3, #4]
	return 0;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_isatty>:

int _isatty(int file)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
	return 1;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
	return 0;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800146c:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <_sbrk+0x5c>)
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <_sbrk+0x60>)
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <_sbrk+0x64>)
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <_sbrk+0x68>)
 8001484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	429a      	cmp	r2, r3
 8001492:	d207      	bcs.n	80014a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001494:	f002 ffbc 	bl	8004410 <__errno>
 8001498:	4603      	mov	r3, r0
 800149a:	220c      	movs	r2, #12
 800149c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014a2:	e009      	b.n	80014b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <_sbrk+0x64>)
 80014b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b6:	68fb      	ldr	r3, [r7, #12]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200a0000 	.word	0x200a0000
 80014c4:	00000400 	.word	0x00000400
 80014c8:	2000048c 	.word	0x2000048c
 80014cc:	200005d0 	.word	0x200005d0

080014d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <SystemInit+0x20>)
 80014d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <SystemInit+0x20>)
 80014dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800152c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014f8:	f7ff ffea 	bl	80014d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <LoopForever+0x6>)
  ldr r1, =_edata
 80014fe:	490d      	ldr	r1, [pc, #52]	; (8001534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <LoopForever+0xe>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001514:	4c0a      	ldr	r4, [pc, #40]	; (8001540 <LoopForever+0x16>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001522:	f002 ff7b 	bl	800441c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001526:	f7ff fab1 	bl	8000a8c <main>

0800152a <LoopForever>:

LoopForever:
    b LoopForever
 800152a:	e7fe      	b.n	800152a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800152c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001538:	08005b18 	.word	0x08005b18
  ldr r2, =_sbss
 800153c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001540:	200005cc 	.word	0x200005cc

08001544 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC1_IRQHandler>

08001546 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f943 	bl	80017dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f80e 	bl	8001578 <HAL_InitTick>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d002      	beq.n	8001568 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	e001      	b.n	800156c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001568:	f7ff fe1a 	bl	80011a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800156c:	79fb      	ldrb	r3, [r7, #7]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HAL_InitTick+0x6c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d023      	beq.n	80015d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_InitTick+0x70>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <HAL_InitTick+0x6c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159a:	fbb3 f3f1 	udiv	r3, r3, r1
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f941 	bl	800182a <HAL_SYSTICK_Config>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10f      	bne.n	80015ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d809      	bhi.n	80015c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015bc:	f000 f919 	bl	80017f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015c0:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <HAL_InitTick+0x74>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e007      	b.n	80015d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e004      	b.n	80015d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	e001      	b.n	80015d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000008 	.word	0x20000008
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000004 	.word	0x20000004

080015f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000008 	.word	0x20000008
 8001614:	200005b8 	.word	0x200005b8

08001618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	200005b8 	.word	0x200005b8

08001630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff ffee 	bl	8001618 <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001648:	d005      	beq.n	8001656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_Delay+0x44>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001656:	bf00      	nop
 8001658:	f7ff ffde 	bl	8001618 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	d8f7      	bhi.n	8001658 <HAL_Delay+0x28>
  {
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <__NVIC_SetPriority+0x50>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
         );
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a8:	d301      	bcc.n	80017ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00f      	b.n	80017ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <SysTick_Config+0x40>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b6:	210f      	movs	r1, #15
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017bc:	f7ff ff8e 	bl	80016dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <SysTick_Config+0x40>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SysTick_Config+0x40>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	e000e010 	.word	0xe000e010

080017dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ff47 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001804:	f7ff ff5c 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 8001808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	6978      	ldr	r0, [r7, #20]
 8001810:	f7ff ff8e 	bl	8001730 <NVIC_EncodePriority>
 8001814:	4602      	mov	r2, r0
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff5d 	bl	80016dc <__NVIC_SetPriority>
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffb0 	bl	8001798 <SysTick_Config>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001852:	e166      	b.n	8001b22 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2101      	movs	r1, #1
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 8158 	beq.w	8001b1c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d005      	beq.n	8001884 <HAL_GPIO_Init+0x40>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d130      	bne.n	80018e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ba:	2201      	movs	r2, #1
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	091b      	lsrs	r3, r3, #4
 80018d0:	f003 0201 	and.w	r2, r3, #1
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d017      	beq.n	8001922 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2203      	movs	r2, #3
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d123      	bne.n	8001976 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	08da      	lsrs	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3208      	adds	r2, #8
 8001936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	220f      	movs	r2, #15
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	08da      	lsrs	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3208      	adds	r2, #8
 8001970:	6939      	ldr	r1, [r7, #16]
 8001972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	2203      	movs	r2, #3
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0203 	and.w	r2, r3, #3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80b2 	beq.w	8001b1c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b8:	4b61      	ldr	r3, [pc, #388]	; (8001b40 <HAL_GPIO_Init+0x2fc>)
 80019ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019bc:	4a60      	ldr	r2, [pc, #384]	; (8001b40 <HAL_GPIO_Init+0x2fc>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6613      	str	r3, [r2, #96]	; 0x60
 80019c4:	4b5e      	ldr	r3, [pc, #376]	; (8001b40 <HAL_GPIO_Init+0x2fc>)
 80019c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019d0:	4a5c      	ldr	r2, [pc, #368]	; (8001b44 <HAL_GPIO_Init+0x300>)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019fa:	d02b      	beq.n	8001a54 <HAL_GPIO_Init+0x210>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a52      	ldr	r2, [pc, #328]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d025      	beq.n	8001a50 <HAL_GPIO_Init+0x20c>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a51      	ldr	r2, [pc, #324]	; (8001b4c <HAL_GPIO_Init+0x308>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d01f      	beq.n	8001a4c <HAL_GPIO_Init+0x208>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a50      	ldr	r2, [pc, #320]	; (8001b50 <HAL_GPIO_Init+0x30c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d019      	beq.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a4f      	ldr	r2, [pc, #316]	; (8001b54 <HAL_GPIO_Init+0x310>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d013      	beq.n	8001a44 <HAL_GPIO_Init+0x200>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a4e      	ldr	r2, [pc, #312]	; (8001b58 <HAL_GPIO_Init+0x314>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d00d      	beq.n	8001a40 <HAL_GPIO_Init+0x1fc>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a4d      	ldr	r2, [pc, #308]	; (8001b5c <HAL_GPIO_Init+0x318>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d007      	beq.n	8001a3c <HAL_GPIO_Init+0x1f8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a4c      	ldr	r2, [pc, #304]	; (8001b60 <HAL_GPIO_Init+0x31c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d101      	bne.n	8001a38 <HAL_GPIO_Init+0x1f4>
 8001a34:	2307      	movs	r3, #7
 8001a36:	e00e      	b.n	8001a56 <HAL_GPIO_Init+0x212>
 8001a38:	2308      	movs	r3, #8
 8001a3a:	e00c      	b.n	8001a56 <HAL_GPIO_Init+0x212>
 8001a3c:	2306      	movs	r3, #6
 8001a3e:	e00a      	b.n	8001a56 <HAL_GPIO_Init+0x212>
 8001a40:	2305      	movs	r3, #5
 8001a42:	e008      	b.n	8001a56 <HAL_GPIO_Init+0x212>
 8001a44:	2304      	movs	r3, #4
 8001a46:	e006      	b.n	8001a56 <HAL_GPIO_Init+0x212>
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e004      	b.n	8001a56 <HAL_GPIO_Init+0x212>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e002      	b.n	8001a56 <HAL_GPIO_Init+0x212>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_GPIO_Init+0x212>
 8001a54:	2300      	movs	r3, #0
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	f002 0203 	and.w	r2, r2, #3
 8001a5c:	0092      	lsls	r2, r2, #2
 8001a5e:	4093      	lsls	r3, r2
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a66:	4937      	ldr	r1, [pc, #220]	; (8001b44 <HAL_GPIO_Init+0x300>)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a74:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_GPIO_Init+0x320>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a98:	4a32      	ldr	r2, [pc, #200]	; (8001b64 <HAL_GPIO_Init+0x320>)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_GPIO_Init+0x320>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ac2:	4a28      	ldr	r2, [pc, #160]	; (8001b64 <HAL_GPIO_Init+0x320>)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ac8:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <HAL_GPIO_Init+0x320>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aec:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <HAL_GPIO_Init+0x320>)
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001af2:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <HAL_GPIO_Init+0x320>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b16:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <HAL_GPIO_Init+0x320>)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f47f ae91 	bne.w	8001854 <HAL_GPIO_Init+0x10>
  }
}
 8001b32:	bf00      	nop
 8001b34:	bf00      	nop
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010000 	.word	0x40010000
 8001b48:	48000400 	.word	0x48000400
 8001b4c:	48000800 	.word	0x48000800
 8001b50:	48000c00 	.word	0x48000c00
 8001b54:	48001000 	.word	0x48001000
 8001b58:	48001400 	.word	0x48001400
 8001b5c:	48001800 	.word	0x48001800
 8001b60:	48001c00 	.word	0x48001c00
 8001b64:	40010400 	.word	0x40010400

08001b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba8:	d102      	bne.n	8001bb0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bae:	e00b      	b.n	8001bc8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bbe:	d102      	bne.n	8001bc6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bc4:	e000      	b.n	8001bc8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001bc6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40007000 	.word	0x40007000

08001bd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d141      	bne.n	8001c6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001be6:	4b4b      	ldr	r3, [pc, #300]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf2:	d131      	bne.n	8001c58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf4:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bfa:	4a46      	ldr	r2, [pc, #280]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c04:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c0c:	4a41      	ldr	r2, [pc, #260]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001c14:	4b40      	ldr	r3, [pc, #256]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2232      	movs	r2, #50	; 0x32
 8001c1a:	fb02 f303 	mul.w	r3, r2, r3
 8001c1e:	4a3f      	ldr	r2, [pc, #252]	; (8001d1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c20:	fba2 2303 	umull	r2, r3, r2, r3
 8001c24:	0c9b      	lsrs	r3, r3, #18
 8001c26:	3301      	adds	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c2a:	e002      	b.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c3e:	d102      	bne.n	8001c46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f2      	bne.n	8001c2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c46:	4b33      	ldr	r3, [pc, #204]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c52:	d158      	bne.n	8001d06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e057      	b.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c58:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c5e:	4a2d      	ldr	r2, [pc, #180]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c68:	e04d      	b.n	8001d06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c70:	d141      	bne.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c7e:	d131      	bne.n	8001ce4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c80:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c86:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c90:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c98:	4a1e      	ldr	r2, [pc, #120]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2232      	movs	r2, #50	; 0x32
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	0c9b      	lsrs	r3, r3, #18
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cb6:	e002      	b.n	8001cbe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cca:	d102      	bne.n	8001cd2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f2      	bne.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cde:	d112      	bne.n	8001d06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e011      	b.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001cf4:	e007      	b.n	8001d06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d04:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	40007000 	.word	0x40007000
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	431bde83 	.word	0x431bde83

08001d20 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d2e:	6053      	str	r3, [r2, #4]
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40007000 	.word	0x40007000

08001d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d102      	bne.n	8001d54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f000 bc16 	b.w	8002580 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d54:	4ba0      	ldr	r3, [pc, #640]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d5e:	4b9e      	ldr	r3, [pc, #632]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80e4 	beq.w	8001f3e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <HAL_RCC_OscConfig+0x4c>
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	f040 808b 	bne.w	8001e9a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	f040 8087 	bne.w	8001e9a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d8c:	4b92      	ldr	r3, [pc, #584]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_OscConfig+0x64>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e3ed      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1a      	ldr	r2, [r3, #32]
 8001da8:	4b8b      	ldr	r3, [pc, #556]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d004      	beq.n	8001dbe <HAL_RCC_OscConfig+0x7e>
 8001db4:	4b88      	ldr	r3, [pc, #544]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dbc:	e005      	b.n	8001dca <HAL_RCC_OscConfig+0x8a>
 8001dbe:	4b86      	ldr	r3, [pc, #536]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d223      	bcs.n	8001e16 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 fdca 	bl	800296c <RCC_SetFlashLatencyFromMSIRange>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e3ce      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de2:	4b7d      	ldr	r3, [pc, #500]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a7c      	ldr	r2, [pc, #496]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001de8:	f043 0308 	orr.w	r3, r3, #8
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b7a      	ldr	r3, [pc, #488]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	4977      	ldr	r1, [pc, #476]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e00:	4b75      	ldr	r3, [pc, #468]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	4972      	ldr	r1, [pc, #456]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
 8001e14:	e025      	b.n	8001e62 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e16:	4b70      	ldr	r3, [pc, #448]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a6f      	ldr	r2, [pc, #444]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e1c:	f043 0308 	orr.w	r3, r3, #8
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	4b6d      	ldr	r3, [pc, #436]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	496a      	ldr	r1, [pc, #424]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e34:	4b68      	ldr	r3, [pc, #416]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	4965      	ldr	r1, [pc, #404]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fd8a 	bl	800296c <RCC_SetFlashLatencyFromMSIRange>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e38e      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e62:	f000 fcbf 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 8001e66:	4602      	mov	r2, r0
 8001e68:	4b5b      	ldr	r3, [pc, #364]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	495a      	ldr	r1, [pc, #360]	; (8001fdc <HAL_RCC_OscConfig+0x29c>)
 8001e74:	5ccb      	ldrb	r3, [r1, r3]
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7e:	4a58      	ldr	r2, [pc, #352]	; (8001fe0 <HAL_RCC_OscConfig+0x2a0>)
 8001e80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e82:	4b58      	ldr	r3, [pc, #352]	; (8001fe4 <HAL_RCC_OscConfig+0x2a4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fb76 	bl	8001578 <HAL_InitTick>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d052      	beq.n	8001f3c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	e372      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d032      	beq.n	8001f08 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ea2:	4b4d      	ldr	r3, [pc, #308]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a4c      	ldr	r2, [pc, #304]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eae:	f7ff fbb3 	bl	8001618 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eb6:	f7ff fbaf 	bl	8001618 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e35b      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ec8:	4b43      	ldr	r3, [pc, #268]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed4:	4b40      	ldr	r3, [pc, #256]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a3f      	ldr	r2, [pc, #252]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001eda:	f043 0308 	orr.w	r3, r3, #8
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	493a      	ldr	r1, [pc, #232]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef2:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	4935      	ldr	r1, [pc, #212]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	604b      	str	r3, [r1, #4]
 8001f06:	e01a      	b.n	8001f3e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f08:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a32      	ldr	r2, [pc, #200]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f0e:	f023 0301 	bic.w	r3, r3, #1
 8001f12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f14:	f7ff fb80 	bl	8001618 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f1c:	f7ff fb7c 	bl	8001618 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e328      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f2e:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x1dc>
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d073      	beq.n	8002032 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_OscConfig+0x21c>
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d10e      	bne.n	8001f74 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d10b      	bne.n	8001f74 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d063      	beq.n	8002030 <HAL_RCC_OscConfig+0x2f0>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d15f      	bne.n	8002030 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e305      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7c:	d106      	bne.n	8001f8c <HAL_RCC_OscConfig+0x24c>
 8001f7e:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e01d      	b.n	8001fc8 <HAL_RCC_OscConfig+0x288>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x270>
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a0f      	ldr	r2, [pc, #60]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0x288>
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <HAL_RCC_OscConfig+0x298>)
 8001fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01b      	beq.n	8002008 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7ff fb22 	bl	8001618 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd6:	e010      	b.n	8001ffa <HAL_RCC_OscConfig+0x2ba>
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	08005a00 	.word	0x08005a00
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff fb16 	bl	8001618 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e2c2      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ffa:	4baf      	ldr	r3, [pc, #700]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x2a8>
 8002006:	e014      	b.n	8002032 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7ff fb06 	bl	8001618 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002010:	f7ff fb02 	bl	8001618 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e2ae      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002022:	4ba5      	ldr	r3, [pc, #660]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x2d0>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d060      	beq.n	8002100 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	2b04      	cmp	r3, #4
 8002042:	d005      	beq.n	8002050 <HAL_RCC_OscConfig+0x310>
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2b0c      	cmp	r3, #12
 8002048:	d119      	bne.n	800207e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d116      	bne.n	800207e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002050:	4b99      	ldr	r3, [pc, #612]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_OscConfig+0x328>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e28b      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002068:	4b93      	ldr	r3, [pc, #588]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	061b      	lsls	r3, r3, #24
 8002076:	4990      	ldr	r1, [pc, #576]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800207c:	e040      	b.n	8002100 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d023      	beq.n	80020ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002086:	4b8c      	ldr	r3, [pc, #560]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a8b      	ldr	r2, [pc, #556]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800208c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7ff fac1 	bl	8001618 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209a:	f7ff fabd 	bl	8001618 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e269      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ac:	4b82      	ldr	r3, [pc, #520]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b8:	4b7f      	ldr	r3, [pc, #508]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	061b      	lsls	r3, r3, #24
 80020c6:	497c      	ldr	r1, [pc, #496]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
 80020cc:	e018      	b.n	8002100 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ce:	4b7a      	ldr	r3, [pc, #488]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a79      	ldr	r2, [pc, #484]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80020d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7ff fa9d 	bl	8001618 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e2:	f7ff fa99 	bl	8001618 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e245      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020f4:	4b70      	ldr	r3, [pc, #448]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f0      	bne.n	80020e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d03c      	beq.n	8002186 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01c      	beq.n	800214e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002114:	4b68      	ldr	r3, [pc, #416]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211a:	4a67      	ldr	r2, [pc, #412]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7ff fa78 	bl	8001618 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212c:	f7ff fa74 	bl	8001618 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e220      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800213e:	4b5e      	ldr	r3, [pc, #376]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ef      	beq.n	800212c <HAL_RCC_OscConfig+0x3ec>
 800214c:	e01b      	b.n	8002186 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800214e:	4b5a      	ldr	r3, [pc, #360]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002154:	4a58      	ldr	r2, [pc, #352]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215e:	f7ff fa5b 	bl	8001618 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002166:	f7ff fa57 	bl	8001618 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e203      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002178:	4b4f      	ldr	r3, [pc, #316]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800217a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1ef      	bne.n	8002166 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80a6 	beq.w	80022e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002194:	2300      	movs	r3, #0
 8002196:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002198:	4b47      	ldr	r3, [pc, #284]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10d      	bne.n	80021c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a4:	4b44      	ldr	r3, [pc, #272]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a8:	4a43      	ldr	r2, [pc, #268]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80021aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ae:	6593      	str	r3, [r2, #88]	; 0x58
 80021b0:	4b41      	ldr	r3, [pc, #260]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021bc:	2301      	movs	r3, #1
 80021be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c0:	4b3e      	ldr	r3, [pc, #248]	; (80022bc <HAL_RCC_OscConfig+0x57c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d118      	bne.n	80021fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021cc:	4b3b      	ldr	r3, [pc, #236]	; (80022bc <HAL_RCC_OscConfig+0x57c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a3a      	ldr	r2, [pc, #232]	; (80022bc <HAL_RCC_OscConfig+0x57c>)
 80021d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d8:	f7ff fa1e 	bl	8001618 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e0:	f7ff fa1a 	bl	8001618 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e1c6      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f2:	4b32      	ldr	r3, [pc, #200]	; (80022bc <HAL_RCC_OscConfig+0x57c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d108      	bne.n	8002218 <HAL_RCC_OscConfig+0x4d8>
 8002206:	4b2c      	ldr	r3, [pc, #176]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220c:	4a2a      	ldr	r2, [pc, #168]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002216:	e024      	b.n	8002262 <HAL_RCC_OscConfig+0x522>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b05      	cmp	r3, #5
 800221e:	d110      	bne.n	8002242 <HAL_RCC_OscConfig+0x502>
 8002220:	4b25      	ldr	r3, [pc, #148]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002226:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002230:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	4a20      	ldr	r2, [pc, #128]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002240:	e00f      	b.n	8002262 <HAL_RCC_OscConfig+0x522>
 8002242:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800224a:	f023 0301 	bic.w	r3, r3, #1
 800224e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002252:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 8002254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002258:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800225a:	f023 0304 	bic.w	r3, r3, #4
 800225e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d016      	beq.n	8002298 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226a:	f7ff f9d5 	bl	8001618 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7ff f9d1 	bl	8001618 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e17b      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_RCC_OscConfig+0x578>)
 800228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0ed      	beq.n	8002272 <HAL_RCC_OscConfig+0x532>
 8002296:	e01a      	b.n	80022ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002298:	f7ff f9be 	bl	8001618 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800229e:	e00f      	b.n	80022c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a0:	f7ff f9ba 	bl	8001618 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d906      	bls.n	80022c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e164      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022c0:	4ba8      	ldr	r3, [pc, #672]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1e8      	bne.n	80022a0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ce:	7ffb      	ldrb	r3, [r7, #31]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d105      	bne.n	80022e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d4:	4ba3      	ldr	r3, [pc, #652]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	4aa2      	ldr	r2, [pc, #648]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 80022da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0320 	and.w	r3, r3, #32
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d03c      	beq.n	8002366 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01c      	beq.n	800232e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022f4:	4b9b      	ldr	r3, [pc, #620]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 80022f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022fa:	4a9a      	ldr	r2, [pc, #616]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002304:	f7ff f988 	bl	8001618 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800230c:	f7ff f984 	bl	8001618 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e130      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800231e:	4b91      	ldr	r3, [pc, #580]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 8002320:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0ef      	beq.n	800230c <HAL_RCC_OscConfig+0x5cc>
 800232c:	e01b      	b.n	8002366 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800232e:	4b8d      	ldr	r3, [pc, #564]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 8002330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002334:	4a8b      	ldr	r2, [pc, #556]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 8002336:	f023 0301 	bic.w	r3, r3, #1
 800233a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233e:	f7ff f96b 	bl	8001618 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002346:	f7ff f967 	bl	8001618 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e113      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002358:	4b82      	ldr	r3, [pc, #520]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 800235a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1ef      	bne.n	8002346 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 8107 	beq.w	800257e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	2b02      	cmp	r3, #2
 8002376:	f040 80cb 	bne.w	8002510 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800237a:	4b7a      	ldr	r3, [pc, #488]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f003 0203 	and.w	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	429a      	cmp	r2, r3
 800238c:	d12c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	3b01      	subs	r3, #1
 800239a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d123      	bne.n	80023e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d11b      	bne.n	80023e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d113      	bne.n	80023e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ca:	085b      	lsrs	r3, r3, #1
 80023cc:	3b01      	subs	r3, #1
 80023ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d109      	bne.n	80023e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	085b      	lsrs	r3, r3, #1
 80023e0:	3b01      	subs	r3, #1
 80023e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d06d      	beq.n	80024c4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	2b0c      	cmp	r3, #12
 80023ec:	d068      	beq.n	80024c0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023ee:	4b5d      	ldr	r3, [pc, #372]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023fa:	4b5a      	ldr	r3, [pc, #360]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0ba      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800240a:	4b56      	ldr	r3, [pc, #344]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a55      	ldr	r2, [pc, #340]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 8002410:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002414:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002416:	f7ff f8ff 	bl	8001618 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241e:	f7ff f8fb 	bl	8001618 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e0a7      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002430:	4b4c      	ldr	r3, [pc, #304]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f0      	bne.n	800241e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800243c:	4b49      	ldr	r3, [pc, #292]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	4b49      	ldr	r3, [pc, #292]	; (8002568 <HAL_RCC_OscConfig+0x828>)
 8002442:	4013      	ands	r3, r2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800244c:	3a01      	subs	r2, #1
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	4311      	orrs	r1, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002456:	0212      	lsls	r2, r2, #8
 8002458:	4311      	orrs	r1, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800245e:	0852      	lsrs	r2, r2, #1
 8002460:	3a01      	subs	r2, #1
 8002462:	0552      	lsls	r2, r2, #21
 8002464:	4311      	orrs	r1, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800246a:	0852      	lsrs	r2, r2, #1
 800246c:	3a01      	subs	r2, #1
 800246e:	0652      	lsls	r2, r2, #25
 8002470:	4311      	orrs	r1, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002476:	06d2      	lsls	r2, r2, #27
 8002478:	430a      	orrs	r2, r1
 800247a:	493a      	ldr	r1, [pc, #232]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 800247c:	4313      	orrs	r3, r2
 800247e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002480:	4b38      	ldr	r3, [pc, #224]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a37      	ldr	r2, [pc, #220]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 8002486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800248c:	4b35      	ldr	r3, [pc, #212]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a34      	ldr	r2, [pc, #208]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 8002492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002496:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002498:	f7ff f8be 	bl	8001618 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a0:	f7ff f8ba 	bl	8001618 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e066      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b2:	4b2c      	ldr	r3, [pc, #176]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024be:	e05e      	b.n	800257e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e05d      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c4:	4b27      	ldr	r3, [pc, #156]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d156      	bne.n	800257e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024d0:	4b24      	ldr	r3, [pc, #144]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a23      	ldr	r2, [pc, #140]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 80024d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024dc:	4b21      	ldr	r3, [pc, #132]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a20      	ldr	r2, [pc, #128]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 80024e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024e8:	f7ff f896 	bl	8001618 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f0:	f7ff f892 	bl	8001618 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e03e      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002502:	4b18      	ldr	r3, [pc, #96]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x7b0>
 800250e:	e036      	b.n	800257e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d031      	beq.n	800257a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002516:	4b13      	ldr	r3, [pc, #76]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a12      	ldr	r2, [pc, #72]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 800251c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002520:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d105      	bne.n	800253a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 8002534:	f023 0303 	bic.w	r3, r3, #3
 8002538:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4a09      	ldr	r2, [pc, #36]	; (8002564 <HAL_RCC_OscConfig+0x824>)
 8002540:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002548:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7ff f865 	bl	8001618 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002550:	e00c      	b.n	800256c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002552:	f7ff f861 	bl	8001618 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d905      	bls.n	800256c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e00d      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
 8002564:	40021000 	.word	0x40021000
 8002568:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_RCC_OscConfig+0x848>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1ec      	bne.n	8002552 <HAL_RCC_OscConfig+0x812>
 8002578:	e001      	b.n	800257e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3720      	adds	r7, #32
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000

0800258c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e10f      	b.n	80027c4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a4:	4b89      	ldr	r3, [pc, #548]	; (80027cc <HAL_RCC_ClockConfig+0x240>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d910      	bls.n	80025d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b86      	ldr	r3, [pc, #536]	; (80027cc <HAL_RCC_ClockConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 020f 	bic.w	r2, r3, #15
 80025ba:	4984      	ldr	r1, [pc, #528]	; (80027cc <HAL_RCC_ClockConfig+0x240>)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b82      	ldr	r3, [pc, #520]	; (80027cc <HAL_RCC_ClockConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0f7      	b.n	80027c4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8089 	beq.w	80026f4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d133      	bne.n	8002652 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ea:	4b79      	ldr	r3, [pc, #484]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0e4      	b.n	80027c4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80025fa:	f000 fa11 	bl	8002a20 <RCC_GetSysClockFreqFromPLLSource>
 80025fe:	4603      	mov	r3, r0
 8002600:	4a74      	ldr	r2, [pc, #464]	; (80027d4 <HAL_RCC_ClockConfig+0x248>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d955      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002606:	4b72      	ldr	r3, [pc, #456]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10a      	bne.n	8002628 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002612:	4b6f      	ldr	r3, [pc, #444]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800261a:	4a6d      	ldr	r2, [pc, #436]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 800261c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002620:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	e044      	b.n	80026b2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d03e      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x126>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d13a      	bne.n	80026b2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800263c:	4b64      	ldr	r3, [pc, #400]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002644:	4a62      	ldr	r2, [pc, #392]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 8002646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800264a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	e02f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800265a:	4b5d      	ldr	r3, [pc, #372]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d115      	bne.n	8002692 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0ac      	b.n	80027c4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002672:	4b57      	ldr	r3, [pc, #348]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e0a0      	b.n	80027c4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002682:	4b53      	ldr	r3, [pc, #332]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e098      	b.n	80027c4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002692:	f000 f8a7 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 8002696:	4603      	mov	r3, r0
 8002698:	4a4e      	ldr	r2, [pc, #312]	; (80027d4 <HAL_RCC_ClockConfig+0x248>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d909      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800269e:	4b4c      	ldr	r3, [pc, #304]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026a6:	4a4a      	ldr	r2, [pc, #296]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 80026a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026b2:	4b47      	ldr	r3, [pc, #284]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4944      	ldr	r1, [pc, #272]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c4:	f7fe ffa8 	bl	8001618 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026cc:	f7fe ffa4 	bl	8001618 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e070      	b.n	80027c4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 020c 	and.w	r2, r3, #12
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d1eb      	bne.n	80026cc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d009      	beq.n	8002714 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002700:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	4930      	ldr	r1, [pc, #192]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
 8002712:	e008      	b.n	8002726 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b80      	cmp	r3, #128	; 0x80
 8002718:	d105      	bne.n	8002726 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800271a:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	4a2c      	ldr	r2, [pc, #176]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 8002720:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002724:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002726:	4b29      	ldr	r3, [pc, #164]	; (80027cc <HAL_RCC_ClockConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d210      	bcs.n	8002756 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002734:	4b25      	ldr	r3, [pc, #148]	; (80027cc <HAL_RCC_ClockConfig+0x240>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f023 020f 	bic.w	r2, r3, #15
 800273c:	4923      	ldr	r1, [pc, #140]	; (80027cc <HAL_RCC_ClockConfig+0x240>)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	4313      	orrs	r3, r2
 8002742:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002744:	4b21      	ldr	r3, [pc, #132]	; (80027cc <HAL_RCC_ClockConfig+0x240>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 030f 	and.w	r3, r3, #15
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d001      	beq.n	8002756 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e036      	b.n	80027c4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002762:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	4918      	ldr	r1, [pc, #96]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 8002770:	4313      	orrs	r3, r2
 8002772:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d009      	beq.n	8002794 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4910      	ldr	r1, [pc, #64]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 8002790:	4313      	orrs	r3, r2
 8002792:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002794:	f000 f826 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 8002798:	4602      	mov	r2, r0
 800279a:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_RCC_ClockConfig+0x244>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	490c      	ldr	r1, [pc, #48]	; (80027d8 <HAL_RCC_ClockConfig+0x24c>)
 80027a6:	5ccb      	ldrb	r3, [r1, r3]
 80027a8:	f003 031f 	and.w	r3, r3, #31
 80027ac:	fa22 f303 	lsr.w	r3, r2, r3
 80027b0:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <HAL_RCC_ClockConfig+0x250>)
 80027b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027b4:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_RCC_ClockConfig+0x254>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe fedd 	bl	8001578 <HAL_InitTick>
 80027be:	4603      	mov	r3, r0
 80027c0:	73fb      	strb	r3, [r7, #15]

  return status;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40022000 	.word	0x40022000
 80027d0:	40021000 	.word	0x40021000
 80027d4:	04c4b400 	.word	0x04c4b400
 80027d8:	08005a00 	.word	0x08005a00
 80027dc:	20000000 	.word	0x20000000
 80027e0:	20000004 	.word	0x20000004

080027e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	; 0x24
 80027e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	2300      	movs	r3, #0
 80027f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f2:	4b3e      	ldr	r3, [pc, #248]	; (80028ec <HAL_RCC_GetSysClockFreq+0x108>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027fc:	4b3b      	ldr	r3, [pc, #236]	; (80028ec <HAL_RCC_GetSysClockFreq+0x108>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x34>
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	2b0c      	cmp	r3, #12
 8002810:	d121      	bne.n	8002856 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d11e      	bne.n	8002856 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002818:	4b34      	ldr	r3, [pc, #208]	; (80028ec <HAL_RCC_GetSysClockFreq+0x108>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002824:	4b31      	ldr	r3, [pc, #196]	; (80028ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	e005      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002834:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002840:	4a2b      	ldr	r2, [pc, #172]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002848:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10d      	bne.n	800286c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002854:	e00a      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	2b04      	cmp	r3, #4
 800285a:	d102      	bne.n	8002862 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800285c:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	e004      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	2b08      	cmp	r3, #8
 8002866:	d101      	bne.n	800286c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002868:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800286a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	2b0c      	cmp	r3, #12
 8002870:	d134      	bne.n	80028dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d003      	beq.n	800288a <HAL_RCC_GetSysClockFreq+0xa6>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d003      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0xac>
 8002888:	e005      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800288c:	617b      	str	r3, [r7, #20]
      break;
 800288e:	e005      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002892:	617b      	str	r3, [r7, #20]
      break;
 8002894:	e002      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	617b      	str	r3, [r7, #20]
      break;
 800289a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800289c:	4b13      	ldr	r3, [pc, #76]	; (80028ec <HAL_RCC_GetSysClockFreq+0x108>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	3301      	adds	r3, #1
 80028a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_RCC_GetSysClockFreq+0x108>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	0a1b      	lsrs	r3, r3, #8
 80028b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	fb02 f203 	mul.w	r2, r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <HAL_RCC_GetSysClockFreq+0x108>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	0e5b      	lsrs	r3, r3, #25
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	3301      	adds	r3, #1
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028dc:	69bb      	ldr	r3, [r7, #24]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	08005a18 	.word	0x08005a18
 80028f4:	00f42400 	.word	0x00f42400
 80028f8:	007a1200 	.word	0x007a1200

080028fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <HAL_RCC_GetHCLKFreq+0x14>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000000 	.word	0x20000000

08002914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002918:	f7ff fff0 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	4904      	ldr	r1, [pc, #16]	; (800293c <HAL_RCC_GetPCLK1Freq+0x28>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	08005a10 	.word	0x08005a10

08002940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002944:	f7ff ffda 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_RCC_GetPCLK2Freq+0x24>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	0adb      	lsrs	r3, r3, #11
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4904      	ldr	r1, [pc, #16]	; (8002968 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002960:	4618      	mov	r0, r3
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	08005a10 	.word	0x08005a10

0800296c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002978:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002984:	f7ff f908 	bl	8001b98 <HAL_PWREx_GetVoltageRange>
 8002988:	6178      	str	r0, [r7, #20]
 800298a:	e014      	b.n	80029b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800298c:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	4a21      	ldr	r2, [pc, #132]	; (8002a18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002996:	6593      	str	r3, [r2, #88]	; 0x58
 8002998:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800299a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029a4:	f7ff f8f8 	bl	8001b98 <HAL_PWREx_GetVoltageRange>
 80029a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029aa:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	4a1a      	ldr	r2, [pc, #104]	; (8002a18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029bc:	d10b      	bne.n	80029d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b80      	cmp	r3, #128	; 0x80
 80029c2:	d913      	bls.n	80029ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2ba0      	cmp	r3, #160	; 0xa0
 80029c8:	d902      	bls.n	80029d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029ca:	2302      	movs	r3, #2
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	e00d      	b.n	80029ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029d0:	2301      	movs	r3, #1
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	e00a      	b.n	80029ec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b7f      	cmp	r3, #127	; 0x7f
 80029da:	d902      	bls.n	80029e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80029dc:	2302      	movs	r3, #2
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	e004      	b.n	80029ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b70      	cmp	r3, #112	; 0x70
 80029e6:	d101      	bne.n	80029ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029e8:	2301      	movs	r3, #1
 80029ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f023 020f 	bic.w	r2, r3, #15
 80029f4:	4909      	ldr	r1, [pc, #36]	; (8002a1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029fc:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d001      	beq.n	8002a0e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40022000 	.word	0x40022000

08002a20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002a2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d118      	bne.n	8002a68 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a36:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d107      	bne.n	8002a52 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a42:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	e005      	b.n	8002a5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a52:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a5e:	4a21      	ldr	r2, [pc, #132]	; (8002ae4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a66:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a68:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d003      	beq.n	8002a80 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d003      	beq.n	8002a86 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002a7e:	e005      	b.n	8002a8c <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002a80:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002a82:	613b      	str	r3, [r7, #16]
    break;
 8002a84:	e005      	b.n	8002a92 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002a86:	4b19      	ldr	r3, [pc, #100]	; (8002aec <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002a88:	613b      	str	r3, [r7, #16]
    break;
 8002a8a:	e002      	b.n	8002a92 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	613b      	str	r3, [r7, #16]
    break;
 8002a90:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a92:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	0a1b      	lsrs	r3, r3, #8
 8002aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	fb02 f203 	mul.w	r2, r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	0e5b      	lsrs	r3, r3, #25
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002ad2:	683b      	ldr	r3, [r7, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	371c      	adds	r7, #28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	08005a18 	.word	0x08005a18
 8002ae8:	00f42400 	.word	0x00f42400
 8002aec:	007a1200 	.word	0x007a1200

08002af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002af8:	2300      	movs	r3, #0
 8002afa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002afc:	2300      	movs	r3, #0
 8002afe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d040      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b10:	2b80      	cmp	r3, #128	; 0x80
 8002b12:	d02a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b14:	2b80      	cmp	r3, #128	; 0x80
 8002b16:	d825      	bhi.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002b18:	2b60      	cmp	r3, #96	; 0x60
 8002b1a:	d026      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b1c:	2b60      	cmp	r3, #96	; 0x60
 8002b1e:	d821      	bhi.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002b20:	2b40      	cmp	r3, #64	; 0x40
 8002b22:	d006      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002b24:	2b40      	cmp	r3, #64	; 0x40
 8002b26:	d81d      	bhi.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d009      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d010      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002b30:	e018      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b32:	4b89      	ldr	r3, [pc, #548]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	4a88      	ldr	r2, [pc, #544]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b3e:	e015      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fb02 	bl	8003150 <RCCEx_PLLSAI1_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b50:	e00c      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3320      	adds	r3, #32
 8002b56:	2100      	movs	r1, #0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fbed 	bl	8003338 <RCCEx_PLLSAI2_Config>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b62:	e003      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	74fb      	strb	r3, [r7, #19]
      break;
 8002b68:	e000      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002b6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b6c:	7cfb      	ldrb	r3, [r7, #19]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10b      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b72:	4b79      	ldr	r3, [pc, #484]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b78:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b80:	4975      	ldr	r1, [pc, #468]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002b88:	e001      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b8a:	7cfb      	ldrb	r3, [r7, #19]
 8002b8c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d047      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba2:	d030      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba8:	d82a      	bhi.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bae:	d02a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002bb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bb4:	d824      	bhi.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bba:	d008      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc0:	d81e      	bhi.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bca:	d010      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002bcc:	e018      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bce:	4b62      	ldr	r3, [pc, #392]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	4a61      	ldr	r2, [pc, #388]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bda:	e015      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3304      	adds	r3, #4
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fab4 	bl	8003150 <RCCEx_PLLSAI1_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bec:	e00c      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3320      	adds	r3, #32
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 fb9f 	bl	8003338 <RCCEx_PLLSAI2_Config>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bfe:	e003      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	74fb      	strb	r3, [r7, #19]
      break;
 8002c04:	e000      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c08:	7cfb      	ldrb	r3, [r7, #19]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10b      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c0e:	4b52      	ldr	r3, [pc, #328]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	494e      	ldr	r1, [pc, #312]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002c24:	e001      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c26:	7cfb      	ldrb	r3, [r7, #19]
 8002c28:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 809f 	beq.w	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c3c:	4b46      	ldr	r3, [pc, #280]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00d      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c52:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	4a40      	ldr	r2, [pc, #256]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c6e:	4b3b      	ldr	r3, [pc, #236]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a3a      	ldr	r2, [pc, #232]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c7a:	f7fe fccd 	bl	8001618 <HAL_GetTick>
 8002c7e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c80:	e009      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c82:	f7fe fcc9 	bl	8001618 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d902      	bls.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	74fb      	strb	r3, [r7, #19]
        break;
 8002c94:	e005      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c96:	4b31      	ldr	r3, [pc, #196]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0ef      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002ca2:	7cfb      	ldrb	r3, [r7, #19]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d15b      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ca8:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d01f      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d019      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cc6:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cd2:	4b21      	ldr	r3, [pc, #132]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	4a1f      	ldr	r2, [pc, #124]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce8:	4a1b      	ldr	r2, [pc, #108]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cf2:	4a19      	ldr	r2, [pc, #100]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d016      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe fc88 	bl	8001618 <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0c:	f7fe fc84 	bl	8001618 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d902      	bls.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	74fb      	strb	r3, [r7, #19]
            break;
 8002d22:	e006      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0ec      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10c      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d48:	4903      	ldr	r1, [pc, #12]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d50:	e008      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	74bb      	strb	r3, [r7, #18]
 8002d56:	e005      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d60:	7cfb      	ldrb	r3, [r7, #19]
 8002d62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d64:	7c7b      	ldrb	r3, [r7, #17]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d105      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6a:	4ba0      	ldr	r3, [pc, #640]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	4a9f      	ldr	r2, [pc, #636]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d82:	4b9a      	ldr	r3, [pc, #616]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	f023 0203 	bic.w	r2, r3, #3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	4996      	ldr	r1, [pc, #600]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002da4:	4b91      	ldr	r3, [pc, #580]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	f023 020c 	bic.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	498e      	ldr	r1, [pc, #568]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dc6:	4b89      	ldr	r3, [pc, #548]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dcc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	4985      	ldr	r1, [pc, #532]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002de8:	4b80      	ldr	r3, [pc, #512]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df6:	497d      	ldr	r1, [pc, #500]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e0a:	4b78      	ldr	r3, [pc, #480]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e18:	4974      	ldr	r1, [pc, #464]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e2c:	4b6f      	ldr	r3, [pc, #444]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3a:	496c      	ldr	r1, [pc, #432]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e4e:	4b67      	ldr	r3, [pc, #412]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e5c:	4963      	ldr	r1, [pc, #396]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e70:	4b5e      	ldr	r3, [pc, #376]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e7e:	495b      	ldr	r1, [pc, #364]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e92:	4b56      	ldr	r3, [pc, #344]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	4952      	ldr	r1, [pc, #328]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eb4:	4b4d      	ldr	r3, [pc, #308]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	494a      	ldr	r1, [pc, #296]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ed6:	4b45      	ldr	r3, [pc, #276]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002edc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	4941      	ldr	r1, [pc, #260]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ef8:	4b3c      	ldr	r3, [pc, #240]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002efe:	f023 0203 	bic.w	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f06:	4939      	ldr	r1, [pc, #228]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d028      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f1a:	4b34      	ldr	r3, [pc, #208]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f28:	4930      	ldr	r1, [pc, #192]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f38:	d106      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f3a:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	4a2b      	ldr	r2, [pc, #172]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f44:	60d3      	str	r3, [r2, #12]
 8002f46:	e011      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3304      	adds	r3, #4
 8002f56:	2101      	movs	r1, #1
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 f8f9 	bl	8003150 <RCCEx_PLLSAI1_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002f68:	7cfb      	ldrb	r3, [r7, #19]
 8002f6a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d04d      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f80:	d108      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002f82:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f88:	4a18      	ldr	r2, [pc, #96]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f8e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002f92:	e012      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002f94:	4b15      	ldr	r3, [pc, #84]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f9a:	4a14      	ldr	r2, [pc, #80]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fa0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fb2:	490e      	ldr	r1, [pc, #56]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc4:	4b09      	ldr	r3, [pc, #36]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4a08      	ldr	r2, [pc, #32]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fce:	60d3      	str	r3, [r2, #12]
 8002fd0:	e020      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fda:	d109      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4a02      	ldr	r2, [pc, #8]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe6:	60d3      	str	r3, [r2, #12]
 8002fe8:	e014      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2101      	movs	r1, #1
 8003000:	4618      	mov	r0, r3
 8003002:	f000 f8a5 	bl	8003150 <RCCEx_PLLSAI1_Config>
 8003006:	4603      	mov	r3, r0
 8003008:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800300a:	7cfb      	ldrb	r3, [r7, #19]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d028      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003020:	4b4a      	ldr	r3, [pc, #296]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800302e:	4947      	ldr	r1, [pc, #284]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800303a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800303e:	d106      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003040:	4b42      	ldr	r3, [pc, #264]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4a41      	ldr	r2, [pc, #260]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800304a:	60d3      	str	r3, [r2, #12]
 800304c:	e011      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003052:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003056:	d10c      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3304      	adds	r3, #4
 800305c:	2101      	movs	r1, #1
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f876 	bl	8003150 <RCCEx_PLLSAI1_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003068:	7cfb      	ldrb	r3, [r7, #19]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800306e:	7cfb      	ldrb	r3, [r7, #19]
 8003070:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d01e      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800307e:	4b33      	ldr	r3, [pc, #204]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003084:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800308e:	492f      	ldr	r1, [pc, #188]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800309c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030a0:	d10c      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2102      	movs	r1, #2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f851 	bl	8003150 <RCCEx_PLLSAI1_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030b2:	7cfb      	ldrb	r3, [r7, #19]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80030b8:	7cfb      	ldrb	r3, [r7, #19]
 80030ba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00b      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030c8:	4b20      	ldr	r3, [pc, #128]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ce:	f023 0204 	bic.w	r2, r3, #4
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d8:	491c      	ldr	r1, [pc, #112]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80030ec:	4b17      	ldr	r3, [pc, #92]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030f2:	f023 0218 	bic.w	r2, r3, #24
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	4913      	ldr	r1, [pc, #76]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d017      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003110:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003112:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003116:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003120:	490a      	ldr	r1, [pc, #40]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800312e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003132:	d105      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003134:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a04      	ldr	r2, [pc, #16]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800313a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800313e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003140:	7cbb      	ldrb	r3, [r7, #18]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000

08003150 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800315e:	4b72      	ldr	r3, [pc, #456]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00e      	beq.n	8003188 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800316a:	4b6f      	ldr	r3, [pc, #444]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0203 	and.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d103      	bne.n	8003182 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
       ||
 800317e:	2b00      	cmp	r3, #0
 8003180:	d142      	bne.n	8003208 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	73fb      	strb	r3, [r7, #15]
 8003186:	e03f      	b.n	8003208 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d018      	beq.n	80031c2 <RCCEx_PLLSAI1_Config+0x72>
 8003190:	2b03      	cmp	r3, #3
 8003192:	d825      	bhi.n	80031e0 <RCCEx_PLLSAI1_Config+0x90>
 8003194:	2b01      	cmp	r3, #1
 8003196:	d002      	beq.n	800319e <RCCEx_PLLSAI1_Config+0x4e>
 8003198:	2b02      	cmp	r3, #2
 800319a:	d009      	beq.n	80031b0 <RCCEx_PLLSAI1_Config+0x60>
 800319c:	e020      	b.n	80031e0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800319e:	4b62      	ldr	r3, [pc, #392]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d11d      	bne.n	80031e6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ae:	e01a      	b.n	80031e6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031b0:	4b5d      	ldr	r3, [pc, #372]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d116      	bne.n	80031ea <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c0:	e013      	b.n	80031ea <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031c2:	4b59      	ldr	r3, [pc, #356]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10f      	bne.n	80031ee <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031ce:	4b56      	ldr	r3, [pc, #344]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031de:	e006      	b.n	80031ee <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
      break;
 80031e4:	e004      	b.n	80031f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80031e6:	bf00      	nop
 80031e8:	e002      	b.n	80031f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80031ea:	bf00      	nop
 80031ec:	e000      	b.n	80031f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80031ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d108      	bne.n	8003208 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80031f6:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f023 0203 	bic.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4949      	ldr	r1, [pc, #292]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003204:	4313      	orrs	r3, r2
 8003206:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 8086 	bne.w	800331c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003210:	4b45      	ldr	r3, [pc, #276]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a44      	ldr	r2, [pc, #272]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003216:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800321a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800321c:	f7fe f9fc 	bl	8001618 <HAL_GetTick>
 8003220:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003222:	e009      	b.n	8003238 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003224:	f7fe f9f8 	bl	8001618 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d902      	bls.n	8003238 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	73fb      	strb	r3, [r7, #15]
        break;
 8003236:	e005      	b.n	8003244 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003238:	4b3b      	ldr	r3, [pc, #236]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ef      	bne.n	8003224 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d168      	bne.n	800331c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d113      	bne.n	8003278 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003250:	4b35      	ldr	r3, [pc, #212]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	4b35      	ldr	r3, [pc, #212]	; (800332c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003256:	4013      	ands	r3, r2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6892      	ldr	r2, [r2, #8]
 800325c:	0211      	lsls	r1, r2, #8
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68d2      	ldr	r2, [r2, #12]
 8003262:	06d2      	lsls	r2, r2, #27
 8003264:	4311      	orrs	r1, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6852      	ldr	r2, [r2, #4]
 800326a:	3a01      	subs	r2, #1
 800326c:	0112      	lsls	r2, r2, #4
 800326e:	430a      	orrs	r2, r1
 8003270:	492d      	ldr	r1, [pc, #180]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003272:	4313      	orrs	r3, r2
 8003274:	610b      	str	r3, [r1, #16]
 8003276:	e02d      	b.n	80032d4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d115      	bne.n	80032aa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800327e:	4b2a      	ldr	r3, [pc, #168]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003284:	4013      	ands	r3, r2
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6892      	ldr	r2, [r2, #8]
 800328a:	0211      	lsls	r1, r2, #8
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6912      	ldr	r2, [r2, #16]
 8003290:	0852      	lsrs	r2, r2, #1
 8003292:	3a01      	subs	r2, #1
 8003294:	0552      	lsls	r2, r2, #21
 8003296:	4311      	orrs	r1, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6852      	ldr	r2, [r2, #4]
 800329c:	3a01      	subs	r2, #1
 800329e:	0112      	lsls	r2, r2, #4
 80032a0:	430a      	orrs	r2, r1
 80032a2:	4921      	ldr	r1, [pc, #132]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	610b      	str	r3, [r1, #16]
 80032a8:	e014      	b.n	80032d4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032aa:	4b1f      	ldr	r3, [pc, #124]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6892      	ldr	r2, [r2, #8]
 80032b6:	0211      	lsls	r1, r2, #8
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6952      	ldr	r2, [r2, #20]
 80032bc:	0852      	lsrs	r2, r2, #1
 80032be:	3a01      	subs	r2, #1
 80032c0:	0652      	lsls	r2, r2, #25
 80032c2:	4311      	orrs	r1, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6852      	ldr	r2, [r2, #4]
 80032c8:	3a01      	subs	r2, #1
 80032ca:	0112      	lsls	r2, r2, #4
 80032cc:	430a      	orrs	r2, r1
 80032ce:	4916      	ldr	r1, [pc, #88]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032d4:	4b14      	ldr	r3, [pc, #80]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a13      	ldr	r2, [pc, #76]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fe f99a 	bl	8001618 <HAL_GetTick>
 80032e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032e6:	e009      	b.n	80032fc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032e8:	f7fe f996 	bl	8001618 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d902      	bls.n	80032fc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	73fb      	strb	r3, [r7, #15]
          break;
 80032fa:	e005      	b.n	8003308 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032fc:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0ef      	beq.n	80032e8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d106      	bne.n	800331c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003310:	691a      	ldr	r2, [r3, #16]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	4904      	ldr	r1, [pc, #16]	; (8003328 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003318:	4313      	orrs	r3, r2
 800331a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800331c:	7bfb      	ldrb	r3, [r7, #15]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
 800332c:	07ff800f 	.word	0x07ff800f
 8003330:	ff9f800f 	.word	0xff9f800f
 8003334:	f9ff800f 	.word	0xf9ff800f

08003338 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003346:	4b72      	ldr	r3, [pc, #456]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00e      	beq.n	8003370 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003352:	4b6f      	ldr	r3, [pc, #444]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f003 0203 	and.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d103      	bne.n	800336a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
       ||
 8003366:	2b00      	cmp	r3, #0
 8003368:	d142      	bne.n	80033f0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
 800336e:	e03f      	b.n	80033f0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b03      	cmp	r3, #3
 8003376:	d018      	beq.n	80033aa <RCCEx_PLLSAI2_Config+0x72>
 8003378:	2b03      	cmp	r3, #3
 800337a:	d825      	bhi.n	80033c8 <RCCEx_PLLSAI2_Config+0x90>
 800337c:	2b01      	cmp	r3, #1
 800337e:	d002      	beq.n	8003386 <RCCEx_PLLSAI2_Config+0x4e>
 8003380:	2b02      	cmp	r3, #2
 8003382:	d009      	beq.n	8003398 <RCCEx_PLLSAI2_Config+0x60>
 8003384:	e020      	b.n	80033c8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003386:	4b62      	ldr	r3, [pc, #392]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d11d      	bne.n	80033ce <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003396:	e01a      	b.n	80033ce <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003398:	4b5d      	ldr	r3, [pc, #372]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d116      	bne.n	80033d2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a8:	e013      	b.n	80033d2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033aa:	4b59      	ldr	r3, [pc, #356]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10f      	bne.n	80033d6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033b6:	4b56      	ldr	r3, [pc, #344]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033c6:	e006      	b.n	80033d6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
      break;
 80033cc:	e004      	b.n	80033d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80033ce:	bf00      	nop
 80033d0:	e002      	b.n	80033d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80033d2:	bf00      	nop
 80033d4:	e000      	b.n	80033d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80033d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d108      	bne.n	80033f0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80033de:	4b4c      	ldr	r3, [pc, #304]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f023 0203 	bic.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4949      	ldr	r1, [pc, #292]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 8086 	bne.w	8003504 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80033f8:	4b45      	ldr	r3, [pc, #276]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a44      	ldr	r2, [pc, #272]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003404:	f7fe f908 	bl	8001618 <HAL_GetTick>
 8003408:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800340a:	e009      	b.n	8003420 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800340c:	f7fe f904 	bl	8001618 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d902      	bls.n	8003420 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	73fb      	strb	r3, [r7, #15]
        break;
 800341e:	e005      	b.n	800342c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003420:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1ef      	bne.n	800340c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d168      	bne.n	8003504 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d113      	bne.n	8003460 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003438:	4b35      	ldr	r3, [pc, #212]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	4b35      	ldr	r3, [pc, #212]	; (8003514 <RCCEx_PLLSAI2_Config+0x1dc>)
 800343e:	4013      	ands	r3, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6892      	ldr	r2, [r2, #8]
 8003444:	0211      	lsls	r1, r2, #8
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	68d2      	ldr	r2, [r2, #12]
 800344a:	06d2      	lsls	r2, r2, #27
 800344c:	4311      	orrs	r1, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6852      	ldr	r2, [r2, #4]
 8003452:	3a01      	subs	r2, #1
 8003454:	0112      	lsls	r2, r2, #4
 8003456:	430a      	orrs	r2, r1
 8003458:	492d      	ldr	r1, [pc, #180]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 800345a:	4313      	orrs	r3, r2
 800345c:	614b      	str	r3, [r1, #20]
 800345e:	e02d      	b.n	80034bc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d115      	bne.n	8003492 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003466:	4b2a      	ldr	r3, [pc, #168]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003468:	695a      	ldr	r2, [r3, #20]
 800346a:	4b2b      	ldr	r3, [pc, #172]	; (8003518 <RCCEx_PLLSAI2_Config+0x1e0>)
 800346c:	4013      	ands	r3, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6892      	ldr	r2, [r2, #8]
 8003472:	0211      	lsls	r1, r2, #8
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6912      	ldr	r2, [r2, #16]
 8003478:	0852      	lsrs	r2, r2, #1
 800347a:	3a01      	subs	r2, #1
 800347c:	0552      	lsls	r2, r2, #21
 800347e:	4311      	orrs	r1, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6852      	ldr	r2, [r2, #4]
 8003484:	3a01      	subs	r2, #1
 8003486:	0112      	lsls	r2, r2, #4
 8003488:	430a      	orrs	r2, r1
 800348a:	4921      	ldr	r1, [pc, #132]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 800348c:	4313      	orrs	r3, r2
 800348e:	614b      	str	r3, [r1, #20]
 8003490:	e014      	b.n	80034bc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003492:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	4b21      	ldr	r3, [pc, #132]	; (800351c <RCCEx_PLLSAI2_Config+0x1e4>)
 8003498:	4013      	ands	r3, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6892      	ldr	r2, [r2, #8]
 800349e:	0211      	lsls	r1, r2, #8
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6952      	ldr	r2, [r2, #20]
 80034a4:	0852      	lsrs	r2, r2, #1
 80034a6:	3a01      	subs	r2, #1
 80034a8:	0652      	lsls	r2, r2, #25
 80034aa:	4311      	orrs	r1, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6852      	ldr	r2, [r2, #4]
 80034b0:	3a01      	subs	r2, #1
 80034b2:	0112      	lsls	r2, r2, #4
 80034b4:	430a      	orrs	r2, r1
 80034b6:	4916      	ldr	r1, [pc, #88]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80034bc:	4b14      	ldr	r3, [pc, #80]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a13      	ldr	r2, [pc, #76]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fe f8a6 	bl	8001618 <HAL_GetTick>
 80034cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034ce:	e009      	b.n	80034e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034d0:	f7fe f8a2 	bl	8001618 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d902      	bls.n	80034e4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	73fb      	strb	r3, [r7, #15]
          break;
 80034e2:	e005      	b.n	80034f0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034e4:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0ef      	beq.n	80034d0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	4904      	ldr	r1, [pc, #16]	; (8003510 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003500:	4313      	orrs	r3, r2
 8003502:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003504:	7bfb      	ldrb	r3, [r7, #15]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	40021000 	.word	0x40021000
 8003514:	07ff800f 	.word	0x07ff800f
 8003518:	ff9f800f 	.word	0xff9f800f
 800351c:	f9ff800f 	.word	0xf9ff800f

08003520 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e042      	b.n	80035b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003538:	2b00      	cmp	r3, #0
 800353a:	d106      	bne.n	800354a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7fd fe4f 	bl	80011e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2224      	movs	r2, #36	; 0x24
 800354e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0201 	bic.w	r2, r2, #1
 8003560:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f998 	bl	8003898 <UART_SetConfig>
 8003568:	4603      	mov	r3, r0
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e022      	b.n	80035b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fc54 	bl	8003e28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800358e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800359e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fcdb 	bl	8003f6c <UART_CheckIdleState>
 80035b6:	4603      	mov	r3, r0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	; 0x28
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	f040 8084 	bne.w	80036e4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_UART_Transmit+0x28>
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e07c      	b.n	80036e6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_UART_Transmit+0x3a>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e075      	b.n	80036e6 <HAL_UART_Transmit+0x126>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2221      	movs	r2, #33	; 0x21
 800360e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003612:	f7fe f801 	bl	8001618 <HAL_GetTick>
 8003616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	88fa      	ldrh	r2, [r7, #6]
 800361c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	88fa      	ldrh	r2, [r7, #6]
 8003624:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003630:	d108      	bne.n	8003644 <HAL_UART_Transmit+0x84>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d104      	bne.n	8003644 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	e003      	b.n	800364c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003648:	2300      	movs	r3, #0
 800364a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003654:	e02d      	b.n	80036b2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2200      	movs	r2, #0
 800365e:	2180      	movs	r1, #128	; 0x80
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fcce 	bl	8004002 <UART_WaitOnFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e03a      	b.n	80036e6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10b      	bne.n	800368e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	881a      	ldrh	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003682:	b292      	uxth	r2, r2
 8003684:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	3302      	adds	r3, #2
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	e008      	b.n	80036a0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	781a      	ldrb	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	b292      	uxth	r2, r2
 8003698:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3301      	adds	r3, #1
 800369e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1cb      	bne.n	8003656 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2200      	movs	r2, #0
 80036c6:	2140      	movs	r1, #64	; 0x40
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 fc9a 	bl	8004002 <UART_WaitOnFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e006      	b.n	80036e6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	e000      	b.n	80036e6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3720      	adds	r7, #32
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b08a      	sub	sp, #40	; 0x28
 80036f2:	af02      	add	r7, sp, #8
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	4613      	mov	r3, r2
 80036fc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003704:	2b20      	cmp	r3, #32
 8003706:	f040 80c1 	bne.w	800388c <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_UART_Receive+0x28>
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e0b9      	b.n	800388e <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_UART_Receive+0x3a>
 8003724:	2302      	movs	r3, #2
 8003726:	e0b2      	b.n	800388e <HAL_UART_Receive+0x1a0>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2222      	movs	r2, #34	; 0x22
 800373c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003746:	f7fd ff67 	bl	8001618 <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	88fa      	ldrh	r2, [r7, #6]
 8003750:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	88fa      	ldrh	r2, [r7, #6]
 8003758:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003764:	d10e      	bne.n	8003784 <HAL_UART_Receive+0x96>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d105      	bne.n	800377a <HAL_UART_Receive+0x8c>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003774:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003778:	e02d      	b.n	80037d6 <HAL_UART_Receive+0xe8>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	22ff      	movs	r2, #255	; 0xff
 800377e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003782:	e028      	b.n	80037d6 <HAL_UART_Receive+0xe8>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10d      	bne.n	80037a8 <HAL_UART_Receive+0xba>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d104      	bne.n	800379e <HAL_UART_Receive+0xb0>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	22ff      	movs	r2, #255	; 0xff
 8003798:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800379c:	e01b      	b.n	80037d6 <HAL_UART_Receive+0xe8>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	227f      	movs	r2, #127	; 0x7f
 80037a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037a6:	e016      	b.n	80037d6 <HAL_UART_Receive+0xe8>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037b0:	d10d      	bne.n	80037ce <HAL_UART_Receive+0xe0>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d104      	bne.n	80037c4 <HAL_UART_Receive+0xd6>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	227f      	movs	r2, #127	; 0x7f
 80037be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037c2:	e008      	b.n	80037d6 <HAL_UART_Receive+0xe8>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	223f      	movs	r2, #63	; 0x3f
 80037c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037cc:	e003      	b.n	80037d6 <HAL_UART_Receive+0xe8>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80037dc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e6:	d108      	bne.n	80037fa <HAL_UART_Receive+0x10c>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d104      	bne.n	80037fa <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	e003      	b.n	8003802 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800380a:	e033      	b.n	8003874 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2200      	movs	r2, #0
 8003814:	2120      	movs	r1, #32
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 fbf3 	bl	8004002 <UART_WaitOnFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e033      	b.n	800388e <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10c      	bne.n	8003846 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003832:	b29a      	uxth	r2, r3
 8003834:	8a7b      	ldrh	r3, [r7, #18]
 8003836:	4013      	ands	r3, r2
 8003838:	b29a      	uxth	r2, r3
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	3302      	adds	r3, #2
 8003842:	61bb      	str	r3, [r7, #24]
 8003844:	e00d      	b.n	8003862 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800384c:	b29b      	uxth	r3, r3
 800384e:	b2da      	uxtb	r2, r3
 8003850:	8a7b      	ldrh	r3, [r7, #18]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	4013      	ands	r3, r2
 8003856:	b2da      	uxtb	r2, r3
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	3301      	adds	r3, #1
 8003860:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1c5      	bne.n	800380c <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	e000      	b.n	800388e <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 800388c:	2302      	movs	r3, #2
  }
}
 800388e:	4618      	mov	r0, r3
 8003890:	3720      	adds	r7, #32
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003898:	b5b0      	push	{r4, r5, r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	4bb1      	ldr	r3, [pc, #708]	; (8003b88 <UART_SetConfig+0x2f0>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6812      	ldr	r2, [r2, #0]
 80038ca:	69f9      	ldr	r1, [r7, #28]
 80038cc:	430b      	orrs	r3, r1
 80038ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4aa6      	ldr	r2, [pc, #664]	; (8003b8c <UART_SetConfig+0x2f4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	69fa      	ldr	r2, [r7, #28]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800390a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	69f9      	ldr	r1, [r7, #28]
 8003914:	430b      	orrs	r3, r1
 8003916:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	f023 010f 	bic.w	r1, r3, #15
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a97      	ldr	r2, [pc, #604]	; (8003b90 <UART_SetConfig+0x2f8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d120      	bne.n	800397a <UART_SetConfig+0xe2>
 8003938:	4b96      	ldr	r3, [pc, #600]	; (8003b94 <UART_SetConfig+0x2fc>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b03      	cmp	r3, #3
 8003944:	d816      	bhi.n	8003974 <UART_SetConfig+0xdc>
 8003946:	a201      	add	r2, pc, #4	; (adr r2, 800394c <UART_SetConfig+0xb4>)
 8003948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394c:	0800395d 	.word	0x0800395d
 8003950:	08003969 	.word	0x08003969
 8003954:	08003963 	.word	0x08003963
 8003958:	0800396f 	.word	0x0800396f
 800395c:	2301      	movs	r3, #1
 800395e:	76fb      	strb	r3, [r7, #27]
 8003960:	e0e7      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003962:	2302      	movs	r3, #2
 8003964:	76fb      	strb	r3, [r7, #27]
 8003966:	e0e4      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003968:	2304      	movs	r3, #4
 800396a:	76fb      	strb	r3, [r7, #27]
 800396c:	e0e1      	b.n	8003b32 <UART_SetConfig+0x29a>
 800396e:	2308      	movs	r3, #8
 8003970:	76fb      	strb	r3, [r7, #27]
 8003972:	e0de      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003974:	2310      	movs	r3, #16
 8003976:	76fb      	strb	r3, [r7, #27]
 8003978:	e0db      	b.n	8003b32 <UART_SetConfig+0x29a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a86      	ldr	r2, [pc, #536]	; (8003b98 <UART_SetConfig+0x300>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d132      	bne.n	80039ea <UART_SetConfig+0x152>
 8003984:	4b83      	ldr	r3, [pc, #524]	; (8003b94 <UART_SetConfig+0x2fc>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b0c      	cmp	r3, #12
 8003990:	d828      	bhi.n	80039e4 <UART_SetConfig+0x14c>
 8003992:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <UART_SetConfig+0x100>)
 8003994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003998:	080039cd 	.word	0x080039cd
 800399c:	080039e5 	.word	0x080039e5
 80039a0:	080039e5 	.word	0x080039e5
 80039a4:	080039e5 	.word	0x080039e5
 80039a8:	080039d9 	.word	0x080039d9
 80039ac:	080039e5 	.word	0x080039e5
 80039b0:	080039e5 	.word	0x080039e5
 80039b4:	080039e5 	.word	0x080039e5
 80039b8:	080039d3 	.word	0x080039d3
 80039bc:	080039e5 	.word	0x080039e5
 80039c0:	080039e5 	.word	0x080039e5
 80039c4:	080039e5 	.word	0x080039e5
 80039c8:	080039df 	.word	0x080039df
 80039cc:	2300      	movs	r3, #0
 80039ce:	76fb      	strb	r3, [r7, #27]
 80039d0:	e0af      	b.n	8003b32 <UART_SetConfig+0x29a>
 80039d2:	2302      	movs	r3, #2
 80039d4:	76fb      	strb	r3, [r7, #27]
 80039d6:	e0ac      	b.n	8003b32 <UART_SetConfig+0x29a>
 80039d8:	2304      	movs	r3, #4
 80039da:	76fb      	strb	r3, [r7, #27]
 80039dc:	e0a9      	b.n	8003b32 <UART_SetConfig+0x29a>
 80039de:	2308      	movs	r3, #8
 80039e0:	76fb      	strb	r3, [r7, #27]
 80039e2:	e0a6      	b.n	8003b32 <UART_SetConfig+0x29a>
 80039e4:	2310      	movs	r3, #16
 80039e6:	76fb      	strb	r3, [r7, #27]
 80039e8:	e0a3      	b.n	8003b32 <UART_SetConfig+0x29a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6b      	ldr	r2, [pc, #428]	; (8003b9c <UART_SetConfig+0x304>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d120      	bne.n	8003a36 <UART_SetConfig+0x19e>
 80039f4:	4b67      	ldr	r3, [pc, #412]	; (8003b94 <UART_SetConfig+0x2fc>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039fe:	2b30      	cmp	r3, #48	; 0x30
 8003a00:	d013      	beq.n	8003a2a <UART_SetConfig+0x192>
 8003a02:	2b30      	cmp	r3, #48	; 0x30
 8003a04:	d814      	bhi.n	8003a30 <UART_SetConfig+0x198>
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	d009      	beq.n	8003a1e <UART_SetConfig+0x186>
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d810      	bhi.n	8003a30 <UART_SetConfig+0x198>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <UART_SetConfig+0x180>
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d006      	beq.n	8003a24 <UART_SetConfig+0x18c>
 8003a16:	e00b      	b.n	8003a30 <UART_SetConfig+0x198>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	76fb      	strb	r3, [r7, #27]
 8003a1c:	e089      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	76fb      	strb	r3, [r7, #27]
 8003a22:	e086      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003a24:	2304      	movs	r3, #4
 8003a26:	76fb      	strb	r3, [r7, #27]
 8003a28:	e083      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	76fb      	strb	r3, [r7, #27]
 8003a2e:	e080      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003a30:	2310      	movs	r3, #16
 8003a32:	76fb      	strb	r3, [r7, #27]
 8003a34:	e07d      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a59      	ldr	r2, [pc, #356]	; (8003ba0 <UART_SetConfig+0x308>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d120      	bne.n	8003a82 <UART_SetConfig+0x1ea>
 8003a40:	4b54      	ldr	r3, [pc, #336]	; (8003b94 <UART_SetConfig+0x2fc>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a4a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a4c:	d013      	beq.n	8003a76 <UART_SetConfig+0x1de>
 8003a4e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a50:	d814      	bhi.n	8003a7c <UART_SetConfig+0x1e4>
 8003a52:	2b80      	cmp	r3, #128	; 0x80
 8003a54:	d009      	beq.n	8003a6a <UART_SetConfig+0x1d2>
 8003a56:	2b80      	cmp	r3, #128	; 0x80
 8003a58:	d810      	bhi.n	8003a7c <UART_SetConfig+0x1e4>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <UART_SetConfig+0x1cc>
 8003a5e:	2b40      	cmp	r3, #64	; 0x40
 8003a60:	d006      	beq.n	8003a70 <UART_SetConfig+0x1d8>
 8003a62:	e00b      	b.n	8003a7c <UART_SetConfig+0x1e4>
 8003a64:	2300      	movs	r3, #0
 8003a66:	76fb      	strb	r3, [r7, #27]
 8003a68:	e063      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	76fb      	strb	r3, [r7, #27]
 8003a6e:	e060      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003a70:	2304      	movs	r3, #4
 8003a72:	76fb      	strb	r3, [r7, #27]
 8003a74:	e05d      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003a76:	2308      	movs	r3, #8
 8003a78:	76fb      	strb	r3, [r7, #27]
 8003a7a:	e05a      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	76fb      	strb	r3, [r7, #27]
 8003a80:	e057      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a47      	ldr	r2, [pc, #284]	; (8003ba4 <UART_SetConfig+0x30c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d125      	bne.n	8003ad8 <UART_SetConfig+0x240>
 8003a8c:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <UART_SetConfig+0x2fc>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a9a:	d017      	beq.n	8003acc <UART_SetConfig+0x234>
 8003a9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aa0:	d817      	bhi.n	8003ad2 <UART_SetConfig+0x23a>
 8003aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa6:	d00b      	beq.n	8003ac0 <UART_SetConfig+0x228>
 8003aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aac:	d811      	bhi.n	8003ad2 <UART_SetConfig+0x23a>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <UART_SetConfig+0x222>
 8003ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab6:	d006      	beq.n	8003ac6 <UART_SetConfig+0x22e>
 8003ab8:	e00b      	b.n	8003ad2 <UART_SetConfig+0x23a>
 8003aba:	2300      	movs	r3, #0
 8003abc:	76fb      	strb	r3, [r7, #27]
 8003abe:	e038      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	76fb      	strb	r3, [r7, #27]
 8003ac4:	e035      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003ac6:	2304      	movs	r3, #4
 8003ac8:	76fb      	strb	r3, [r7, #27]
 8003aca:	e032      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003acc:	2308      	movs	r3, #8
 8003ace:	76fb      	strb	r3, [r7, #27]
 8003ad0:	e02f      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003ad2:	2310      	movs	r3, #16
 8003ad4:	76fb      	strb	r3, [r7, #27]
 8003ad6:	e02c      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a2b      	ldr	r2, [pc, #172]	; (8003b8c <UART_SetConfig+0x2f4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d125      	bne.n	8003b2e <UART_SetConfig+0x296>
 8003ae2:	4b2c      	ldr	r3, [pc, #176]	; (8003b94 <UART_SetConfig+0x2fc>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003aec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003af0:	d017      	beq.n	8003b22 <UART_SetConfig+0x28a>
 8003af2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003af6:	d817      	bhi.n	8003b28 <UART_SetConfig+0x290>
 8003af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003afc:	d00b      	beq.n	8003b16 <UART_SetConfig+0x27e>
 8003afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b02:	d811      	bhi.n	8003b28 <UART_SetConfig+0x290>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <UART_SetConfig+0x278>
 8003b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0c:	d006      	beq.n	8003b1c <UART_SetConfig+0x284>
 8003b0e:	e00b      	b.n	8003b28 <UART_SetConfig+0x290>
 8003b10:	2300      	movs	r3, #0
 8003b12:	76fb      	strb	r3, [r7, #27]
 8003b14:	e00d      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003b16:	2302      	movs	r3, #2
 8003b18:	76fb      	strb	r3, [r7, #27]
 8003b1a:	e00a      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003b1c:	2304      	movs	r3, #4
 8003b1e:	76fb      	strb	r3, [r7, #27]
 8003b20:	e007      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003b22:	2308      	movs	r3, #8
 8003b24:	76fb      	strb	r3, [r7, #27]
 8003b26:	e004      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003b28:	2310      	movs	r3, #16
 8003b2a:	76fb      	strb	r3, [r7, #27]
 8003b2c:	e001      	b.n	8003b32 <UART_SetConfig+0x29a>
 8003b2e:	2310      	movs	r3, #16
 8003b30:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <UART_SetConfig+0x2f4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	f040 809f 	bne.w	8003c7c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b3e:	7efb      	ldrb	r3, [r7, #27]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d837      	bhi.n	8003bb4 <UART_SetConfig+0x31c>
 8003b44:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <UART_SetConfig+0x2b4>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003b71 	.word	0x08003b71
 8003b50:	08003bb5 	.word	0x08003bb5
 8003b54:	08003b79 	.word	0x08003b79
 8003b58:	08003bb5 	.word	0x08003bb5
 8003b5c:	08003b7f 	.word	0x08003b7f
 8003b60:	08003bb5 	.word	0x08003bb5
 8003b64:	08003bb5 	.word	0x08003bb5
 8003b68:	08003bb5 	.word	0x08003bb5
 8003b6c:	08003bad 	.word	0x08003bad
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b70:	f7fe fed0 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 8003b74:	6178      	str	r0, [r7, #20]
        break;
 8003b76:	e022      	b.n	8003bbe <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <UART_SetConfig+0x310>)
 8003b7a:	617b      	str	r3, [r7, #20]
        break;
 8003b7c:	e01f      	b.n	8003bbe <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b7e:	f7fe fe31 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 8003b82:	6178      	str	r0, [r7, #20]
        break;
 8003b84:	e01b      	b.n	8003bbe <UART_SetConfig+0x326>
 8003b86:	bf00      	nop
 8003b88:	cfff69f3 	.word	0xcfff69f3
 8003b8c:	40008000 	.word	0x40008000
 8003b90:	40013800 	.word	0x40013800
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40004400 	.word	0x40004400
 8003b9c:	40004800 	.word	0x40004800
 8003ba0:	40004c00 	.word	0x40004c00
 8003ba4:	40005000 	.word	0x40005000
 8003ba8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bb0:	617b      	str	r3, [r7, #20]
        break;
 8003bb2:	e004      	b.n	8003bbe <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	76bb      	strb	r3, [r7, #26]
        break;
 8003bbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8119 	beq.w	8003df8 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	4a95      	ldr	r2, [pc, #596]	; (8003e20 <UART_SetConfig+0x588>)
 8003bcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bd8:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4413      	add	r3, r2
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d305      	bcc.n	8003bf6 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d902      	bls.n	8003bfc <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	76bb      	strb	r3, [r7, #26]
 8003bfa:	e0fd      	b.n	8003df8 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f04f 0100 	mov.w	r1, #0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	4a85      	ldr	r2, [pc, #532]	; (8003e20 <UART_SetConfig+0x588>)
 8003c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	f7fc fb5c 	bl	80002d0 <__aeabi_uldivmod>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	4619      	mov	r1, r3
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	020b      	lsls	r3, r1, #8
 8003c2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c2e:	0202      	lsls	r2, r0, #8
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	6849      	ldr	r1, [r1, #4]
 8003c34:	0849      	lsrs	r1, r1, #1
 8003c36:	4608      	mov	r0, r1
 8003c38:	f04f 0100 	mov.w	r1, #0
 8003c3c:	1814      	adds	r4, r2, r0
 8003c3e:	eb43 0501 	adc.w	r5, r3, r1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	461a      	mov	r2, r3
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	4629      	mov	r1, r5
 8003c50:	f7fc fb3e 	bl	80002d0 <__aeabi_uldivmod>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4613      	mov	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c62:	d308      	bcc.n	8003c76 <UART_SetConfig+0x3de>
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c6a:	d204      	bcs.n	8003c76 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	60da      	str	r2, [r3, #12]
 8003c74:	e0c0      	b.n	8003df8 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	76bb      	strb	r3, [r7, #26]
 8003c7a:	e0bd      	b.n	8003df8 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c84:	d164      	bne.n	8003d50 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8003c86:	7efb      	ldrb	r3, [r7, #27]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d828      	bhi.n	8003cde <UART_SetConfig+0x446>
 8003c8c:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <UART_SetConfig+0x3fc>)
 8003c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c92:	bf00      	nop
 8003c94:	08003cb9 	.word	0x08003cb9
 8003c98:	08003cc1 	.word	0x08003cc1
 8003c9c:	08003cc9 	.word	0x08003cc9
 8003ca0:	08003cdf 	.word	0x08003cdf
 8003ca4:	08003ccf 	.word	0x08003ccf
 8003ca8:	08003cdf 	.word	0x08003cdf
 8003cac:	08003cdf 	.word	0x08003cdf
 8003cb0:	08003cdf 	.word	0x08003cdf
 8003cb4:	08003cd7 	.word	0x08003cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb8:	f7fe fe2c 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 8003cbc:	6178      	str	r0, [r7, #20]
        break;
 8003cbe:	e013      	b.n	8003ce8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cc0:	f7fe fe3e 	bl	8002940 <HAL_RCC_GetPCLK2Freq>
 8003cc4:	6178      	str	r0, [r7, #20]
        break;
 8003cc6:	e00f      	b.n	8003ce8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc8:	4b56      	ldr	r3, [pc, #344]	; (8003e24 <UART_SetConfig+0x58c>)
 8003cca:	617b      	str	r3, [r7, #20]
        break;
 8003ccc:	e00c      	b.n	8003ce8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cce:	f7fe fd89 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 8003cd2:	6178      	str	r0, [r7, #20]
        break;
 8003cd4:	e008      	b.n	8003ce8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cda:	617b      	str	r3, [r7, #20]
        break;
 8003cdc:	e004      	b.n	8003ce8 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	76bb      	strb	r3, [r7, #26]
        break;
 8003ce6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8084 	beq.w	8003df8 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	4a4a      	ldr	r2, [pc, #296]	; (8003e20 <UART_SetConfig+0x588>)
 8003cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d02:	005a      	lsls	r2, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	085b      	lsrs	r3, r3, #1
 8003d0a:	441a      	add	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d14:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	2b0f      	cmp	r3, #15
 8003d1a:	d916      	bls.n	8003d4a <UART_SetConfig+0x4b2>
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d22:	d212      	bcs.n	8003d4a <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f023 030f 	bic.w	r3, r3, #15
 8003d2c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	89fb      	ldrh	r3, [r7, #14]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	89fa      	ldrh	r2, [r7, #14]
 8003d46:	60da      	str	r2, [r3, #12]
 8003d48:	e056      	b.n	8003df8 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	76bb      	strb	r3, [r7, #26]
 8003d4e:	e053      	b.n	8003df8 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d50:	7efb      	ldrb	r3, [r7, #27]
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d827      	bhi.n	8003da6 <UART_SetConfig+0x50e>
 8003d56:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <UART_SetConfig+0x4c4>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003d81 	.word	0x08003d81
 8003d60:	08003d89 	.word	0x08003d89
 8003d64:	08003d91 	.word	0x08003d91
 8003d68:	08003da7 	.word	0x08003da7
 8003d6c:	08003d97 	.word	0x08003d97
 8003d70:	08003da7 	.word	0x08003da7
 8003d74:	08003da7 	.word	0x08003da7
 8003d78:	08003da7 	.word	0x08003da7
 8003d7c:	08003d9f 	.word	0x08003d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d80:	f7fe fdc8 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 8003d84:	6178      	str	r0, [r7, #20]
        break;
 8003d86:	e013      	b.n	8003db0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d88:	f7fe fdda 	bl	8002940 <HAL_RCC_GetPCLK2Freq>
 8003d8c:	6178      	str	r0, [r7, #20]
        break;
 8003d8e:	e00f      	b.n	8003db0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d90:	4b24      	ldr	r3, [pc, #144]	; (8003e24 <UART_SetConfig+0x58c>)
 8003d92:	617b      	str	r3, [r7, #20]
        break;
 8003d94:	e00c      	b.n	8003db0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d96:	f7fe fd25 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 8003d9a:	6178      	str	r0, [r7, #20]
        break;
 8003d9c:	e008      	b.n	8003db0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da2:	617b      	str	r3, [r7, #20]
        break;
 8003da4:	e004      	b.n	8003db0 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	76bb      	strb	r3, [r7, #26]
        break;
 8003dae:	bf00      	nop
    }

    if (pclk != 0U)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d020      	beq.n	8003df8 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <UART_SetConfig+0x588>)
 8003dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	fbb3 f2f2 	udiv	r2, r3, r2
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	441a      	add	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	2b0f      	cmp	r3, #15
 8003dde:	d909      	bls.n	8003df4 <UART_SetConfig+0x55c>
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de6:	d205      	bcs.n	8003df4 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	e001      	b.n	8003df8 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003e14:	7ebb      	ldrb	r3, [r7, #26]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3720      	adds	r7, #32
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	08005a48 	.word	0x08005a48
 8003e24:	00f42400 	.word	0x00f42400

08003e28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01a      	beq.n	8003f3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f26:	d10a      	bne.n	8003f3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	605a      	str	r2, [r3, #4]
  }
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f7c:	f7fd fb4c 	bl	8001618 <HAL_GetTick>
 8003f80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d10e      	bne.n	8003fae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f82f 	bl	8004002 <UART_WaitOnFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e025      	b.n	8003ffa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d10e      	bne.n	8003fda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f819 	bl	8004002 <UART_WaitOnFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e00f      	b.n	8003ffa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b09c      	sub	sp, #112	; 0x70
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	4613      	mov	r3, r2
 8004010:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004012:	e0a9      	b.n	8004168 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800401a:	f000 80a5 	beq.w	8004168 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401e:	f7fd fafb 	bl	8001618 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800402a:	429a      	cmp	r2, r3
 800402c:	d302      	bcc.n	8004034 <UART_WaitOnFlagUntilTimeout+0x32>
 800402e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004030:	2b00      	cmp	r3, #0
 8004032:	d140      	bne.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004044:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004048:	667b      	str	r3, [r7, #100]	; 0x64
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004052:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004054:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004058:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1e6      	bne.n	8004034 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3308      	adds	r3, #8
 800406c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	663b      	str	r3, [r7, #96]	; 0x60
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3308      	adds	r3, #8
 8004084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004086:	64ba      	str	r2, [r7, #72]	; 0x48
 8004088:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800408c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e5      	bne.n	8004066 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e069      	b.n	800418a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d051      	beq.n	8004168 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d2:	d149      	bne.n	8004168 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fc:	637b      	str	r3, [r7, #52]	; 0x34
 80040fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e6      	bne.n	80040de <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	613b      	str	r3, [r7, #16]
   return(result);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	66bb      	str	r3, [r7, #104]	; 0x68
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3308      	adds	r3, #8
 800412e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004130:	623a      	str	r2, [r7, #32]
 8004132:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	69f9      	ldr	r1, [r7, #28]
 8004136:	6a3a      	ldr	r2, [r7, #32]
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	61bb      	str	r3, [r7, #24]
   return(result);
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e5      	bne.n	8004110 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e010      	b.n	800418a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	4013      	ands	r3, r2
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	429a      	cmp	r2, r3
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	461a      	mov	r2, r3
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	429a      	cmp	r2, r3
 8004184:	f43f af46 	beq.w	8004014 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3770      	adds	r7, #112	; 0x70
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_UARTEx_EnableFifoMode+0x16>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e02b      	b.n	8004200 <HAL_UARTEx_EnableFifoMode+0x6e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2224      	movs	r2, #36	; 0x24
 80041b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80041de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f8c3 	bl	8004374 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <HAL_UARTEx_DisableFifoMode+0x16>
 800421a:	2302      	movs	r3, #2
 800421c:	e027      	b.n	800426e <HAL_UARTEx_DisableFifoMode+0x66>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2224      	movs	r2, #36	; 0x24
 800422a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0201 	bic.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800424c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800428e:	2302      	movs	r3, #2
 8004290:	e02d      	b.n	80042ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2224      	movs	r2, #36	; 0x24
 800429e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0201 	bic.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f850 	bl	8004374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800430a:	2302      	movs	r3, #2
 800430c:	e02d      	b.n	800436a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2224      	movs	r2, #36	; 0x24
 800431a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f812 	bl	8004374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004380:	2b00      	cmp	r3, #0
 8004382:	d108      	bne.n	8004396 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004394:	e031      	b.n	80043fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004396:	2308      	movs	r3, #8
 8004398:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800439a:	2308      	movs	r3, #8
 800439c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	0e5b      	lsrs	r3, r3, #25
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	0f5b      	lsrs	r3, r3, #29
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043be:	7bbb      	ldrb	r3, [r7, #14]
 80043c0:	7b3a      	ldrb	r2, [r7, #12]
 80043c2:	4911      	ldr	r1, [pc, #68]	; (8004408 <UARTEx_SetNbDataToProcess+0x94>)
 80043c4:	5c8a      	ldrb	r2, [r1, r2]
 80043c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80043ca:	7b3a      	ldrb	r2, [r7, #12]
 80043cc:	490f      	ldr	r1, [pc, #60]	; (800440c <UARTEx_SetNbDataToProcess+0x98>)
 80043ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	7b7a      	ldrb	r2, [r7, #13]
 80043e0:	4909      	ldr	r1, [pc, #36]	; (8004408 <UARTEx_SetNbDataToProcess+0x94>)
 80043e2:	5c8a      	ldrb	r2, [r1, r2]
 80043e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80043e8:	7b7a      	ldrb	r2, [r7, #13]
 80043ea:	4908      	ldr	r1, [pc, #32]	; (800440c <UARTEx_SetNbDataToProcess+0x98>)
 80043ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80043fa:	bf00      	nop
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	08005a60 	.word	0x08005a60
 800440c:	08005a68 	.word	0x08005a68

08004410 <__errno>:
 8004410:	4b01      	ldr	r3, [pc, #4]	; (8004418 <__errno+0x8>)
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	2000000c 	.word	0x2000000c

0800441c <__libc_init_array>:
 800441c:	b570      	push	{r4, r5, r6, lr}
 800441e:	4d0d      	ldr	r5, [pc, #52]	; (8004454 <__libc_init_array+0x38>)
 8004420:	4c0d      	ldr	r4, [pc, #52]	; (8004458 <__libc_init_array+0x3c>)
 8004422:	1b64      	subs	r4, r4, r5
 8004424:	10a4      	asrs	r4, r4, #2
 8004426:	2600      	movs	r6, #0
 8004428:	42a6      	cmp	r6, r4
 800442a:	d109      	bne.n	8004440 <__libc_init_array+0x24>
 800442c:	4d0b      	ldr	r5, [pc, #44]	; (800445c <__libc_init_array+0x40>)
 800442e:	4c0c      	ldr	r4, [pc, #48]	; (8004460 <__libc_init_array+0x44>)
 8004430:	f001 f9d6 	bl	80057e0 <_init>
 8004434:	1b64      	subs	r4, r4, r5
 8004436:	10a4      	asrs	r4, r4, #2
 8004438:	2600      	movs	r6, #0
 800443a:	42a6      	cmp	r6, r4
 800443c:	d105      	bne.n	800444a <__libc_init_array+0x2e>
 800443e:	bd70      	pop	{r4, r5, r6, pc}
 8004440:	f855 3b04 	ldr.w	r3, [r5], #4
 8004444:	4798      	blx	r3
 8004446:	3601      	adds	r6, #1
 8004448:	e7ee      	b.n	8004428 <__libc_init_array+0xc>
 800444a:	f855 3b04 	ldr.w	r3, [r5], #4
 800444e:	4798      	blx	r3
 8004450:	3601      	adds	r6, #1
 8004452:	e7f2      	b.n	800443a <__libc_init_array+0x1e>
 8004454:	08005b10 	.word	0x08005b10
 8004458:	08005b10 	.word	0x08005b10
 800445c:	08005b10 	.word	0x08005b10
 8004460:	08005b14 	.word	0x08005b14

08004464 <memset>:
 8004464:	4402      	add	r2, r0
 8004466:	4603      	mov	r3, r0
 8004468:	4293      	cmp	r3, r2
 800446a:	d100      	bne.n	800446e <memset+0xa>
 800446c:	4770      	bx	lr
 800446e:	f803 1b01 	strb.w	r1, [r3], #1
 8004472:	e7f9      	b.n	8004468 <memset+0x4>

08004474 <iprintf>:
 8004474:	b40f      	push	{r0, r1, r2, r3}
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <iprintf+0x2c>)
 8004478:	b513      	push	{r0, r1, r4, lr}
 800447a:	681c      	ldr	r4, [r3, #0]
 800447c:	b124      	cbz	r4, 8004488 <iprintf+0x14>
 800447e:	69a3      	ldr	r3, [r4, #24]
 8004480:	b913      	cbnz	r3, 8004488 <iprintf+0x14>
 8004482:	4620      	mov	r0, r4
 8004484:	f000 fa96 	bl	80049b4 <__sinit>
 8004488:	ab05      	add	r3, sp, #20
 800448a:	9a04      	ldr	r2, [sp, #16]
 800448c:	68a1      	ldr	r1, [r4, #8]
 800448e:	9301      	str	r3, [sp, #4]
 8004490:	4620      	mov	r0, r4
 8004492:	f000 fdc3 	bl	800501c <_vfiprintf_r>
 8004496:	b002      	add	sp, #8
 8004498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800449c:	b004      	add	sp, #16
 800449e:	4770      	bx	lr
 80044a0:	2000000c 	.word	0x2000000c

080044a4 <_puts_r>:
 80044a4:	b570      	push	{r4, r5, r6, lr}
 80044a6:	460e      	mov	r6, r1
 80044a8:	4605      	mov	r5, r0
 80044aa:	b118      	cbz	r0, 80044b4 <_puts_r+0x10>
 80044ac:	6983      	ldr	r3, [r0, #24]
 80044ae:	b90b      	cbnz	r3, 80044b4 <_puts_r+0x10>
 80044b0:	f000 fa80 	bl	80049b4 <__sinit>
 80044b4:	69ab      	ldr	r3, [r5, #24]
 80044b6:	68ac      	ldr	r4, [r5, #8]
 80044b8:	b913      	cbnz	r3, 80044c0 <_puts_r+0x1c>
 80044ba:	4628      	mov	r0, r5
 80044bc:	f000 fa7a 	bl	80049b4 <__sinit>
 80044c0:	4b2c      	ldr	r3, [pc, #176]	; (8004574 <_puts_r+0xd0>)
 80044c2:	429c      	cmp	r4, r3
 80044c4:	d120      	bne.n	8004508 <_puts_r+0x64>
 80044c6:	686c      	ldr	r4, [r5, #4]
 80044c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044ca:	07db      	lsls	r3, r3, #31
 80044cc:	d405      	bmi.n	80044da <_puts_r+0x36>
 80044ce:	89a3      	ldrh	r3, [r4, #12]
 80044d0:	0598      	lsls	r0, r3, #22
 80044d2:	d402      	bmi.n	80044da <_puts_r+0x36>
 80044d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044d6:	f000 fb0b 	bl	8004af0 <__retarget_lock_acquire_recursive>
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	0719      	lsls	r1, r3, #28
 80044de:	d51d      	bpl.n	800451c <_puts_r+0x78>
 80044e0:	6923      	ldr	r3, [r4, #16]
 80044e2:	b1db      	cbz	r3, 800451c <_puts_r+0x78>
 80044e4:	3e01      	subs	r6, #1
 80044e6:	68a3      	ldr	r3, [r4, #8]
 80044e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044ec:	3b01      	subs	r3, #1
 80044ee:	60a3      	str	r3, [r4, #8]
 80044f0:	bb39      	cbnz	r1, 8004542 <_puts_r+0x9e>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	da38      	bge.n	8004568 <_puts_r+0xc4>
 80044f6:	4622      	mov	r2, r4
 80044f8:	210a      	movs	r1, #10
 80044fa:	4628      	mov	r0, r5
 80044fc:	f000 f880 	bl	8004600 <__swbuf_r>
 8004500:	3001      	adds	r0, #1
 8004502:	d011      	beq.n	8004528 <_puts_r+0x84>
 8004504:	250a      	movs	r5, #10
 8004506:	e011      	b.n	800452c <_puts_r+0x88>
 8004508:	4b1b      	ldr	r3, [pc, #108]	; (8004578 <_puts_r+0xd4>)
 800450a:	429c      	cmp	r4, r3
 800450c:	d101      	bne.n	8004512 <_puts_r+0x6e>
 800450e:	68ac      	ldr	r4, [r5, #8]
 8004510:	e7da      	b.n	80044c8 <_puts_r+0x24>
 8004512:	4b1a      	ldr	r3, [pc, #104]	; (800457c <_puts_r+0xd8>)
 8004514:	429c      	cmp	r4, r3
 8004516:	bf08      	it	eq
 8004518:	68ec      	ldreq	r4, [r5, #12]
 800451a:	e7d5      	b.n	80044c8 <_puts_r+0x24>
 800451c:	4621      	mov	r1, r4
 800451e:	4628      	mov	r0, r5
 8004520:	f000 f8c0 	bl	80046a4 <__swsetup_r>
 8004524:	2800      	cmp	r0, #0
 8004526:	d0dd      	beq.n	80044e4 <_puts_r+0x40>
 8004528:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800452c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800452e:	07da      	lsls	r2, r3, #31
 8004530:	d405      	bmi.n	800453e <_puts_r+0x9a>
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	059b      	lsls	r3, r3, #22
 8004536:	d402      	bmi.n	800453e <_puts_r+0x9a>
 8004538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800453a:	f000 fada 	bl	8004af2 <__retarget_lock_release_recursive>
 800453e:	4628      	mov	r0, r5
 8004540:	bd70      	pop	{r4, r5, r6, pc}
 8004542:	2b00      	cmp	r3, #0
 8004544:	da04      	bge.n	8004550 <_puts_r+0xac>
 8004546:	69a2      	ldr	r2, [r4, #24]
 8004548:	429a      	cmp	r2, r3
 800454a:	dc06      	bgt.n	800455a <_puts_r+0xb6>
 800454c:	290a      	cmp	r1, #10
 800454e:	d004      	beq.n	800455a <_puts_r+0xb6>
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	6022      	str	r2, [r4, #0]
 8004556:	7019      	strb	r1, [r3, #0]
 8004558:	e7c5      	b.n	80044e6 <_puts_r+0x42>
 800455a:	4622      	mov	r2, r4
 800455c:	4628      	mov	r0, r5
 800455e:	f000 f84f 	bl	8004600 <__swbuf_r>
 8004562:	3001      	adds	r0, #1
 8004564:	d1bf      	bne.n	80044e6 <_puts_r+0x42>
 8004566:	e7df      	b.n	8004528 <_puts_r+0x84>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	250a      	movs	r5, #10
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	6022      	str	r2, [r4, #0]
 8004570:	701d      	strb	r5, [r3, #0]
 8004572:	e7db      	b.n	800452c <_puts_r+0x88>
 8004574:	08005a94 	.word	0x08005a94
 8004578:	08005ab4 	.word	0x08005ab4
 800457c:	08005a74 	.word	0x08005a74

08004580 <puts>:
 8004580:	4b02      	ldr	r3, [pc, #8]	; (800458c <puts+0xc>)
 8004582:	4601      	mov	r1, r0
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	f7ff bf8d 	b.w	80044a4 <_puts_r>
 800458a:	bf00      	nop
 800458c:	2000000c 	.word	0x2000000c

08004590 <siprintf>:
 8004590:	b40e      	push	{r1, r2, r3}
 8004592:	b500      	push	{lr}
 8004594:	b09c      	sub	sp, #112	; 0x70
 8004596:	ab1d      	add	r3, sp, #116	; 0x74
 8004598:	9002      	str	r0, [sp, #8]
 800459a:	9006      	str	r0, [sp, #24]
 800459c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045a0:	4809      	ldr	r0, [pc, #36]	; (80045c8 <siprintf+0x38>)
 80045a2:	9107      	str	r1, [sp, #28]
 80045a4:	9104      	str	r1, [sp, #16]
 80045a6:	4909      	ldr	r1, [pc, #36]	; (80045cc <siprintf+0x3c>)
 80045a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80045ac:	9105      	str	r1, [sp, #20]
 80045ae:	6800      	ldr	r0, [r0, #0]
 80045b0:	9301      	str	r3, [sp, #4]
 80045b2:	a902      	add	r1, sp, #8
 80045b4:	f000 fc08 	bl	8004dc8 <_svfiprintf_r>
 80045b8:	9b02      	ldr	r3, [sp, #8]
 80045ba:	2200      	movs	r2, #0
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	b01c      	add	sp, #112	; 0x70
 80045c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80045c4:	b003      	add	sp, #12
 80045c6:	4770      	bx	lr
 80045c8:	2000000c 	.word	0x2000000c
 80045cc:	ffff0208 	.word	0xffff0208

080045d0 <strstr>:
 80045d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045d2:	780c      	ldrb	r4, [r1, #0]
 80045d4:	b164      	cbz	r4, 80045f0 <strstr+0x20>
 80045d6:	4603      	mov	r3, r0
 80045d8:	781a      	ldrb	r2, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	1c5e      	adds	r6, r3, #1
 80045de:	b90a      	cbnz	r2, 80045e4 <strstr+0x14>
 80045e0:	4610      	mov	r0, r2
 80045e2:	e005      	b.n	80045f0 <strstr+0x20>
 80045e4:	4294      	cmp	r4, r2
 80045e6:	d108      	bne.n	80045fa <strstr+0x2a>
 80045e8:	460d      	mov	r5, r1
 80045ea:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80045ee:	b902      	cbnz	r2, 80045f2 <strstr+0x22>
 80045f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80045f6:	4297      	cmp	r7, r2
 80045f8:	d0f7      	beq.n	80045ea <strstr+0x1a>
 80045fa:	4633      	mov	r3, r6
 80045fc:	e7ec      	b.n	80045d8 <strstr+0x8>
	...

08004600 <__swbuf_r>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	460e      	mov	r6, r1
 8004604:	4614      	mov	r4, r2
 8004606:	4605      	mov	r5, r0
 8004608:	b118      	cbz	r0, 8004612 <__swbuf_r+0x12>
 800460a:	6983      	ldr	r3, [r0, #24]
 800460c:	b90b      	cbnz	r3, 8004612 <__swbuf_r+0x12>
 800460e:	f000 f9d1 	bl	80049b4 <__sinit>
 8004612:	4b21      	ldr	r3, [pc, #132]	; (8004698 <__swbuf_r+0x98>)
 8004614:	429c      	cmp	r4, r3
 8004616:	d12b      	bne.n	8004670 <__swbuf_r+0x70>
 8004618:	686c      	ldr	r4, [r5, #4]
 800461a:	69a3      	ldr	r3, [r4, #24]
 800461c:	60a3      	str	r3, [r4, #8]
 800461e:	89a3      	ldrh	r3, [r4, #12]
 8004620:	071a      	lsls	r2, r3, #28
 8004622:	d52f      	bpl.n	8004684 <__swbuf_r+0x84>
 8004624:	6923      	ldr	r3, [r4, #16]
 8004626:	b36b      	cbz	r3, 8004684 <__swbuf_r+0x84>
 8004628:	6923      	ldr	r3, [r4, #16]
 800462a:	6820      	ldr	r0, [r4, #0]
 800462c:	1ac0      	subs	r0, r0, r3
 800462e:	6963      	ldr	r3, [r4, #20]
 8004630:	b2f6      	uxtb	r6, r6
 8004632:	4283      	cmp	r3, r0
 8004634:	4637      	mov	r7, r6
 8004636:	dc04      	bgt.n	8004642 <__swbuf_r+0x42>
 8004638:	4621      	mov	r1, r4
 800463a:	4628      	mov	r0, r5
 800463c:	f000 f926 	bl	800488c <_fflush_r>
 8004640:	bb30      	cbnz	r0, 8004690 <__swbuf_r+0x90>
 8004642:	68a3      	ldr	r3, [r4, #8]
 8004644:	3b01      	subs	r3, #1
 8004646:	60a3      	str	r3, [r4, #8]
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	6022      	str	r2, [r4, #0]
 800464e:	701e      	strb	r6, [r3, #0]
 8004650:	6963      	ldr	r3, [r4, #20]
 8004652:	3001      	adds	r0, #1
 8004654:	4283      	cmp	r3, r0
 8004656:	d004      	beq.n	8004662 <__swbuf_r+0x62>
 8004658:	89a3      	ldrh	r3, [r4, #12]
 800465a:	07db      	lsls	r3, r3, #31
 800465c:	d506      	bpl.n	800466c <__swbuf_r+0x6c>
 800465e:	2e0a      	cmp	r6, #10
 8004660:	d104      	bne.n	800466c <__swbuf_r+0x6c>
 8004662:	4621      	mov	r1, r4
 8004664:	4628      	mov	r0, r5
 8004666:	f000 f911 	bl	800488c <_fflush_r>
 800466a:	b988      	cbnz	r0, 8004690 <__swbuf_r+0x90>
 800466c:	4638      	mov	r0, r7
 800466e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004670:	4b0a      	ldr	r3, [pc, #40]	; (800469c <__swbuf_r+0x9c>)
 8004672:	429c      	cmp	r4, r3
 8004674:	d101      	bne.n	800467a <__swbuf_r+0x7a>
 8004676:	68ac      	ldr	r4, [r5, #8]
 8004678:	e7cf      	b.n	800461a <__swbuf_r+0x1a>
 800467a:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <__swbuf_r+0xa0>)
 800467c:	429c      	cmp	r4, r3
 800467e:	bf08      	it	eq
 8004680:	68ec      	ldreq	r4, [r5, #12]
 8004682:	e7ca      	b.n	800461a <__swbuf_r+0x1a>
 8004684:	4621      	mov	r1, r4
 8004686:	4628      	mov	r0, r5
 8004688:	f000 f80c 	bl	80046a4 <__swsetup_r>
 800468c:	2800      	cmp	r0, #0
 800468e:	d0cb      	beq.n	8004628 <__swbuf_r+0x28>
 8004690:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004694:	e7ea      	b.n	800466c <__swbuf_r+0x6c>
 8004696:	bf00      	nop
 8004698:	08005a94 	.word	0x08005a94
 800469c:	08005ab4 	.word	0x08005ab4
 80046a0:	08005a74 	.word	0x08005a74

080046a4 <__swsetup_r>:
 80046a4:	4b32      	ldr	r3, [pc, #200]	; (8004770 <__swsetup_r+0xcc>)
 80046a6:	b570      	push	{r4, r5, r6, lr}
 80046a8:	681d      	ldr	r5, [r3, #0]
 80046aa:	4606      	mov	r6, r0
 80046ac:	460c      	mov	r4, r1
 80046ae:	b125      	cbz	r5, 80046ba <__swsetup_r+0x16>
 80046b0:	69ab      	ldr	r3, [r5, #24]
 80046b2:	b913      	cbnz	r3, 80046ba <__swsetup_r+0x16>
 80046b4:	4628      	mov	r0, r5
 80046b6:	f000 f97d 	bl	80049b4 <__sinit>
 80046ba:	4b2e      	ldr	r3, [pc, #184]	; (8004774 <__swsetup_r+0xd0>)
 80046bc:	429c      	cmp	r4, r3
 80046be:	d10f      	bne.n	80046e0 <__swsetup_r+0x3c>
 80046c0:	686c      	ldr	r4, [r5, #4]
 80046c2:	89a3      	ldrh	r3, [r4, #12]
 80046c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046c8:	0719      	lsls	r1, r3, #28
 80046ca:	d42c      	bmi.n	8004726 <__swsetup_r+0x82>
 80046cc:	06dd      	lsls	r5, r3, #27
 80046ce:	d411      	bmi.n	80046f4 <__swsetup_r+0x50>
 80046d0:	2309      	movs	r3, #9
 80046d2:	6033      	str	r3, [r6, #0]
 80046d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046d8:	81a3      	strh	r3, [r4, #12]
 80046da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046de:	e03e      	b.n	800475e <__swsetup_r+0xba>
 80046e0:	4b25      	ldr	r3, [pc, #148]	; (8004778 <__swsetup_r+0xd4>)
 80046e2:	429c      	cmp	r4, r3
 80046e4:	d101      	bne.n	80046ea <__swsetup_r+0x46>
 80046e6:	68ac      	ldr	r4, [r5, #8]
 80046e8:	e7eb      	b.n	80046c2 <__swsetup_r+0x1e>
 80046ea:	4b24      	ldr	r3, [pc, #144]	; (800477c <__swsetup_r+0xd8>)
 80046ec:	429c      	cmp	r4, r3
 80046ee:	bf08      	it	eq
 80046f0:	68ec      	ldreq	r4, [r5, #12]
 80046f2:	e7e6      	b.n	80046c2 <__swsetup_r+0x1e>
 80046f4:	0758      	lsls	r0, r3, #29
 80046f6:	d512      	bpl.n	800471e <__swsetup_r+0x7a>
 80046f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046fa:	b141      	cbz	r1, 800470e <__swsetup_r+0x6a>
 80046fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004700:	4299      	cmp	r1, r3
 8004702:	d002      	beq.n	800470a <__swsetup_r+0x66>
 8004704:	4630      	mov	r0, r6
 8004706:	f000 fa59 	bl	8004bbc <_free_r>
 800470a:	2300      	movs	r3, #0
 800470c:	6363      	str	r3, [r4, #52]	; 0x34
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004714:	81a3      	strh	r3, [r4, #12]
 8004716:	2300      	movs	r3, #0
 8004718:	6063      	str	r3, [r4, #4]
 800471a:	6923      	ldr	r3, [r4, #16]
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	f043 0308 	orr.w	r3, r3, #8
 8004724:	81a3      	strh	r3, [r4, #12]
 8004726:	6923      	ldr	r3, [r4, #16]
 8004728:	b94b      	cbnz	r3, 800473e <__swsetup_r+0x9a>
 800472a:	89a3      	ldrh	r3, [r4, #12]
 800472c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004734:	d003      	beq.n	800473e <__swsetup_r+0x9a>
 8004736:	4621      	mov	r1, r4
 8004738:	4630      	mov	r0, r6
 800473a:	f000 f9ff 	bl	8004b3c <__smakebuf_r>
 800473e:	89a0      	ldrh	r0, [r4, #12]
 8004740:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004744:	f010 0301 	ands.w	r3, r0, #1
 8004748:	d00a      	beq.n	8004760 <__swsetup_r+0xbc>
 800474a:	2300      	movs	r3, #0
 800474c:	60a3      	str	r3, [r4, #8]
 800474e:	6963      	ldr	r3, [r4, #20]
 8004750:	425b      	negs	r3, r3
 8004752:	61a3      	str	r3, [r4, #24]
 8004754:	6923      	ldr	r3, [r4, #16]
 8004756:	b943      	cbnz	r3, 800476a <__swsetup_r+0xc6>
 8004758:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800475c:	d1ba      	bne.n	80046d4 <__swsetup_r+0x30>
 800475e:	bd70      	pop	{r4, r5, r6, pc}
 8004760:	0781      	lsls	r1, r0, #30
 8004762:	bf58      	it	pl
 8004764:	6963      	ldrpl	r3, [r4, #20]
 8004766:	60a3      	str	r3, [r4, #8]
 8004768:	e7f4      	b.n	8004754 <__swsetup_r+0xb0>
 800476a:	2000      	movs	r0, #0
 800476c:	e7f7      	b.n	800475e <__swsetup_r+0xba>
 800476e:	bf00      	nop
 8004770:	2000000c 	.word	0x2000000c
 8004774:	08005a94 	.word	0x08005a94
 8004778:	08005ab4 	.word	0x08005ab4
 800477c:	08005a74 	.word	0x08005a74

08004780 <__sflush_r>:
 8004780:	898a      	ldrh	r2, [r1, #12]
 8004782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004786:	4605      	mov	r5, r0
 8004788:	0710      	lsls	r0, r2, #28
 800478a:	460c      	mov	r4, r1
 800478c:	d458      	bmi.n	8004840 <__sflush_r+0xc0>
 800478e:	684b      	ldr	r3, [r1, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	dc05      	bgt.n	80047a0 <__sflush_r+0x20>
 8004794:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	dc02      	bgt.n	80047a0 <__sflush_r+0x20>
 800479a:	2000      	movs	r0, #0
 800479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047a2:	2e00      	cmp	r6, #0
 80047a4:	d0f9      	beq.n	800479a <__sflush_r+0x1a>
 80047a6:	2300      	movs	r3, #0
 80047a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047ac:	682f      	ldr	r7, [r5, #0]
 80047ae:	602b      	str	r3, [r5, #0]
 80047b0:	d032      	beq.n	8004818 <__sflush_r+0x98>
 80047b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047b4:	89a3      	ldrh	r3, [r4, #12]
 80047b6:	075a      	lsls	r2, r3, #29
 80047b8:	d505      	bpl.n	80047c6 <__sflush_r+0x46>
 80047ba:	6863      	ldr	r3, [r4, #4]
 80047bc:	1ac0      	subs	r0, r0, r3
 80047be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047c0:	b10b      	cbz	r3, 80047c6 <__sflush_r+0x46>
 80047c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047c4:	1ac0      	subs	r0, r0, r3
 80047c6:	2300      	movs	r3, #0
 80047c8:	4602      	mov	r2, r0
 80047ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047cc:	6a21      	ldr	r1, [r4, #32]
 80047ce:	4628      	mov	r0, r5
 80047d0:	47b0      	blx	r6
 80047d2:	1c43      	adds	r3, r0, #1
 80047d4:	89a3      	ldrh	r3, [r4, #12]
 80047d6:	d106      	bne.n	80047e6 <__sflush_r+0x66>
 80047d8:	6829      	ldr	r1, [r5, #0]
 80047da:	291d      	cmp	r1, #29
 80047dc:	d82c      	bhi.n	8004838 <__sflush_r+0xb8>
 80047de:	4a2a      	ldr	r2, [pc, #168]	; (8004888 <__sflush_r+0x108>)
 80047e0:	40ca      	lsrs	r2, r1
 80047e2:	07d6      	lsls	r6, r2, #31
 80047e4:	d528      	bpl.n	8004838 <__sflush_r+0xb8>
 80047e6:	2200      	movs	r2, #0
 80047e8:	6062      	str	r2, [r4, #4]
 80047ea:	04d9      	lsls	r1, r3, #19
 80047ec:	6922      	ldr	r2, [r4, #16]
 80047ee:	6022      	str	r2, [r4, #0]
 80047f0:	d504      	bpl.n	80047fc <__sflush_r+0x7c>
 80047f2:	1c42      	adds	r2, r0, #1
 80047f4:	d101      	bne.n	80047fa <__sflush_r+0x7a>
 80047f6:	682b      	ldr	r3, [r5, #0]
 80047f8:	b903      	cbnz	r3, 80047fc <__sflush_r+0x7c>
 80047fa:	6560      	str	r0, [r4, #84]	; 0x54
 80047fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047fe:	602f      	str	r7, [r5, #0]
 8004800:	2900      	cmp	r1, #0
 8004802:	d0ca      	beq.n	800479a <__sflush_r+0x1a>
 8004804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004808:	4299      	cmp	r1, r3
 800480a:	d002      	beq.n	8004812 <__sflush_r+0x92>
 800480c:	4628      	mov	r0, r5
 800480e:	f000 f9d5 	bl	8004bbc <_free_r>
 8004812:	2000      	movs	r0, #0
 8004814:	6360      	str	r0, [r4, #52]	; 0x34
 8004816:	e7c1      	b.n	800479c <__sflush_r+0x1c>
 8004818:	6a21      	ldr	r1, [r4, #32]
 800481a:	2301      	movs	r3, #1
 800481c:	4628      	mov	r0, r5
 800481e:	47b0      	blx	r6
 8004820:	1c41      	adds	r1, r0, #1
 8004822:	d1c7      	bne.n	80047b4 <__sflush_r+0x34>
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0c4      	beq.n	80047b4 <__sflush_r+0x34>
 800482a:	2b1d      	cmp	r3, #29
 800482c:	d001      	beq.n	8004832 <__sflush_r+0xb2>
 800482e:	2b16      	cmp	r3, #22
 8004830:	d101      	bne.n	8004836 <__sflush_r+0xb6>
 8004832:	602f      	str	r7, [r5, #0]
 8004834:	e7b1      	b.n	800479a <__sflush_r+0x1a>
 8004836:	89a3      	ldrh	r3, [r4, #12]
 8004838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800483c:	81a3      	strh	r3, [r4, #12]
 800483e:	e7ad      	b.n	800479c <__sflush_r+0x1c>
 8004840:	690f      	ldr	r7, [r1, #16]
 8004842:	2f00      	cmp	r7, #0
 8004844:	d0a9      	beq.n	800479a <__sflush_r+0x1a>
 8004846:	0793      	lsls	r3, r2, #30
 8004848:	680e      	ldr	r6, [r1, #0]
 800484a:	bf08      	it	eq
 800484c:	694b      	ldreq	r3, [r1, #20]
 800484e:	600f      	str	r7, [r1, #0]
 8004850:	bf18      	it	ne
 8004852:	2300      	movne	r3, #0
 8004854:	eba6 0807 	sub.w	r8, r6, r7
 8004858:	608b      	str	r3, [r1, #8]
 800485a:	f1b8 0f00 	cmp.w	r8, #0
 800485e:	dd9c      	ble.n	800479a <__sflush_r+0x1a>
 8004860:	6a21      	ldr	r1, [r4, #32]
 8004862:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004864:	4643      	mov	r3, r8
 8004866:	463a      	mov	r2, r7
 8004868:	4628      	mov	r0, r5
 800486a:	47b0      	blx	r6
 800486c:	2800      	cmp	r0, #0
 800486e:	dc06      	bgt.n	800487e <__sflush_r+0xfe>
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004876:	81a3      	strh	r3, [r4, #12]
 8004878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800487c:	e78e      	b.n	800479c <__sflush_r+0x1c>
 800487e:	4407      	add	r7, r0
 8004880:	eba8 0800 	sub.w	r8, r8, r0
 8004884:	e7e9      	b.n	800485a <__sflush_r+0xda>
 8004886:	bf00      	nop
 8004888:	20400001 	.word	0x20400001

0800488c <_fflush_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	690b      	ldr	r3, [r1, #16]
 8004890:	4605      	mov	r5, r0
 8004892:	460c      	mov	r4, r1
 8004894:	b913      	cbnz	r3, 800489c <_fflush_r+0x10>
 8004896:	2500      	movs	r5, #0
 8004898:	4628      	mov	r0, r5
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	b118      	cbz	r0, 80048a6 <_fflush_r+0x1a>
 800489e:	6983      	ldr	r3, [r0, #24]
 80048a0:	b90b      	cbnz	r3, 80048a6 <_fflush_r+0x1a>
 80048a2:	f000 f887 	bl	80049b4 <__sinit>
 80048a6:	4b14      	ldr	r3, [pc, #80]	; (80048f8 <_fflush_r+0x6c>)
 80048a8:	429c      	cmp	r4, r3
 80048aa:	d11b      	bne.n	80048e4 <_fflush_r+0x58>
 80048ac:	686c      	ldr	r4, [r5, #4]
 80048ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0ef      	beq.n	8004896 <_fflush_r+0xa>
 80048b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048b8:	07d0      	lsls	r0, r2, #31
 80048ba:	d404      	bmi.n	80048c6 <_fflush_r+0x3a>
 80048bc:	0599      	lsls	r1, r3, #22
 80048be:	d402      	bmi.n	80048c6 <_fflush_r+0x3a>
 80048c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048c2:	f000 f915 	bl	8004af0 <__retarget_lock_acquire_recursive>
 80048c6:	4628      	mov	r0, r5
 80048c8:	4621      	mov	r1, r4
 80048ca:	f7ff ff59 	bl	8004780 <__sflush_r>
 80048ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048d0:	07da      	lsls	r2, r3, #31
 80048d2:	4605      	mov	r5, r0
 80048d4:	d4e0      	bmi.n	8004898 <_fflush_r+0xc>
 80048d6:	89a3      	ldrh	r3, [r4, #12]
 80048d8:	059b      	lsls	r3, r3, #22
 80048da:	d4dd      	bmi.n	8004898 <_fflush_r+0xc>
 80048dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048de:	f000 f908 	bl	8004af2 <__retarget_lock_release_recursive>
 80048e2:	e7d9      	b.n	8004898 <_fflush_r+0xc>
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <_fflush_r+0x70>)
 80048e6:	429c      	cmp	r4, r3
 80048e8:	d101      	bne.n	80048ee <_fflush_r+0x62>
 80048ea:	68ac      	ldr	r4, [r5, #8]
 80048ec:	e7df      	b.n	80048ae <_fflush_r+0x22>
 80048ee:	4b04      	ldr	r3, [pc, #16]	; (8004900 <_fflush_r+0x74>)
 80048f0:	429c      	cmp	r4, r3
 80048f2:	bf08      	it	eq
 80048f4:	68ec      	ldreq	r4, [r5, #12]
 80048f6:	e7da      	b.n	80048ae <_fflush_r+0x22>
 80048f8:	08005a94 	.word	0x08005a94
 80048fc:	08005ab4 	.word	0x08005ab4
 8004900:	08005a74 	.word	0x08005a74

08004904 <std>:
 8004904:	2300      	movs	r3, #0
 8004906:	b510      	push	{r4, lr}
 8004908:	4604      	mov	r4, r0
 800490a:	e9c0 3300 	strd	r3, r3, [r0]
 800490e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004912:	6083      	str	r3, [r0, #8]
 8004914:	8181      	strh	r1, [r0, #12]
 8004916:	6643      	str	r3, [r0, #100]	; 0x64
 8004918:	81c2      	strh	r2, [r0, #14]
 800491a:	6183      	str	r3, [r0, #24]
 800491c:	4619      	mov	r1, r3
 800491e:	2208      	movs	r2, #8
 8004920:	305c      	adds	r0, #92	; 0x5c
 8004922:	f7ff fd9f 	bl	8004464 <memset>
 8004926:	4b05      	ldr	r3, [pc, #20]	; (800493c <std+0x38>)
 8004928:	6263      	str	r3, [r4, #36]	; 0x24
 800492a:	4b05      	ldr	r3, [pc, #20]	; (8004940 <std+0x3c>)
 800492c:	62a3      	str	r3, [r4, #40]	; 0x28
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <std+0x40>)
 8004930:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004932:	4b05      	ldr	r3, [pc, #20]	; (8004948 <std+0x44>)
 8004934:	6224      	str	r4, [r4, #32]
 8004936:	6323      	str	r3, [r4, #48]	; 0x30
 8004938:	bd10      	pop	{r4, pc}
 800493a:	bf00      	nop
 800493c:	080055c5 	.word	0x080055c5
 8004940:	080055e7 	.word	0x080055e7
 8004944:	0800561f 	.word	0x0800561f
 8004948:	08005643 	.word	0x08005643

0800494c <_cleanup_r>:
 800494c:	4901      	ldr	r1, [pc, #4]	; (8004954 <_cleanup_r+0x8>)
 800494e:	f000 b8af 	b.w	8004ab0 <_fwalk_reent>
 8004952:	bf00      	nop
 8004954:	0800488d 	.word	0x0800488d

08004958 <__sfmoreglue>:
 8004958:	b570      	push	{r4, r5, r6, lr}
 800495a:	1e4a      	subs	r2, r1, #1
 800495c:	2568      	movs	r5, #104	; 0x68
 800495e:	4355      	muls	r5, r2
 8004960:	460e      	mov	r6, r1
 8004962:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004966:	f000 f979 	bl	8004c5c <_malloc_r>
 800496a:	4604      	mov	r4, r0
 800496c:	b140      	cbz	r0, 8004980 <__sfmoreglue+0x28>
 800496e:	2100      	movs	r1, #0
 8004970:	e9c0 1600 	strd	r1, r6, [r0]
 8004974:	300c      	adds	r0, #12
 8004976:	60a0      	str	r0, [r4, #8]
 8004978:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800497c:	f7ff fd72 	bl	8004464 <memset>
 8004980:	4620      	mov	r0, r4
 8004982:	bd70      	pop	{r4, r5, r6, pc}

08004984 <__sfp_lock_acquire>:
 8004984:	4801      	ldr	r0, [pc, #4]	; (800498c <__sfp_lock_acquire+0x8>)
 8004986:	f000 b8b3 	b.w	8004af0 <__retarget_lock_acquire_recursive>
 800498a:	bf00      	nop
 800498c:	200005c4 	.word	0x200005c4

08004990 <__sfp_lock_release>:
 8004990:	4801      	ldr	r0, [pc, #4]	; (8004998 <__sfp_lock_release+0x8>)
 8004992:	f000 b8ae 	b.w	8004af2 <__retarget_lock_release_recursive>
 8004996:	bf00      	nop
 8004998:	200005c4 	.word	0x200005c4

0800499c <__sinit_lock_acquire>:
 800499c:	4801      	ldr	r0, [pc, #4]	; (80049a4 <__sinit_lock_acquire+0x8>)
 800499e:	f000 b8a7 	b.w	8004af0 <__retarget_lock_acquire_recursive>
 80049a2:	bf00      	nop
 80049a4:	200005bf 	.word	0x200005bf

080049a8 <__sinit_lock_release>:
 80049a8:	4801      	ldr	r0, [pc, #4]	; (80049b0 <__sinit_lock_release+0x8>)
 80049aa:	f000 b8a2 	b.w	8004af2 <__retarget_lock_release_recursive>
 80049ae:	bf00      	nop
 80049b0:	200005bf 	.word	0x200005bf

080049b4 <__sinit>:
 80049b4:	b510      	push	{r4, lr}
 80049b6:	4604      	mov	r4, r0
 80049b8:	f7ff fff0 	bl	800499c <__sinit_lock_acquire>
 80049bc:	69a3      	ldr	r3, [r4, #24]
 80049be:	b11b      	cbz	r3, 80049c8 <__sinit+0x14>
 80049c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049c4:	f7ff bff0 	b.w	80049a8 <__sinit_lock_release>
 80049c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049cc:	6523      	str	r3, [r4, #80]	; 0x50
 80049ce:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <__sinit+0x68>)
 80049d0:	4a13      	ldr	r2, [pc, #76]	; (8004a20 <__sinit+0x6c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80049d6:	42a3      	cmp	r3, r4
 80049d8:	bf04      	itt	eq
 80049da:	2301      	moveq	r3, #1
 80049dc:	61a3      	streq	r3, [r4, #24]
 80049de:	4620      	mov	r0, r4
 80049e0:	f000 f820 	bl	8004a24 <__sfp>
 80049e4:	6060      	str	r0, [r4, #4]
 80049e6:	4620      	mov	r0, r4
 80049e8:	f000 f81c 	bl	8004a24 <__sfp>
 80049ec:	60a0      	str	r0, [r4, #8]
 80049ee:	4620      	mov	r0, r4
 80049f0:	f000 f818 	bl	8004a24 <__sfp>
 80049f4:	2200      	movs	r2, #0
 80049f6:	60e0      	str	r0, [r4, #12]
 80049f8:	2104      	movs	r1, #4
 80049fa:	6860      	ldr	r0, [r4, #4]
 80049fc:	f7ff ff82 	bl	8004904 <std>
 8004a00:	68a0      	ldr	r0, [r4, #8]
 8004a02:	2201      	movs	r2, #1
 8004a04:	2109      	movs	r1, #9
 8004a06:	f7ff ff7d 	bl	8004904 <std>
 8004a0a:	68e0      	ldr	r0, [r4, #12]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	2112      	movs	r1, #18
 8004a10:	f7ff ff78 	bl	8004904 <std>
 8004a14:	2301      	movs	r3, #1
 8004a16:	61a3      	str	r3, [r4, #24]
 8004a18:	e7d2      	b.n	80049c0 <__sinit+0xc>
 8004a1a:	bf00      	nop
 8004a1c:	08005a70 	.word	0x08005a70
 8004a20:	0800494d 	.word	0x0800494d

08004a24 <__sfp>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	4607      	mov	r7, r0
 8004a28:	f7ff ffac 	bl	8004984 <__sfp_lock_acquire>
 8004a2c:	4b1e      	ldr	r3, [pc, #120]	; (8004aa8 <__sfp+0x84>)
 8004a2e:	681e      	ldr	r6, [r3, #0]
 8004a30:	69b3      	ldr	r3, [r6, #24]
 8004a32:	b913      	cbnz	r3, 8004a3a <__sfp+0x16>
 8004a34:	4630      	mov	r0, r6
 8004a36:	f7ff ffbd 	bl	80049b4 <__sinit>
 8004a3a:	3648      	adds	r6, #72	; 0x48
 8004a3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	d503      	bpl.n	8004a4c <__sfp+0x28>
 8004a44:	6833      	ldr	r3, [r6, #0]
 8004a46:	b30b      	cbz	r3, 8004a8c <__sfp+0x68>
 8004a48:	6836      	ldr	r6, [r6, #0]
 8004a4a:	e7f7      	b.n	8004a3c <__sfp+0x18>
 8004a4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a50:	b9d5      	cbnz	r5, 8004a88 <__sfp+0x64>
 8004a52:	4b16      	ldr	r3, [pc, #88]	; (8004aac <__sfp+0x88>)
 8004a54:	60e3      	str	r3, [r4, #12]
 8004a56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a5a:	6665      	str	r5, [r4, #100]	; 0x64
 8004a5c:	f000 f847 	bl	8004aee <__retarget_lock_init_recursive>
 8004a60:	f7ff ff96 	bl	8004990 <__sfp_lock_release>
 8004a64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a6c:	6025      	str	r5, [r4, #0]
 8004a6e:	61a5      	str	r5, [r4, #24]
 8004a70:	2208      	movs	r2, #8
 8004a72:	4629      	mov	r1, r5
 8004a74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a78:	f7ff fcf4 	bl	8004464 <memset>
 8004a7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a84:	4620      	mov	r0, r4
 8004a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a88:	3468      	adds	r4, #104	; 0x68
 8004a8a:	e7d9      	b.n	8004a40 <__sfp+0x1c>
 8004a8c:	2104      	movs	r1, #4
 8004a8e:	4638      	mov	r0, r7
 8004a90:	f7ff ff62 	bl	8004958 <__sfmoreglue>
 8004a94:	4604      	mov	r4, r0
 8004a96:	6030      	str	r0, [r6, #0]
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d1d5      	bne.n	8004a48 <__sfp+0x24>
 8004a9c:	f7ff ff78 	bl	8004990 <__sfp_lock_release>
 8004aa0:	230c      	movs	r3, #12
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	e7ee      	b.n	8004a84 <__sfp+0x60>
 8004aa6:	bf00      	nop
 8004aa8:	08005a70 	.word	0x08005a70
 8004aac:	ffff0001 	.word	0xffff0001

08004ab0 <_fwalk_reent>:
 8004ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ab4:	4606      	mov	r6, r0
 8004ab6:	4688      	mov	r8, r1
 8004ab8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004abc:	2700      	movs	r7, #0
 8004abe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ac2:	f1b9 0901 	subs.w	r9, r9, #1
 8004ac6:	d505      	bpl.n	8004ad4 <_fwalk_reent+0x24>
 8004ac8:	6824      	ldr	r4, [r4, #0]
 8004aca:	2c00      	cmp	r4, #0
 8004acc:	d1f7      	bne.n	8004abe <_fwalk_reent+0xe>
 8004ace:	4638      	mov	r0, r7
 8004ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ad4:	89ab      	ldrh	r3, [r5, #12]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d907      	bls.n	8004aea <_fwalk_reent+0x3a>
 8004ada:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	d003      	beq.n	8004aea <_fwalk_reent+0x3a>
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	47c0      	blx	r8
 8004ae8:	4307      	orrs	r7, r0
 8004aea:	3568      	adds	r5, #104	; 0x68
 8004aec:	e7e9      	b.n	8004ac2 <_fwalk_reent+0x12>

08004aee <__retarget_lock_init_recursive>:
 8004aee:	4770      	bx	lr

08004af0 <__retarget_lock_acquire_recursive>:
 8004af0:	4770      	bx	lr

08004af2 <__retarget_lock_release_recursive>:
 8004af2:	4770      	bx	lr

08004af4 <__swhatbuf_r>:
 8004af4:	b570      	push	{r4, r5, r6, lr}
 8004af6:	460e      	mov	r6, r1
 8004af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004afc:	2900      	cmp	r1, #0
 8004afe:	b096      	sub	sp, #88	; 0x58
 8004b00:	4614      	mov	r4, r2
 8004b02:	461d      	mov	r5, r3
 8004b04:	da07      	bge.n	8004b16 <__swhatbuf_r+0x22>
 8004b06:	2300      	movs	r3, #0
 8004b08:	602b      	str	r3, [r5, #0]
 8004b0a:	89b3      	ldrh	r3, [r6, #12]
 8004b0c:	061a      	lsls	r2, r3, #24
 8004b0e:	d410      	bmi.n	8004b32 <__swhatbuf_r+0x3e>
 8004b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b14:	e00e      	b.n	8004b34 <__swhatbuf_r+0x40>
 8004b16:	466a      	mov	r2, sp
 8004b18:	f000 fdba 	bl	8005690 <_fstat_r>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	dbf2      	blt.n	8004b06 <__swhatbuf_r+0x12>
 8004b20:	9a01      	ldr	r2, [sp, #4]
 8004b22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b2a:	425a      	negs	r2, r3
 8004b2c:	415a      	adcs	r2, r3
 8004b2e:	602a      	str	r2, [r5, #0]
 8004b30:	e7ee      	b.n	8004b10 <__swhatbuf_r+0x1c>
 8004b32:	2340      	movs	r3, #64	; 0x40
 8004b34:	2000      	movs	r0, #0
 8004b36:	6023      	str	r3, [r4, #0]
 8004b38:	b016      	add	sp, #88	; 0x58
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}

08004b3c <__smakebuf_r>:
 8004b3c:	898b      	ldrh	r3, [r1, #12]
 8004b3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b40:	079d      	lsls	r5, r3, #30
 8004b42:	4606      	mov	r6, r0
 8004b44:	460c      	mov	r4, r1
 8004b46:	d507      	bpl.n	8004b58 <__smakebuf_r+0x1c>
 8004b48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	6123      	str	r3, [r4, #16]
 8004b50:	2301      	movs	r3, #1
 8004b52:	6163      	str	r3, [r4, #20]
 8004b54:	b002      	add	sp, #8
 8004b56:	bd70      	pop	{r4, r5, r6, pc}
 8004b58:	ab01      	add	r3, sp, #4
 8004b5a:	466a      	mov	r2, sp
 8004b5c:	f7ff ffca 	bl	8004af4 <__swhatbuf_r>
 8004b60:	9900      	ldr	r1, [sp, #0]
 8004b62:	4605      	mov	r5, r0
 8004b64:	4630      	mov	r0, r6
 8004b66:	f000 f879 	bl	8004c5c <_malloc_r>
 8004b6a:	b948      	cbnz	r0, 8004b80 <__smakebuf_r+0x44>
 8004b6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b70:	059a      	lsls	r2, r3, #22
 8004b72:	d4ef      	bmi.n	8004b54 <__smakebuf_r+0x18>
 8004b74:	f023 0303 	bic.w	r3, r3, #3
 8004b78:	f043 0302 	orr.w	r3, r3, #2
 8004b7c:	81a3      	strh	r3, [r4, #12]
 8004b7e:	e7e3      	b.n	8004b48 <__smakebuf_r+0xc>
 8004b80:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <__smakebuf_r+0x7c>)
 8004b82:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	6020      	str	r0, [r4, #0]
 8004b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8c:	81a3      	strh	r3, [r4, #12]
 8004b8e:	9b00      	ldr	r3, [sp, #0]
 8004b90:	6163      	str	r3, [r4, #20]
 8004b92:	9b01      	ldr	r3, [sp, #4]
 8004b94:	6120      	str	r0, [r4, #16]
 8004b96:	b15b      	cbz	r3, 8004bb0 <__smakebuf_r+0x74>
 8004b98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b9c:	4630      	mov	r0, r6
 8004b9e:	f000 fd89 	bl	80056b4 <_isatty_r>
 8004ba2:	b128      	cbz	r0, 8004bb0 <__smakebuf_r+0x74>
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	f023 0303 	bic.w	r3, r3, #3
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	81a3      	strh	r3, [r4, #12]
 8004bb0:	89a0      	ldrh	r0, [r4, #12]
 8004bb2:	4305      	orrs	r5, r0
 8004bb4:	81a5      	strh	r5, [r4, #12]
 8004bb6:	e7cd      	b.n	8004b54 <__smakebuf_r+0x18>
 8004bb8:	0800494d 	.word	0x0800494d

08004bbc <_free_r>:
 8004bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bbe:	2900      	cmp	r1, #0
 8004bc0:	d048      	beq.n	8004c54 <_free_r+0x98>
 8004bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bc6:	9001      	str	r0, [sp, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f1a1 0404 	sub.w	r4, r1, #4
 8004bce:	bfb8      	it	lt
 8004bd0:	18e4      	addlt	r4, r4, r3
 8004bd2:	f000 fdb9 	bl	8005748 <__malloc_lock>
 8004bd6:	4a20      	ldr	r2, [pc, #128]	; (8004c58 <_free_r+0x9c>)
 8004bd8:	9801      	ldr	r0, [sp, #4]
 8004bda:	6813      	ldr	r3, [r2, #0]
 8004bdc:	4615      	mov	r5, r2
 8004bde:	b933      	cbnz	r3, 8004bee <_free_r+0x32>
 8004be0:	6063      	str	r3, [r4, #4]
 8004be2:	6014      	str	r4, [r2, #0]
 8004be4:	b003      	add	sp, #12
 8004be6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bea:	f000 bdb3 	b.w	8005754 <__malloc_unlock>
 8004bee:	42a3      	cmp	r3, r4
 8004bf0:	d90b      	bls.n	8004c0a <_free_r+0x4e>
 8004bf2:	6821      	ldr	r1, [r4, #0]
 8004bf4:	1862      	adds	r2, r4, r1
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	bf04      	itt	eq
 8004bfa:	681a      	ldreq	r2, [r3, #0]
 8004bfc:	685b      	ldreq	r3, [r3, #4]
 8004bfe:	6063      	str	r3, [r4, #4]
 8004c00:	bf04      	itt	eq
 8004c02:	1852      	addeq	r2, r2, r1
 8004c04:	6022      	streq	r2, [r4, #0]
 8004c06:	602c      	str	r4, [r5, #0]
 8004c08:	e7ec      	b.n	8004be4 <_free_r+0x28>
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	b10b      	cbz	r3, 8004c14 <_free_r+0x58>
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	d9fa      	bls.n	8004c0a <_free_r+0x4e>
 8004c14:	6811      	ldr	r1, [r2, #0]
 8004c16:	1855      	adds	r5, r2, r1
 8004c18:	42a5      	cmp	r5, r4
 8004c1a:	d10b      	bne.n	8004c34 <_free_r+0x78>
 8004c1c:	6824      	ldr	r4, [r4, #0]
 8004c1e:	4421      	add	r1, r4
 8004c20:	1854      	adds	r4, r2, r1
 8004c22:	42a3      	cmp	r3, r4
 8004c24:	6011      	str	r1, [r2, #0]
 8004c26:	d1dd      	bne.n	8004be4 <_free_r+0x28>
 8004c28:	681c      	ldr	r4, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	6053      	str	r3, [r2, #4]
 8004c2e:	4421      	add	r1, r4
 8004c30:	6011      	str	r1, [r2, #0]
 8004c32:	e7d7      	b.n	8004be4 <_free_r+0x28>
 8004c34:	d902      	bls.n	8004c3c <_free_r+0x80>
 8004c36:	230c      	movs	r3, #12
 8004c38:	6003      	str	r3, [r0, #0]
 8004c3a:	e7d3      	b.n	8004be4 <_free_r+0x28>
 8004c3c:	6825      	ldr	r5, [r4, #0]
 8004c3e:	1961      	adds	r1, r4, r5
 8004c40:	428b      	cmp	r3, r1
 8004c42:	bf04      	itt	eq
 8004c44:	6819      	ldreq	r1, [r3, #0]
 8004c46:	685b      	ldreq	r3, [r3, #4]
 8004c48:	6063      	str	r3, [r4, #4]
 8004c4a:	bf04      	itt	eq
 8004c4c:	1949      	addeq	r1, r1, r5
 8004c4e:	6021      	streq	r1, [r4, #0]
 8004c50:	6054      	str	r4, [r2, #4]
 8004c52:	e7c7      	b.n	8004be4 <_free_r+0x28>
 8004c54:	b003      	add	sp, #12
 8004c56:	bd30      	pop	{r4, r5, pc}
 8004c58:	20000490 	.word	0x20000490

08004c5c <_malloc_r>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	1ccd      	adds	r5, r1, #3
 8004c60:	f025 0503 	bic.w	r5, r5, #3
 8004c64:	3508      	adds	r5, #8
 8004c66:	2d0c      	cmp	r5, #12
 8004c68:	bf38      	it	cc
 8004c6a:	250c      	movcc	r5, #12
 8004c6c:	2d00      	cmp	r5, #0
 8004c6e:	4606      	mov	r6, r0
 8004c70:	db01      	blt.n	8004c76 <_malloc_r+0x1a>
 8004c72:	42a9      	cmp	r1, r5
 8004c74:	d903      	bls.n	8004c7e <_malloc_r+0x22>
 8004c76:	230c      	movs	r3, #12
 8004c78:	6033      	str	r3, [r6, #0]
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c7e:	f000 fd63 	bl	8005748 <__malloc_lock>
 8004c82:	4921      	ldr	r1, [pc, #132]	; (8004d08 <_malloc_r+0xac>)
 8004c84:	680a      	ldr	r2, [r1, #0]
 8004c86:	4614      	mov	r4, r2
 8004c88:	b99c      	cbnz	r4, 8004cb2 <_malloc_r+0x56>
 8004c8a:	4f20      	ldr	r7, [pc, #128]	; (8004d0c <_malloc_r+0xb0>)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	b923      	cbnz	r3, 8004c9a <_malloc_r+0x3e>
 8004c90:	4621      	mov	r1, r4
 8004c92:	4630      	mov	r0, r6
 8004c94:	f000 fc86 	bl	80055a4 <_sbrk_r>
 8004c98:	6038      	str	r0, [r7, #0]
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	f000 fc81 	bl	80055a4 <_sbrk_r>
 8004ca2:	1c43      	adds	r3, r0, #1
 8004ca4:	d123      	bne.n	8004cee <_malloc_r+0x92>
 8004ca6:	230c      	movs	r3, #12
 8004ca8:	6033      	str	r3, [r6, #0]
 8004caa:	4630      	mov	r0, r6
 8004cac:	f000 fd52 	bl	8005754 <__malloc_unlock>
 8004cb0:	e7e3      	b.n	8004c7a <_malloc_r+0x1e>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	1b5b      	subs	r3, r3, r5
 8004cb6:	d417      	bmi.n	8004ce8 <_malloc_r+0x8c>
 8004cb8:	2b0b      	cmp	r3, #11
 8004cba:	d903      	bls.n	8004cc4 <_malloc_r+0x68>
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	441c      	add	r4, r3
 8004cc0:	6025      	str	r5, [r4, #0]
 8004cc2:	e004      	b.n	8004cce <_malloc_r+0x72>
 8004cc4:	6863      	ldr	r3, [r4, #4]
 8004cc6:	42a2      	cmp	r2, r4
 8004cc8:	bf0c      	ite	eq
 8004cca:	600b      	streq	r3, [r1, #0]
 8004ccc:	6053      	strne	r3, [r2, #4]
 8004cce:	4630      	mov	r0, r6
 8004cd0:	f000 fd40 	bl	8005754 <__malloc_unlock>
 8004cd4:	f104 000b 	add.w	r0, r4, #11
 8004cd8:	1d23      	adds	r3, r4, #4
 8004cda:	f020 0007 	bic.w	r0, r0, #7
 8004cde:	1ac2      	subs	r2, r0, r3
 8004ce0:	d0cc      	beq.n	8004c7c <_malloc_r+0x20>
 8004ce2:	1a1b      	subs	r3, r3, r0
 8004ce4:	50a3      	str	r3, [r4, r2]
 8004ce6:	e7c9      	b.n	8004c7c <_malloc_r+0x20>
 8004ce8:	4622      	mov	r2, r4
 8004cea:	6864      	ldr	r4, [r4, #4]
 8004cec:	e7cc      	b.n	8004c88 <_malloc_r+0x2c>
 8004cee:	1cc4      	adds	r4, r0, #3
 8004cf0:	f024 0403 	bic.w	r4, r4, #3
 8004cf4:	42a0      	cmp	r0, r4
 8004cf6:	d0e3      	beq.n	8004cc0 <_malloc_r+0x64>
 8004cf8:	1a21      	subs	r1, r4, r0
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f000 fc52 	bl	80055a4 <_sbrk_r>
 8004d00:	3001      	adds	r0, #1
 8004d02:	d1dd      	bne.n	8004cc0 <_malloc_r+0x64>
 8004d04:	e7cf      	b.n	8004ca6 <_malloc_r+0x4a>
 8004d06:	bf00      	nop
 8004d08:	20000490 	.word	0x20000490
 8004d0c:	20000494 	.word	0x20000494

08004d10 <__ssputs_r>:
 8004d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d14:	688e      	ldr	r6, [r1, #8]
 8004d16:	429e      	cmp	r6, r3
 8004d18:	4682      	mov	sl, r0
 8004d1a:	460c      	mov	r4, r1
 8004d1c:	4690      	mov	r8, r2
 8004d1e:	461f      	mov	r7, r3
 8004d20:	d838      	bhi.n	8004d94 <__ssputs_r+0x84>
 8004d22:	898a      	ldrh	r2, [r1, #12]
 8004d24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d28:	d032      	beq.n	8004d90 <__ssputs_r+0x80>
 8004d2a:	6825      	ldr	r5, [r4, #0]
 8004d2c:	6909      	ldr	r1, [r1, #16]
 8004d2e:	eba5 0901 	sub.w	r9, r5, r1
 8004d32:	6965      	ldr	r5, [r4, #20]
 8004d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	444b      	add	r3, r9
 8004d40:	106d      	asrs	r5, r5, #1
 8004d42:	429d      	cmp	r5, r3
 8004d44:	bf38      	it	cc
 8004d46:	461d      	movcc	r5, r3
 8004d48:	0553      	lsls	r3, r2, #21
 8004d4a:	d531      	bpl.n	8004db0 <__ssputs_r+0xa0>
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	f7ff ff85 	bl	8004c5c <_malloc_r>
 8004d52:	4606      	mov	r6, r0
 8004d54:	b950      	cbnz	r0, 8004d6c <__ssputs_r+0x5c>
 8004d56:	230c      	movs	r3, #12
 8004d58:	f8ca 3000 	str.w	r3, [sl]
 8004d5c:	89a3      	ldrh	r3, [r4, #12]
 8004d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d62:	81a3      	strh	r3, [r4, #12]
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6c:	6921      	ldr	r1, [r4, #16]
 8004d6e:	464a      	mov	r2, r9
 8004d70:	f000 fcc2 	bl	80056f8 <memcpy>
 8004d74:	89a3      	ldrh	r3, [r4, #12]
 8004d76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d7e:	81a3      	strh	r3, [r4, #12]
 8004d80:	6126      	str	r6, [r4, #16]
 8004d82:	6165      	str	r5, [r4, #20]
 8004d84:	444e      	add	r6, r9
 8004d86:	eba5 0509 	sub.w	r5, r5, r9
 8004d8a:	6026      	str	r6, [r4, #0]
 8004d8c:	60a5      	str	r5, [r4, #8]
 8004d8e:	463e      	mov	r6, r7
 8004d90:	42be      	cmp	r6, r7
 8004d92:	d900      	bls.n	8004d96 <__ssputs_r+0x86>
 8004d94:	463e      	mov	r6, r7
 8004d96:	4632      	mov	r2, r6
 8004d98:	6820      	ldr	r0, [r4, #0]
 8004d9a:	4641      	mov	r1, r8
 8004d9c:	f000 fcba 	bl	8005714 <memmove>
 8004da0:	68a3      	ldr	r3, [r4, #8]
 8004da2:	6822      	ldr	r2, [r4, #0]
 8004da4:	1b9b      	subs	r3, r3, r6
 8004da6:	4432      	add	r2, r6
 8004da8:	60a3      	str	r3, [r4, #8]
 8004daa:	6022      	str	r2, [r4, #0]
 8004dac:	2000      	movs	r0, #0
 8004dae:	e7db      	b.n	8004d68 <__ssputs_r+0x58>
 8004db0:	462a      	mov	r2, r5
 8004db2:	f000 fcd5 	bl	8005760 <_realloc_r>
 8004db6:	4606      	mov	r6, r0
 8004db8:	2800      	cmp	r0, #0
 8004dba:	d1e1      	bne.n	8004d80 <__ssputs_r+0x70>
 8004dbc:	6921      	ldr	r1, [r4, #16]
 8004dbe:	4650      	mov	r0, sl
 8004dc0:	f7ff fefc 	bl	8004bbc <_free_r>
 8004dc4:	e7c7      	b.n	8004d56 <__ssputs_r+0x46>
	...

08004dc8 <_svfiprintf_r>:
 8004dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dcc:	4698      	mov	r8, r3
 8004dce:	898b      	ldrh	r3, [r1, #12]
 8004dd0:	061b      	lsls	r3, r3, #24
 8004dd2:	b09d      	sub	sp, #116	; 0x74
 8004dd4:	4607      	mov	r7, r0
 8004dd6:	460d      	mov	r5, r1
 8004dd8:	4614      	mov	r4, r2
 8004dda:	d50e      	bpl.n	8004dfa <_svfiprintf_r+0x32>
 8004ddc:	690b      	ldr	r3, [r1, #16]
 8004dde:	b963      	cbnz	r3, 8004dfa <_svfiprintf_r+0x32>
 8004de0:	2140      	movs	r1, #64	; 0x40
 8004de2:	f7ff ff3b 	bl	8004c5c <_malloc_r>
 8004de6:	6028      	str	r0, [r5, #0]
 8004de8:	6128      	str	r0, [r5, #16]
 8004dea:	b920      	cbnz	r0, 8004df6 <_svfiprintf_r+0x2e>
 8004dec:	230c      	movs	r3, #12
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004df4:	e0d1      	b.n	8004f9a <_svfiprintf_r+0x1d2>
 8004df6:	2340      	movs	r3, #64	; 0x40
 8004df8:	616b      	str	r3, [r5, #20]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfe:	2320      	movs	r3, #32
 8004e00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e04:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e08:	2330      	movs	r3, #48	; 0x30
 8004e0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004fb4 <_svfiprintf_r+0x1ec>
 8004e0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e12:	f04f 0901 	mov.w	r9, #1
 8004e16:	4623      	mov	r3, r4
 8004e18:	469a      	mov	sl, r3
 8004e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e1e:	b10a      	cbz	r2, 8004e24 <_svfiprintf_r+0x5c>
 8004e20:	2a25      	cmp	r2, #37	; 0x25
 8004e22:	d1f9      	bne.n	8004e18 <_svfiprintf_r+0x50>
 8004e24:	ebba 0b04 	subs.w	fp, sl, r4
 8004e28:	d00b      	beq.n	8004e42 <_svfiprintf_r+0x7a>
 8004e2a:	465b      	mov	r3, fp
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	4629      	mov	r1, r5
 8004e30:	4638      	mov	r0, r7
 8004e32:	f7ff ff6d 	bl	8004d10 <__ssputs_r>
 8004e36:	3001      	adds	r0, #1
 8004e38:	f000 80aa 	beq.w	8004f90 <_svfiprintf_r+0x1c8>
 8004e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e3e:	445a      	add	r2, fp
 8004e40:	9209      	str	r2, [sp, #36]	; 0x24
 8004e42:	f89a 3000 	ldrb.w	r3, [sl]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 80a2 	beq.w	8004f90 <_svfiprintf_r+0x1c8>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e56:	f10a 0a01 	add.w	sl, sl, #1
 8004e5a:	9304      	str	r3, [sp, #16]
 8004e5c:	9307      	str	r3, [sp, #28]
 8004e5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e62:	931a      	str	r3, [sp, #104]	; 0x68
 8004e64:	4654      	mov	r4, sl
 8004e66:	2205      	movs	r2, #5
 8004e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e6c:	4851      	ldr	r0, [pc, #324]	; (8004fb4 <_svfiprintf_r+0x1ec>)
 8004e6e:	f7fb f9df 	bl	8000230 <memchr>
 8004e72:	9a04      	ldr	r2, [sp, #16]
 8004e74:	b9d8      	cbnz	r0, 8004eae <_svfiprintf_r+0xe6>
 8004e76:	06d0      	lsls	r0, r2, #27
 8004e78:	bf44      	itt	mi
 8004e7a:	2320      	movmi	r3, #32
 8004e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e80:	0711      	lsls	r1, r2, #28
 8004e82:	bf44      	itt	mi
 8004e84:	232b      	movmi	r3, #43	; 0x2b
 8004e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e90:	d015      	beq.n	8004ebe <_svfiprintf_r+0xf6>
 8004e92:	9a07      	ldr	r2, [sp, #28]
 8004e94:	4654      	mov	r4, sl
 8004e96:	2000      	movs	r0, #0
 8004e98:	f04f 0c0a 	mov.w	ip, #10
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ea2:	3b30      	subs	r3, #48	; 0x30
 8004ea4:	2b09      	cmp	r3, #9
 8004ea6:	d94e      	bls.n	8004f46 <_svfiprintf_r+0x17e>
 8004ea8:	b1b0      	cbz	r0, 8004ed8 <_svfiprintf_r+0x110>
 8004eaa:	9207      	str	r2, [sp, #28]
 8004eac:	e014      	b.n	8004ed8 <_svfiprintf_r+0x110>
 8004eae:	eba0 0308 	sub.w	r3, r0, r8
 8004eb2:	fa09 f303 	lsl.w	r3, r9, r3
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	9304      	str	r3, [sp, #16]
 8004eba:	46a2      	mov	sl, r4
 8004ebc:	e7d2      	b.n	8004e64 <_svfiprintf_r+0x9c>
 8004ebe:	9b03      	ldr	r3, [sp, #12]
 8004ec0:	1d19      	adds	r1, r3, #4
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	9103      	str	r1, [sp, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	bfbb      	ittet	lt
 8004eca:	425b      	neglt	r3, r3
 8004ecc:	f042 0202 	orrlt.w	r2, r2, #2
 8004ed0:	9307      	strge	r3, [sp, #28]
 8004ed2:	9307      	strlt	r3, [sp, #28]
 8004ed4:	bfb8      	it	lt
 8004ed6:	9204      	strlt	r2, [sp, #16]
 8004ed8:	7823      	ldrb	r3, [r4, #0]
 8004eda:	2b2e      	cmp	r3, #46	; 0x2e
 8004edc:	d10c      	bne.n	8004ef8 <_svfiprintf_r+0x130>
 8004ede:	7863      	ldrb	r3, [r4, #1]
 8004ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ee2:	d135      	bne.n	8004f50 <_svfiprintf_r+0x188>
 8004ee4:	9b03      	ldr	r3, [sp, #12]
 8004ee6:	1d1a      	adds	r2, r3, #4
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	9203      	str	r2, [sp, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	bfb8      	it	lt
 8004ef0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004ef4:	3402      	adds	r4, #2
 8004ef6:	9305      	str	r3, [sp, #20]
 8004ef8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004fc4 <_svfiprintf_r+0x1fc>
 8004efc:	7821      	ldrb	r1, [r4, #0]
 8004efe:	2203      	movs	r2, #3
 8004f00:	4650      	mov	r0, sl
 8004f02:	f7fb f995 	bl	8000230 <memchr>
 8004f06:	b140      	cbz	r0, 8004f1a <_svfiprintf_r+0x152>
 8004f08:	2340      	movs	r3, #64	; 0x40
 8004f0a:	eba0 000a 	sub.w	r0, r0, sl
 8004f0e:	fa03 f000 	lsl.w	r0, r3, r0
 8004f12:	9b04      	ldr	r3, [sp, #16]
 8004f14:	4303      	orrs	r3, r0
 8004f16:	3401      	adds	r4, #1
 8004f18:	9304      	str	r3, [sp, #16]
 8004f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f1e:	4826      	ldr	r0, [pc, #152]	; (8004fb8 <_svfiprintf_r+0x1f0>)
 8004f20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f24:	2206      	movs	r2, #6
 8004f26:	f7fb f983 	bl	8000230 <memchr>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d038      	beq.n	8004fa0 <_svfiprintf_r+0x1d8>
 8004f2e:	4b23      	ldr	r3, [pc, #140]	; (8004fbc <_svfiprintf_r+0x1f4>)
 8004f30:	bb1b      	cbnz	r3, 8004f7a <_svfiprintf_r+0x1b2>
 8004f32:	9b03      	ldr	r3, [sp, #12]
 8004f34:	3307      	adds	r3, #7
 8004f36:	f023 0307 	bic.w	r3, r3, #7
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	9303      	str	r3, [sp, #12]
 8004f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f40:	4433      	add	r3, r6
 8004f42:	9309      	str	r3, [sp, #36]	; 0x24
 8004f44:	e767      	b.n	8004e16 <_svfiprintf_r+0x4e>
 8004f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	e7a5      	b.n	8004e9c <_svfiprintf_r+0xd4>
 8004f50:	2300      	movs	r3, #0
 8004f52:	3401      	adds	r4, #1
 8004f54:	9305      	str	r3, [sp, #20]
 8004f56:	4619      	mov	r1, r3
 8004f58:	f04f 0c0a 	mov.w	ip, #10
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f62:	3a30      	subs	r2, #48	; 0x30
 8004f64:	2a09      	cmp	r2, #9
 8004f66:	d903      	bls.n	8004f70 <_svfiprintf_r+0x1a8>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0c5      	beq.n	8004ef8 <_svfiprintf_r+0x130>
 8004f6c:	9105      	str	r1, [sp, #20]
 8004f6e:	e7c3      	b.n	8004ef8 <_svfiprintf_r+0x130>
 8004f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f74:	4604      	mov	r4, r0
 8004f76:	2301      	movs	r3, #1
 8004f78:	e7f0      	b.n	8004f5c <_svfiprintf_r+0x194>
 8004f7a:	ab03      	add	r3, sp, #12
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	462a      	mov	r2, r5
 8004f80:	4b0f      	ldr	r3, [pc, #60]	; (8004fc0 <_svfiprintf_r+0x1f8>)
 8004f82:	a904      	add	r1, sp, #16
 8004f84:	4638      	mov	r0, r7
 8004f86:	f3af 8000 	nop.w
 8004f8a:	1c42      	adds	r2, r0, #1
 8004f8c:	4606      	mov	r6, r0
 8004f8e:	d1d6      	bne.n	8004f3e <_svfiprintf_r+0x176>
 8004f90:	89ab      	ldrh	r3, [r5, #12]
 8004f92:	065b      	lsls	r3, r3, #25
 8004f94:	f53f af2c 	bmi.w	8004df0 <_svfiprintf_r+0x28>
 8004f98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f9a:	b01d      	add	sp, #116	; 0x74
 8004f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa0:	ab03      	add	r3, sp, #12
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	462a      	mov	r2, r5
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <_svfiprintf_r+0x1f8>)
 8004fa8:	a904      	add	r1, sp, #16
 8004faa:	4638      	mov	r0, r7
 8004fac:	f000 f9d4 	bl	8005358 <_printf_i>
 8004fb0:	e7eb      	b.n	8004f8a <_svfiprintf_r+0x1c2>
 8004fb2:	bf00      	nop
 8004fb4:	08005ad4 	.word	0x08005ad4
 8004fb8:	08005ade 	.word	0x08005ade
 8004fbc:	00000000 	.word	0x00000000
 8004fc0:	08004d11 	.word	0x08004d11
 8004fc4:	08005ada 	.word	0x08005ada

08004fc8 <__sfputc_r>:
 8004fc8:	6893      	ldr	r3, [r2, #8]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	b410      	push	{r4}
 8004fd0:	6093      	str	r3, [r2, #8]
 8004fd2:	da08      	bge.n	8004fe6 <__sfputc_r+0x1e>
 8004fd4:	6994      	ldr	r4, [r2, #24]
 8004fd6:	42a3      	cmp	r3, r4
 8004fd8:	db01      	blt.n	8004fde <__sfputc_r+0x16>
 8004fda:	290a      	cmp	r1, #10
 8004fdc:	d103      	bne.n	8004fe6 <__sfputc_r+0x1e>
 8004fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fe2:	f7ff bb0d 	b.w	8004600 <__swbuf_r>
 8004fe6:	6813      	ldr	r3, [r2, #0]
 8004fe8:	1c58      	adds	r0, r3, #1
 8004fea:	6010      	str	r0, [r2, #0]
 8004fec:	7019      	strb	r1, [r3, #0]
 8004fee:	4608      	mov	r0, r1
 8004ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <__sfputs_r>:
 8004ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff8:	4606      	mov	r6, r0
 8004ffa:	460f      	mov	r7, r1
 8004ffc:	4614      	mov	r4, r2
 8004ffe:	18d5      	adds	r5, r2, r3
 8005000:	42ac      	cmp	r4, r5
 8005002:	d101      	bne.n	8005008 <__sfputs_r+0x12>
 8005004:	2000      	movs	r0, #0
 8005006:	e007      	b.n	8005018 <__sfputs_r+0x22>
 8005008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800500c:	463a      	mov	r2, r7
 800500e:	4630      	mov	r0, r6
 8005010:	f7ff ffda 	bl	8004fc8 <__sfputc_r>
 8005014:	1c43      	adds	r3, r0, #1
 8005016:	d1f3      	bne.n	8005000 <__sfputs_r+0xa>
 8005018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800501c <_vfiprintf_r>:
 800501c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005020:	460d      	mov	r5, r1
 8005022:	b09d      	sub	sp, #116	; 0x74
 8005024:	4614      	mov	r4, r2
 8005026:	4698      	mov	r8, r3
 8005028:	4606      	mov	r6, r0
 800502a:	b118      	cbz	r0, 8005034 <_vfiprintf_r+0x18>
 800502c:	6983      	ldr	r3, [r0, #24]
 800502e:	b90b      	cbnz	r3, 8005034 <_vfiprintf_r+0x18>
 8005030:	f7ff fcc0 	bl	80049b4 <__sinit>
 8005034:	4b89      	ldr	r3, [pc, #548]	; (800525c <_vfiprintf_r+0x240>)
 8005036:	429d      	cmp	r5, r3
 8005038:	d11b      	bne.n	8005072 <_vfiprintf_r+0x56>
 800503a:	6875      	ldr	r5, [r6, #4]
 800503c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800503e:	07d9      	lsls	r1, r3, #31
 8005040:	d405      	bmi.n	800504e <_vfiprintf_r+0x32>
 8005042:	89ab      	ldrh	r3, [r5, #12]
 8005044:	059a      	lsls	r2, r3, #22
 8005046:	d402      	bmi.n	800504e <_vfiprintf_r+0x32>
 8005048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800504a:	f7ff fd51 	bl	8004af0 <__retarget_lock_acquire_recursive>
 800504e:	89ab      	ldrh	r3, [r5, #12]
 8005050:	071b      	lsls	r3, r3, #28
 8005052:	d501      	bpl.n	8005058 <_vfiprintf_r+0x3c>
 8005054:	692b      	ldr	r3, [r5, #16]
 8005056:	b9eb      	cbnz	r3, 8005094 <_vfiprintf_r+0x78>
 8005058:	4629      	mov	r1, r5
 800505a:	4630      	mov	r0, r6
 800505c:	f7ff fb22 	bl	80046a4 <__swsetup_r>
 8005060:	b1c0      	cbz	r0, 8005094 <_vfiprintf_r+0x78>
 8005062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005064:	07dc      	lsls	r4, r3, #31
 8005066:	d50e      	bpl.n	8005086 <_vfiprintf_r+0x6a>
 8005068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800506c:	b01d      	add	sp, #116	; 0x74
 800506e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005072:	4b7b      	ldr	r3, [pc, #492]	; (8005260 <_vfiprintf_r+0x244>)
 8005074:	429d      	cmp	r5, r3
 8005076:	d101      	bne.n	800507c <_vfiprintf_r+0x60>
 8005078:	68b5      	ldr	r5, [r6, #8]
 800507a:	e7df      	b.n	800503c <_vfiprintf_r+0x20>
 800507c:	4b79      	ldr	r3, [pc, #484]	; (8005264 <_vfiprintf_r+0x248>)
 800507e:	429d      	cmp	r5, r3
 8005080:	bf08      	it	eq
 8005082:	68f5      	ldreq	r5, [r6, #12]
 8005084:	e7da      	b.n	800503c <_vfiprintf_r+0x20>
 8005086:	89ab      	ldrh	r3, [r5, #12]
 8005088:	0598      	lsls	r0, r3, #22
 800508a:	d4ed      	bmi.n	8005068 <_vfiprintf_r+0x4c>
 800508c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800508e:	f7ff fd30 	bl	8004af2 <__retarget_lock_release_recursive>
 8005092:	e7e9      	b.n	8005068 <_vfiprintf_r+0x4c>
 8005094:	2300      	movs	r3, #0
 8005096:	9309      	str	r3, [sp, #36]	; 0x24
 8005098:	2320      	movs	r3, #32
 800509a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800509e:	f8cd 800c 	str.w	r8, [sp, #12]
 80050a2:	2330      	movs	r3, #48	; 0x30
 80050a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005268 <_vfiprintf_r+0x24c>
 80050a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050ac:	f04f 0901 	mov.w	r9, #1
 80050b0:	4623      	mov	r3, r4
 80050b2:	469a      	mov	sl, r3
 80050b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050b8:	b10a      	cbz	r2, 80050be <_vfiprintf_r+0xa2>
 80050ba:	2a25      	cmp	r2, #37	; 0x25
 80050bc:	d1f9      	bne.n	80050b2 <_vfiprintf_r+0x96>
 80050be:	ebba 0b04 	subs.w	fp, sl, r4
 80050c2:	d00b      	beq.n	80050dc <_vfiprintf_r+0xc0>
 80050c4:	465b      	mov	r3, fp
 80050c6:	4622      	mov	r2, r4
 80050c8:	4629      	mov	r1, r5
 80050ca:	4630      	mov	r0, r6
 80050cc:	f7ff ff93 	bl	8004ff6 <__sfputs_r>
 80050d0:	3001      	adds	r0, #1
 80050d2:	f000 80aa 	beq.w	800522a <_vfiprintf_r+0x20e>
 80050d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050d8:	445a      	add	r2, fp
 80050da:	9209      	str	r2, [sp, #36]	; 0x24
 80050dc:	f89a 3000 	ldrb.w	r3, [sl]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 80a2 	beq.w	800522a <_vfiprintf_r+0x20e>
 80050e6:	2300      	movs	r3, #0
 80050e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050f0:	f10a 0a01 	add.w	sl, sl, #1
 80050f4:	9304      	str	r3, [sp, #16]
 80050f6:	9307      	str	r3, [sp, #28]
 80050f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050fc:	931a      	str	r3, [sp, #104]	; 0x68
 80050fe:	4654      	mov	r4, sl
 8005100:	2205      	movs	r2, #5
 8005102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005106:	4858      	ldr	r0, [pc, #352]	; (8005268 <_vfiprintf_r+0x24c>)
 8005108:	f7fb f892 	bl	8000230 <memchr>
 800510c:	9a04      	ldr	r2, [sp, #16]
 800510e:	b9d8      	cbnz	r0, 8005148 <_vfiprintf_r+0x12c>
 8005110:	06d1      	lsls	r1, r2, #27
 8005112:	bf44      	itt	mi
 8005114:	2320      	movmi	r3, #32
 8005116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800511a:	0713      	lsls	r3, r2, #28
 800511c:	bf44      	itt	mi
 800511e:	232b      	movmi	r3, #43	; 0x2b
 8005120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005124:	f89a 3000 	ldrb.w	r3, [sl]
 8005128:	2b2a      	cmp	r3, #42	; 0x2a
 800512a:	d015      	beq.n	8005158 <_vfiprintf_r+0x13c>
 800512c:	9a07      	ldr	r2, [sp, #28]
 800512e:	4654      	mov	r4, sl
 8005130:	2000      	movs	r0, #0
 8005132:	f04f 0c0a 	mov.w	ip, #10
 8005136:	4621      	mov	r1, r4
 8005138:	f811 3b01 	ldrb.w	r3, [r1], #1
 800513c:	3b30      	subs	r3, #48	; 0x30
 800513e:	2b09      	cmp	r3, #9
 8005140:	d94e      	bls.n	80051e0 <_vfiprintf_r+0x1c4>
 8005142:	b1b0      	cbz	r0, 8005172 <_vfiprintf_r+0x156>
 8005144:	9207      	str	r2, [sp, #28]
 8005146:	e014      	b.n	8005172 <_vfiprintf_r+0x156>
 8005148:	eba0 0308 	sub.w	r3, r0, r8
 800514c:	fa09 f303 	lsl.w	r3, r9, r3
 8005150:	4313      	orrs	r3, r2
 8005152:	9304      	str	r3, [sp, #16]
 8005154:	46a2      	mov	sl, r4
 8005156:	e7d2      	b.n	80050fe <_vfiprintf_r+0xe2>
 8005158:	9b03      	ldr	r3, [sp, #12]
 800515a:	1d19      	adds	r1, r3, #4
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	9103      	str	r1, [sp, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	bfbb      	ittet	lt
 8005164:	425b      	neglt	r3, r3
 8005166:	f042 0202 	orrlt.w	r2, r2, #2
 800516a:	9307      	strge	r3, [sp, #28]
 800516c:	9307      	strlt	r3, [sp, #28]
 800516e:	bfb8      	it	lt
 8005170:	9204      	strlt	r2, [sp, #16]
 8005172:	7823      	ldrb	r3, [r4, #0]
 8005174:	2b2e      	cmp	r3, #46	; 0x2e
 8005176:	d10c      	bne.n	8005192 <_vfiprintf_r+0x176>
 8005178:	7863      	ldrb	r3, [r4, #1]
 800517a:	2b2a      	cmp	r3, #42	; 0x2a
 800517c:	d135      	bne.n	80051ea <_vfiprintf_r+0x1ce>
 800517e:	9b03      	ldr	r3, [sp, #12]
 8005180:	1d1a      	adds	r2, r3, #4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	9203      	str	r2, [sp, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	bfb8      	it	lt
 800518a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800518e:	3402      	adds	r4, #2
 8005190:	9305      	str	r3, [sp, #20]
 8005192:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005278 <_vfiprintf_r+0x25c>
 8005196:	7821      	ldrb	r1, [r4, #0]
 8005198:	2203      	movs	r2, #3
 800519a:	4650      	mov	r0, sl
 800519c:	f7fb f848 	bl	8000230 <memchr>
 80051a0:	b140      	cbz	r0, 80051b4 <_vfiprintf_r+0x198>
 80051a2:	2340      	movs	r3, #64	; 0x40
 80051a4:	eba0 000a 	sub.w	r0, r0, sl
 80051a8:	fa03 f000 	lsl.w	r0, r3, r0
 80051ac:	9b04      	ldr	r3, [sp, #16]
 80051ae:	4303      	orrs	r3, r0
 80051b0:	3401      	adds	r4, #1
 80051b2:	9304      	str	r3, [sp, #16]
 80051b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b8:	482c      	ldr	r0, [pc, #176]	; (800526c <_vfiprintf_r+0x250>)
 80051ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051be:	2206      	movs	r2, #6
 80051c0:	f7fb f836 	bl	8000230 <memchr>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d03f      	beq.n	8005248 <_vfiprintf_r+0x22c>
 80051c8:	4b29      	ldr	r3, [pc, #164]	; (8005270 <_vfiprintf_r+0x254>)
 80051ca:	bb1b      	cbnz	r3, 8005214 <_vfiprintf_r+0x1f8>
 80051cc:	9b03      	ldr	r3, [sp, #12]
 80051ce:	3307      	adds	r3, #7
 80051d0:	f023 0307 	bic.w	r3, r3, #7
 80051d4:	3308      	adds	r3, #8
 80051d6:	9303      	str	r3, [sp, #12]
 80051d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051da:	443b      	add	r3, r7
 80051dc:	9309      	str	r3, [sp, #36]	; 0x24
 80051de:	e767      	b.n	80050b0 <_vfiprintf_r+0x94>
 80051e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80051e4:	460c      	mov	r4, r1
 80051e6:	2001      	movs	r0, #1
 80051e8:	e7a5      	b.n	8005136 <_vfiprintf_r+0x11a>
 80051ea:	2300      	movs	r3, #0
 80051ec:	3401      	adds	r4, #1
 80051ee:	9305      	str	r3, [sp, #20]
 80051f0:	4619      	mov	r1, r3
 80051f2:	f04f 0c0a 	mov.w	ip, #10
 80051f6:	4620      	mov	r0, r4
 80051f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051fc:	3a30      	subs	r2, #48	; 0x30
 80051fe:	2a09      	cmp	r2, #9
 8005200:	d903      	bls.n	800520a <_vfiprintf_r+0x1ee>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0c5      	beq.n	8005192 <_vfiprintf_r+0x176>
 8005206:	9105      	str	r1, [sp, #20]
 8005208:	e7c3      	b.n	8005192 <_vfiprintf_r+0x176>
 800520a:	fb0c 2101 	mla	r1, ip, r1, r2
 800520e:	4604      	mov	r4, r0
 8005210:	2301      	movs	r3, #1
 8005212:	e7f0      	b.n	80051f6 <_vfiprintf_r+0x1da>
 8005214:	ab03      	add	r3, sp, #12
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	462a      	mov	r2, r5
 800521a:	4b16      	ldr	r3, [pc, #88]	; (8005274 <_vfiprintf_r+0x258>)
 800521c:	a904      	add	r1, sp, #16
 800521e:	4630      	mov	r0, r6
 8005220:	f3af 8000 	nop.w
 8005224:	4607      	mov	r7, r0
 8005226:	1c78      	adds	r0, r7, #1
 8005228:	d1d6      	bne.n	80051d8 <_vfiprintf_r+0x1bc>
 800522a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800522c:	07d9      	lsls	r1, r3, #31
 800522e:	d405      	bmi.n	800523c <_vfiprintf_r+0x220>
 8005230:	89ab      	ldrh	r3, [r5, #12]
 8005232:	059a      	lsls	r2, r3, #22
 8005234:	d402      	bmi.n	800523c <_vfiprintf_r+0x220>
 8005236:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005238:	f7ff fc5b 	bl	8004af2 <__retarget_lock_release_recursive>
 800523c:	89ab      	ldrh	r3, [r5, #12]
 800523e:	065b      	lsls	r3, r3, #25
 8005240:	f53f af12 	bmi.w	8005068 <_vfiprintf_r+0x4c>
 8005244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005246:	e711      	b.n	800506c <_vfiprintf_r+0x50>
 8005248:	ab03      	add	r3, sp, #12
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	462a      	mov	r2, r5
 800524e:	4b09      	ldr	r3, [pc, #36]	; (8005274 <_vfiprintf_r+0x258>)
 8005250:	a904      	add	r1, sp, #16
 8005252:	4630      	mov	r0, r6
 8005254:	f000 f880 	bl	8005358 <_printf_i>
 8005258:	e7e4      	b.n	8005224 <_vfiprintf_r+0x208>
 800525a:	bf00      	nop
 800525c:	08005a94 	.word	0x08005a94
 8005260:	08005ab4 	.word	0x08005ab4
 8005264:	08005a74 	.word	0x08005a74
 8005268:	08005ad4 	.word	0x08005ad4
 800526c:	08005ade 	.word	0x08005ade
 8005270:	00000000 	.word	0x00000000
 8005274:	08004ff7 	.word	0x08004ff7
 8005278:	08005ada 	.word	0x08005ada

0800527c <_printf_common>:
 800527c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005280:	4616      	mov	r6, r2
 8005282:	4699      	mov	r9, r3
 8005284:	688a      	ldr	r2, [r1, #8]
 8005286:	690b      	ldr	r3, [r1, #16]
 8005288:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800528c:	4293      	cmp	r3, r2
 800528e:	bfb8      	it	lt
 8005290:	4613      	movlt	r3, r2
 8005292:	6033      	str	r3, [r6, #0]
 8005294:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005298:	4607      	mov	r7, r0
 800529a:	460c      	mov	r4, r1
 800529c:	b10a      	cbz	r2, 80052a2 <_printf_common+0x26>
 800529e:	3301      	adds	r3, #1
 80052a0:	6033      	str	r3, [r6, #0]
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	0699      	lsls	r1, r3, #26
 80052a6:	bf42      	ittt	mi
 80052a8:	6833      	ldrmi	r3, [r6, #0]
 80052aa:	3302      	addmi	r3, #2
 80052ac:	6033      	strmi	r3, [r6, #0]
 80052ae:	6825      	ldr	r5, [r4, #0]
 80052b0:	f015 0506 	ands.w	r5, r5, #6
 80052b4:	d106      	bne.n	80052c4 <_printf_common+0x48>
 80052b6:	f104 0a19 	add.w	sl, r4, #25
 80052ba:	68e3      	ldr	r3, [r4, #12]
 80052bc:	6832      	ldr	r2, [r6, #0]
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	42ab      	cmp	r3, r5
 80052c2:	dc26      	bgt.n	8005312 <_printf_common+0x96>
 80052c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052c8:	1e13      	subs	r3, r2, #0
 80052ca:	6822      	ldr	r2, [r4, #0]
 80052cc:	bf18      	it	ne
 80052ce:	2301      	movne	r3, #1
 80052d0:	0692      	lsls	r2, r2, #26
 80052d2:	d42b      	bmi.n	800532c <_printf_common+0xb0>
 80052d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052d8:	4649      	mov	r1, r9
 80052da:	4638      	mov	r0, r7
 80052dc:	47c0      	blx	r8
 80052de:	3001      	adds	r0, #1
 80052e0:	d01e      	beq.n	8005320 <_printf_common+0xa4>
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	68e5      	ldr	r5, [r4, #12]
 80052e6:	6832      	ldr	r2, [r6, #0]
 80052e8:	f003 0306 	and.w	r3, r3, #6
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	bf08      	it	eq
 80052f0:	1aad      	subeq	r5, r5, r2
 80052f2:	68a3      	ldr	r3, [r4, #8]
 80052f4:	6922      	ldr	r2, [r4, #16]
 80052f6:	bf0c      	ite	eq
 80052f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052fc:	2500      	movne	r5, #0
 80052fe:	4293      	cmp	r3, r2
 8005300:	bfc4      	itt	gt
 8005302:	1a9b      	subgt	r3, r3, r2
 8005304:	18ed      	addgt	r5, r5, r3
 8005306:	2600      	movs	r6, #0
 8005308:	341a      	adds	r4, #26
 800530a:	42b5      	cmp	r5, r6
 800530c:	d11a      	bne.n	8005344 <_printf_common+0xc8>
 800530e:	2000      	movs	r0, #0
 8005310:	e008      	b.n	8005324 <_printf_common+0xa8>
 8005312:	2301      	movs	r3, #1
 8005314:	4652      	mov	r2, sl
 8005316:	4649      	mov	r1, r9
 8005318:	4638      	mov	r0, r7
 800531a:	47c0      	blx	r8
 800531c:	3001      	adds	r0, #1
 800531e:	d103      	bne.n	8005328 <_printf_common+0xac>
 8005320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005328:	3501      	adds	r5, #1
 800532a:	e7c6      	b.n	80052ba <_printf_common+0x3e>
 800532c:	18e1      	adds	r1, r4, r3
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	2030      	movs	r0, #48	; 0x30
 8005332:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005336:	4422      	add	r2, r4
 8005338:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800533c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005340:	3302      	adds	r3, #2
 8005342:	e7c7      	b.n	80052d4 <_printf_common+0x58>
 8005344:	2301      	movs	r3, #1
 8005346:	4622      	mov	r2, r4
 8005348:	4649      	mov	r1, r9
 800534a:	4638      	mov	r0, r7
 800534c:	47c0      	blx	r8
 800534e:	3001      	adds	r0, #1
 8005350:	d0e6      	beq.n	8005320 <_printf_common+0xa4>
 8005352:	3601      	adds	r6, #1
 8005354:	e7d9      	b.n	800530a <_printf_common+0x8e>
	...

08005358 <_printf_i>:
 8005358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800535c:	460c      	mov	r4, r1
 800535e:	4691      	mov	r9, r2
 8005360:	7e27      	ldrb	r7, [r4, #24]
 8005362:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005364:	2f78      	cmp	r7, #120	; 0x78
 8005366:	4680      	mov	r8, r0
 8005368:	469a      	mov	sl, r3
 800536a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800536e:	d807      	bhi.n	8005380 <_printf_i+0x28>
 8005370:	2f62      	cmp	r7, #98	; 0x62
 8005372:	d80a      	bhi.n	800538a <_printf_i+0x32>
 8005374:	2f00      	cmp	r7, #0
 8005376:	f000 80d8 	beq.w	800552a <_printf_i+0x1d2>
 800537a:	2f58      	cmp	r7, #88	; 0x58
 800537c:	f000 80a3 	beq.w	80054c6 <_printf_i+0x16e>
 8005380:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005384:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005388:	e03a      	b.n	8005400 <_printf_i+0xa8>
 800538a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800538e:	2b15      	cmp	r3, #21
 8005390:	d8f6      	bhi.n	8005380 <_printf_i+0x28>
 8005392:	a001      	add	r0, pc, #4	; (adr r0, 8005398 <_printf_i+0x40>)
 8005394:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005398:	080053f1 	.word	0x080053f1
 800539c:	08005405 	.word	0x08005405
 80053a0:	08005381 	.word	0x08005381
 80053a4:	08005381 	.word	0x08005381
 80053a8:	08005381 	.word	0x08005381
 80053ac:	08005381 	.word	0x08005381
 80053b0:	08005405 	.word	0x08005405
 80053b4:	08005381 	.word	0x08005381
 80053b8:	08005381 	.word	0x08005381
 80053bc:	08005381 	.word	0x08005381
 80053c0:	08005381 	.word	0x08005381
 80053c4:	08005511 	.word	0x08005511
 80053c8:	08005435 	.word	0x08005435
 80053cc:	080054f3 	.word	0x080054f3
 80053d0:	08005381 	.word	0x08005381
 80053d4:	08005381 	.word	0x08005381
 80053d8:	08005533 	.word	0x08005533
 80053dc:	08005381 	.word	0x08005381
 80053e0:	08005435 	.word	0x08005435
 80053e4:	08005381 	.word	0x08005381
 80053e8:	08005381 	.word	0x08005381
 80053ec:	080054fb 	.word	0x080054fb
 80053f0:	680b      	ldr	r3, [r1, #0]
 80053f2:	1d1a      	adds	r2, r3, #4
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	600a      	str	r2, [r1, #0]
 80053f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005400:	2301      	movs	r3, #1
 8005402:	e0a3      	b.n	800554c <_printf_i+0x1f4>
 8005404:	6825      	ldr	r5, [r4, #0]
 8005406:	6808      	ldr	r0, [r1, #0]
 8005408:	062e      	lsls	r6, r5, #24
 800540a:	f100 0304 	add.w	r3, r0, #4
 800540e:	d50a      	bpl.n	8005426 <_printf_i+0xce>
 8005410:	6805      	ldr	r5, [r0, #0]
 8005412:	600b      	str	r3, [r1, #0]
 8005414:	2d00      	cmp	r5, #0
 8005416:	da03      	bge.n	8005420 <_printf_i+0xc8>
 8005418:	232d      	movs	r3, #45	; 0x2d
 800541a:	426d      	negs	r5, r5
 800541c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005420:	485e      	ldr	r0, [pc, #376]	; (800559c <_printf_i+0x244>)
 8005422:	230a      	movs	r3, #10
 8005424:	e019      	b.n	800545a <_printf_i+0x102>
 8005426:	f015 0f40 	tst.w	r5, #64	; 0x40
 800542a:	6805      	ldr	r5, [r0, #0]
 800542c:	600b      	str	r3, [r1, #0]
 800542e:	bf18      	it	ne
 8005430:	b22d      	sxthne	r5, r5
 8005432:	e7ef      	b.n	8005414 <_printf_i+0xbc>
 8005434:	680b      	ldr	r3, [r1, #0]
 8005436:	6825      	ldr	r5, [r4, #0]
 8005438:	1d18      	adds	r0, r3, #4
 800543a:	6008      	str	r0, [r1, #0]
 800543c:	0628      	lsls	r0, r5, #24
 800543e:	d501      	bpl.n	8005444 <_printf_i+0xec>
 8005440:	681d      	ldr	r5, [r3, #0]
 8005442:	e002      	b.n	800544a <_printf_i+0xf2>
 8005444:	0669      	lsls	r1, r5, #25
 8005446:	d5fb      	bpl.n	8005440 <_printf_i+0xe8>
 8005448:	881d      	ldrh	r5, [r3, #0]
 800544a:	4854      	ldr	r0, [pc, #336]	; (800559c <_printf_i+0x244>)
 800544c:	2f6f      	cmp	r7, #111	; 0x6f
 800544e:	bf0c      	ite	eq
 8005450:	2308      	moveq	r3, #8
 8005452:	230a      	movne	r3, #10
 8005454:	2100      	movs	r1, #0
 8005456:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800545a:	6866      	ldr	r6, [r4, #4]
 800545c:	60a6      	str	r6, [r4, #8]
 800545e:	2e00      	cmp	r6, #0
 8005460:	bfa2      	ittt	ge
 8005462:	6821      	ldrge	r1, [r4, #0]
 8005464:	f021 0104 	bicge.w	r1, r1, #4
 8005468:	6021      	strge	r1, [r4, #0]
 800546a:	b90d      	cbnz	r5, 8005470 <_printf_i+0x118>
 800546c:	2e00      	cmp	r6, #0
 800546e:	d04d      	beq.n	800550c <_printf_i+0x1b4>
 8005470:	4616      	mov	r6, r2
 8005472:	fbb5 f1f3 	udiv	r1, r5, r3
 8005476:	fb03 5711 	mls	r7, r3, r1, r5
 800547a:	5dc7      	ldrb	r7, [r0, r7]
 800547c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005480:	462f      	mov	r7, r5
 8005482:	42bb      	cmp	r3, r7
 8005484:	460d      	mov	r5, r1
 8005486:	d9f4      	bls.n	8005472 <_printf_i+0x11a>
 8005488:	2b08      	cmp	r3, #8
 800548a:	d10b      	bne.n	80054a4 <_printf_i+0x14c>
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	07df      	lsls	r7, r3, #31
 8005490:	d508      	bpl.n	80054a4 <_printf_i+0x14c>
 8005492:	6923      	ldr	r3, [r4, #16]
 8005494:	6861      	ldr	r1, [r4, #4]
 8005496:	4299      	cmp	r1, r3
 8005498:	bfde      	ittt	le
 800549a:	2330      	movle	r3, #48	; 0x30
 800549c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054a0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80054a4:	1b92      	subs	r2, r2, r6
 80054a6:	6122      	str	r2, [r4, #16]
 80054a8:	f8cd a000 	str.w	sl, [sp]
 80054ac:	464b      	mov	r3, r9
 80054ae:	aa03      	add	r2, sp, #12
 80054b0:	4621      	mov	r1, r4
 80054b2:	4640      	mov	r0, r8
 80054b4:	f7ff fee2 	bl	800527c <_printf_common>
 80054b8:	3001      	adds	r0, #1
 80054ba:	d14c      	bne.n	8005556 <_printf_i+0x1fe>
 80054bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054c0:	b004      	add	sp, #16
 80054c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c6:	4835      	ldr	r0, [pc, #212]	; (800559c <_printf_i+0x244>)
 80054c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	680e      	ldr	r6, [r1, #0]
 80054d0:	061f      	lsls	r7, r3, #24
 80054d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80054d6:	600e      	str	r6, [r1, #0]
 80054d8:	d514      	bpl.n	8005504 <_printf_i+0x1ac>
 80054da:	07d9      	lsls	r1, r3, #31
 80054dc:	bf44      	itt	mi
 80054de:	f043 0320 	orrmi.w	r3, r3, #32
 80054e2:	6023      	strmi	r3, [r4, #0]
 80054e4:	b91d      	cbnz	r5, 80054ee <_printf_i+0x196>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	f023 0320 	bic.w	r3, r3, #32
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	2310      	movs	r3, #16
 80054f0:	e7b0      	b.n	8005454 <_printf_i+0xfc>
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	f043 0320 	orr.w	r3, r3, #32
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	2378      	movs	r3, #120	; 0x78
 80054fc:	4828      	ldr	r0, [pc, #160]	; (80055a0 <_printf_i+0x248>)
 80054fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005502:	e7e3      	b.n	80054cc <_printf_i+0x174>
 8005504:	065e      	lsls	r6, r3, #25
 8005506:	bf48      	it	mi
 8005508:	b2ad      	uxthmi	r5, r5
 800550a:	e7e6      	b.n	80054da <_printf_i+0x182>
 800550c:	4616      	mov	r6, r2
 800550e:	e7bb      	b.n	8005488 <_printf_i+0x130>
 8005510:	680b      	ldr	r3, [r1, #0]
 8005512:	6826      	ldr	r6, [r4, #0]
 8005514:	6960      	ldr	r0, [r4, #20]
 8005516:	1d1d      	adds	r5, r3, #4
 8005518:	600d      	str	r5, [r1, #0]
 800551a:	0635      	lsls	r5, r6, #24
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	d501      	bpl.n	8005524 <_printf_i+0x1cc>
 8005520:	6018      	str	r0, [r3, #0]
 8005522:	e002      	b.n	800552a <_printf_i+0x1d2>
 8005524:	0671      	lsls	r1, r6, #25
 8005526:	d5fb      	bpl.n	8005520 <_printf_i+0x1c8>
 8005528:	8018      	strh	r0, [r3, #0]
 800552a:	2300      	movs	r3, #0
 800552c:	6123      	str	r3, [r4, #16]
 800552e:	4616      	mov	r6, r2
 8005530:	e7ba      	b.n	80054a8 <_printf_i+0x150>
 8005532:	680b      	ldr	r3, [r1, #0]
 8005534:	1d1a      	adds	r2, r3, #4
 8005536:	600a      	str	r2, [r1, #0]
 8005538:	681e      	ldr	r6, [r3, #0]
 800553a:	6862      	ldr	r2, [r4, #4]
 800553c:	2100      	movs	r1, #0
 800553e:	4630      	mov	r0, r6
 8005540:	f7fa fe76 	bl	8000230 <memchr>
 8005544:	b108      	cbz	r0, 800554a <_printf_i+0x1f2>
 8005546:	1b80      	subs	r0, r0, r6
 8005548:	6060      	str	r0, [r4, #4]
 800554a:	6863      	ldr	r3, [r4, #4]
 800554c:	6123      	str	r3, [r4, #16]
 800554e:	2300      	movs	r3, #0
 8005550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005554:	e7a8      	b.n	80054a8 <_printf_i+0x150>
 8005556:	6923      	ldr	r3, [r4, #16]
 8005558:	4632      	mov	r2, r6
 800555a:	4649      	mov	r1, r9
 800555c:	4640      	mov	r0, r8
 800555e:	47d0      	blx	sl
 8005560:	3001      	adds	r0, #1
 8005562:	d0ab      	beq.n	80054bc <_printf_i+0x164>
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	079b      	lsls	r3, r3, #30
 8005568:	d413      	bmi.n	8005592 <_printf_i+0x23a>
 800556a:	68e0      	ldr	r0, [r4, #12]
 800556c:	9b03      	ldr	r3, [sp, #12]
 800556e:	4298      	cmp	r0, r3
 8005570:	bfb8      	it	lt
 8005572:	4618      	movlt	r0, r3
 8005574:	e7a4      	b.n	80054c0 <_printf_i+0x168>
 8005576:	2301      	movs	r3, #1
 8005578:	4632      	mov	r2, r6
 800557a:	4649      	mov	r1, r9
 800557c:	4640      	mov	r0, r8
 800557e:	47d0      	blx	sl
 8005580:	3001      	adds	r0, #1
 8005582:	d09b      	beq.n	80054bc <_printf_i+0x164>
 8005584:	3501      	adds	r5, #1
 8005586:	68e3      	ldr	r3, [r4, #12]
 8005588:	9903      	ldr	r1, [sp, #12]
 800558a:	1a5b      	subs	r3, r3, r1
 800558c:	42ab      	cmp	r3, r5
 800558e:	dcf2      	bgt.n	8005576 <_printf_i+0x21e>
 8005590:	e7eb      	b.n	800556a <_printf_i+0x212>
 8005592:	2500      	movs	r5, #0
 8005594:	f104 0619 	add.w	r6, r4, #25
 8005598:	e7f5      	b.n	8005586 <_printf_i+0x22e>
 800559a:	bf00      	nop
 800559c:	08005ae5 	.word	0x08005ae5
 80055a0:	08005af6 	.word	0x08005af6

080055a4 <_sbrk_r>:
 80055a4:	b538      	push	{r3, r4, r5, lr}
 80055a6:	4d06      	ldr	r5, [pc, #24]	; (80055c0 <_sbrk_r+0x1c>)
 80055a8:	2300      	movs	r3, #0
 80055aa:	4604      	mov	r4, r0
 80055ac:	4608      	mov	r0, r1
 80055ae:	602b      	str	r3, [r5, #0]
 80055b0:	f7fb ff58 	bl	8001464 <_sbrk>
 80055b4:	1c43      	adds	r3, r0, #1
 80055b6:	d102      	bne.n	80055be <_sbrk_r+0x1a>
 80055b8:	682b      	ldr	r3, [r5, #0]
 80055ba:	b103      	cbz	r3, 80055be <_sbrk_r+0x1a>
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	bd38      	pop	{r3, r4, r5, pc}
 80055c0:	200005c8 	.word	0x200005c8

080055c4 <__sread>:
 80055c4:	b510      	push	{r4, lr}
 80055c6:	460c      	mov	r4, r1
 80055c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055cc:	f000 f8ee 	bl	80057ac <_read_r>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	bfab      	itete	ge
 80055d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055d6:	89a3      	ldrhlt	r3, [r4, #12]
 80055d8:	181b      	addge	r3, r3, r0
 80055da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055de:	bfac      	ite	ge
 80055e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80055e2:	81a3      	strhlt	r3, [r4, #12]
 80055e4:	bd10      	pop	{r4, pc}

080055e6 <__swrite>:
 80055e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ea:	461f      	mov	r7, r3
 80055ec:	898b      	ldrh	r3, [r1, #12]
 80055ee:	05db      	lsls	r3, r3, #23
 80055f0:	4605      	mov	r5, r0
 80055f2:	460c      	mov	r4, r1
 80055f4:	4616      	mov	r6, r2
 80055f6:	d505      	bpl.n	8005604 <__swrite+0x1e>
 80055f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055fc:	2302      	movs	r3, #2
 80055fe:	2200      	movs	r2, #0
 8005600:	f000 f868 	bl	80056d4 <_lseek_r>
 8005604:	89a3      	ldrh	r3, [r4, #12]
 8005606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800560a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800560e:	81a3      	strh	r3, [r4, #12]
 8005610:	4632      	mov	r2, r6
 8005612:	463b      	mov	r3, r7
 8005614:	4628      	mov	r0, r5
 8005616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800561a:	f000 b817 	b.w	800564c <_write_r>

0800561e <__sseek>:
 800561e:	b510      	push	{r4, lr}
 8005620:	460c      	mov	r4, r1
 8005622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005626:	f000 f855 	bl	80056d4 <_lseek_r>
 800562a:	1c43      	adds	r3, r0, #1
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	bf15      	itete	ne
 8005630:	6560      	strne	r0, [r4, #84]	; 0x54
 8005632:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005636:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800563a:	81a3      	strheq	r3, [r4, #12]
 800563c:	bf18      	it	ne
 800563e:	81a3      	strhne	r3, [r4, #12]
 8005640:	bd10      	pop	{r4, pc}

08005642 <__sclose>:
 8005642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005646:	f000 b813 	b.w	8005670 <_close_r>
	...

0800564c <_write_r>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	4d07      	ldr	r5, [pc, #28]	; (800566c <_write_r+0x20>)
 8005650:	4604      	mov	r4, r0
 8005652:	4608      	mov	r0, r1
 8005654:	4611      	mov	r1, r2
 8005656:	2200      	movs	r2, #0
 8005658:	602a      	str	r2, [r5, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	f7fb feb1 	bl	80013c2 <_write>
 8005660:	1c43      	adds	r3, r0, #1
 8005662:	d102      	bne.n	800566a <_write_r+0x1e>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	b103      	cbz	r3, 800566a <_write_r+0x1e>
 8005668:	6023      	str	r3, [r4, #0]
 800566a:	bd38      	pop	{r3, r4, r5, pc}
 800566c:	200005c8 	.word	0x200005c8

08005670 <_close_r>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	4d06      	ldr	r5, [pc, #24]	; (800568c <_close_r+0x1c>)
 8005674:	2300      	movs	r3, #0
 8005676:	4604      	mov	r4, r0
 8005678:	4608      	mov	r0, r1
 800567a:	602b      	str	r3, [r5, #0]
 800567c:	f7fb febd 	bl	80013fa <_close>
 8005680:	1c43      	adds	r3, r0, #1
 8005682:	d102      	bne.n	800568a <_close_r+0x1a>
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	b103      	cbz	r3, 800568a <_close_r+0x1a>
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	bd38      	pop	{r3, r4, r5, pc}
 800568c:	200005c8 	.word	0x200005c8

08005690 <_fstat_r>:
 8005690:	b538      	push	{r3, r4, r5, lr}
 8005692:	4d07      	ldr	r5, [pc, #28]	; (80056b0 <_fstat_r+0x20>)
 8005694:	2300      	movs	r3, #0
 8005696:	4604      	mov	r4, r0
 8005698:	4608      	mov	r0, r1
 800569a:	4611      	mov	r1, r2
 800569c:	602b      	str	r3, [r5, #0]
 800569e:	f7fb feb8 	bl	8001412 <_fstat>
 80056a2:	1c43      	adds	r3, r0, #1
 80056a4:	d102      	bne.n	80056ac <_fstat_r+0x1c>
 80056a6:	682b      	ldr	r3, [r5, #0]
 80056a8:	b103      	cbz	r3, 80056ac <_fstat_r+0x1c>
 80056aa:	6023      	str	r3, [r4, #0]
 80056ac:	bd38      	pop	{r3, r4, r5, pc}
 80056ae:	bf00      	nop
 80056b0:	200005c8 	.word	0x200005c8

080056b4 <_isatty_r>:
 80056b4:	b538      	push	{r3, r4, r5, lr}
 80056b6:	4d06      	ldr	r5, [pc, #24]	; (80056d0 <_isatty_r+0x1c>)
 80056b8:	2300      	movs	r3, #0
 80056ba:	4604      	mov	r4, r0
 80056bc:	4608      	mov	r0, r1
 80056be:	602b      	str	r3, [r5, #0]
 80056c0:	f7fb feb7 	bl	8001432 <_isatty>
 80056c4:	1c43      	adds	r3, r0, #1
 80056c6:	d102      	bne.n	80056ce <_isatty_r+0x1a>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	b103      	cbz	r3, 80056ce <_isatty_r+0x1a>
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	200005c8 	.word	0x200005c8

080056d4 <_lseek_r>:
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	4d07      	ldr	r5, [pc, #28]	; (80056f4 <_lseek_r+0x20>)
 80056d8:	4604      	mov	r4, r0
 80056da:	4608      	mov	r0, r1
 80056dc:	4611      	mov	r1, r2
 80056de:	2200      	movs	r2, #0
 80056e0:	602a      	str	r2, [r5, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	f7fb feb0 	bl	8001448 <_lseek>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d102      	bne.n	80056f2 <_lseek_r+0x1e>
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	b103      	cbz	r3, 80056f2 <_lseek_r+0x1e>
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	bd38      	pop	{r3, r4, r5, pc}
 80056f4:	200005c8 	.word	0x200005c8

080056f8 <memcpy>:
 80056f8:	440a      	add	r2, r1
 80056fa:	4291      	cmp	r1, r2
 80056fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005700:	d100      	bne.n	8005704 <memcpy+0xc>
 8005702:	4770      	bx	lr
 8005704:	b510      	push	{r4, lr}
 8005706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800570a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800570e:	4291      	cmp	r1, r2
 8005710:	d1f9      	bne.n	8005706 <memcpy+0xe>
 8005712:	bd10      	pop	{r4, pc}

08005714 <memmove>:
 8005714:	4288      	cmp	r0, r1
 8005716:	b510      	push	{r4, lr}
 8005718:	eb01 0402 	add.w	r4, r1, r2
 800571c:	d902      	bls.n	8005724 <memmove+0x10>
 800571e:	4284      	cmp	r4, r0
 8005720:	4623      	mov	r3, r4
 8005722:	d807      	bhi.n	8005734 <memmove+0x20>
 8005724:	1e43      	subs	r3, r0, #1
 8005726:	42a1      	cmp	r1, r4
 8005728:	d008      	beq.n	800573c <memmove+0x28>
 800572a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800572e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005732:	e7f8      	b.n	8005726 <memmove+0x12>
 8005734:	4402      	add	r2, r0
 8005736:	4601      	mov	r1, r0
 8005738:	428a      	cmp	r2, r1
 800573a:	d100      	bne.n	800573e <memmove+0x2a>
 800573c:	bd10      	pop	{r4, pc}
 800573e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005746:	e7f7      	b.n	8005738 <memmove+0x24>

08005748 <__malloc_lock>:
 8005748:	4801      	ldr	r0, [pc, #4]	; (8005750 <__malloc_lock+0x8>)
 800574a:	f7ff b9d1 	b.w	8004af0 <__retarget_lock_acquire_recursive>
 800574e:	bf00      	nop
 8005750:	200005c0 	.word	0x200005c0

08005754 <__malloc_unlock>:
 8005754:	4801      	ldr	r0, [pc, #4]	; (800575c <__malloc_unlock+0x8>)
 8005756:	f7ff b9cc 	b.w	8004af2 <__retarget_lock_release_recursive>
 800575a:	bf00      	nop
 800575c:	200005c0 	.word	0x200005c0

08005760 <_realloc_r>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	4607      	mov	r7, r0
 8005764:	4614      	mov	r4, r2
 8005766:	460e      	mov	r6, r1
 8005768:	b921      	cbnz	r1, 8005774 <_realloc_r+0x14>
 800576a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800576e:	4611      	mov	r1, r2
 8005770:	f7ff ba74 	b.w	8004c5c <_malloc_r>
 8005774:	b922      	cbnz	r2, 8005780 <_realloc_r+0x20>
 8005776:	f7ff fa21 	bl	8004bbc <_free_r>
 800577a:	4625      	mov	r5, r4
 800577c:	4628      	mov	r0, r5
 800577e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005780:	f000 f826 	bl	80057d0 <_malloc_usable_size_r>
 8005784:	42a0      	cmp	r0, r4
 8005786:	d20f      	bcs.n	80057a8 <_realloc_r+0x48>
 8005788:	4621      	mov	r1, r4
 800578a:	4638      	mov	r0, r7
 800578c:	f7ff fa66 	bl	8004c5c <_malloc_r>
 8005790:	4605      	mov	r5, r0
 8005792:	2800      	cmp	r0, #0
 8005794:	d0f2      	beq.n	800577c <_realloc_r+0x1c>
 8005796:	4631      	mov	r1, r6
 8005798:	4622      	mov	r2, r4
 800579a:	f7ff ffad 	bl	80056f8 <memcpy>
 800579e:	4631      	mov	r1, r6
 80057a0:	4638      	mov	r0, r7
 80057a2:	f7ff fa0b 	bl	8004bbc <_free_r>
 80057a6:	e7e9      	b.n	800577c <_realloc_r+0x1c>
 80057a8:	4635      	mov	r5, r6
 80057aa:	e7e7      	b.n	800577c <_realloc_r+0x1c>

080057ac <_read_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	4d07      	ldr	r5, [pc, #28]	; (80057cc <_read_r+0x20>)
 80057b0:	4604      	mov	r4, r0
 80057b2:	4608      	mov	r0, r1
 80057b4:	4611      	mov	r1, r2
 80057b6:	2200      	movs	r2, #0
 80057b8:	602a      	str	r2, [r5, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f7fb fde4 	bl	8001388 <_read>
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	d102      	bne.n	80057ca <_read_r+0x1e>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	b103      	cbz	r3, 80057ca <_read_r+0x1e>
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	bd38      	pop	{r3, r4, r5, pc}
 80057cc:	200005c8 	.word	0x200005c8

080057d0 <_malloc_usable_size_r>:
 80057d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057d4:	1f18      	subs	r0, r3, #4
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	bfbc      	itt	lt
 80057da:	580b      	ldrlt	r3, [r1, r0]
 80057dc:	18c0      	addlt	r0, r0, r3
 80057de:	4770      	bx	lr

080057e0 <_init>:
 80057e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e2:	bf00      	nop
 80057e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e6:	bc08      	pop	{r3}
 80057e8:	469e      	mov	lr, r3
 80057ea:	4770      	bx	lr

080057ec <_fini>:
 80057ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ee:	bf00      	nop
 80057f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f2:	bc08      	pop	{r3}
 80057f4:	469e      	mov	lr, r3
 80057f6:	4770      	bx	lr
